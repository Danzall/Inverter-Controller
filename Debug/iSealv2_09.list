
iSealv2_09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007894  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08007a84  08007a84  00017a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007e28  08007e28  00017e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007e2c  08007e2c  00017e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000033c  20000000  08007e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002914  2000033c  0800816c  0002033c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20002c50  0800816c  00022c50  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002033c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000351f6  00000000  00000000  00020365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000064e3  00000000  00000000  0005555b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000211ff  00000000  00000000  0005ba3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001610  00000000  00000000  0007cc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00004a50  00000000  00000000  0007e250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0001ec8e  00000000  00000000  00082ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00031587  00000000  00000000  000a192e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ae9a6  00000000  00000000  000d2eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0018185b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000583c  00000000  00000000  001818b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	2000033c 	.word	0x2000033c
 800020c:	00000000 	.word	0x00000000
 8000210:	08007a6c 	.word	0x08007a6c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000340 	.word	0x20000340
 800022c:	08007a6c 	.word	0x08007a6c

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_dmul>:
 8000240:	b570      	push	{r4, r5, r6, lr}
 8000242:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000246:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800024a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800024e:	bf1d      	ittte	ne
 8000250:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000254:	ea94 0f0c 	teqne	r4, ip
 8000258:	ea95 0f0c 	teqne	r5, ip
 800025c:	f000 f8de 	bleq	800041c <__aeabi_dmul+0x1dc>
 8000260:	442c      	add	r4, r5
 8000262:	ea81 0603 	eor.w	r6, r1, r3
 8000266:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800026a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800026e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000272:	bf18      	it	ne
 8000274:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000278:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800027c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000280:	d038      	beq.n	80002f4 <__aeabi_dmul+0xb4>
 8000282:	fba0 ce02 	umull	ip, lr, r0, r2
 8000286:	f04f 0500 	mov.w	r5, #0
 800028a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800028e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000292:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000296:	f04f 0600 	mov.w	r6, #0
 800029a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800029e:	f09c 0f00 	teq	ip, #0
 80002a2:	bf18      	it	ne
 80002a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002b4:	d204      	bcs.n	80002c0 <__aeabi_dmul+0x80>
 80002b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ba:	416d      	adcs	r5, r5
 80002bc:	eb46 0606 	adc.w	r6, r6, r6
 80002c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002d8:	bf88      	it	hi
 80002da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002de:	d81e      	bhi.n	800031e <__aeabi_dmul+0xde>
 80002e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	bd70      	pop	{r4, r5, r6, pc}
 80002f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002f8:	ea46 0101 	orr.w	r1, r6, r1
 80002fc:	ea40 0002 	orr.w	r0, r0, r2
 8000300:	ea81 0103 	eor.w	r1, r1, r3
 8000304:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000308:	bfc2      	ittt	gt
 800030a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800030e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000312:	bd70      	popgt	{r4, r5, r6, pc}
 8000314:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000318:	f04f 0e00 	mov.w	lr, #0
 800031c:	3c01      	subs	r4, #1
 800031e:	f300 80ab 	bgt.w	8000478 <__aeabi_dmul+0x238>
 8000322:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000326:	bfde      	ittt	le
 8000328:	2000      	movle	r0, #0
 800032a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800032e:	bd70      	pople	{r4, r5, r6, pc}
 8000330:	f1c4 0400 	rsb	r4, r4, #0
 8000334:	3c20      	subs	r4, #32
 8000336:	da35      	bge.n	80003a4 <__aeabi_dmul+0x164>
 8000338:	340c      	adds	r4, #12
 800033a:	dc1b      	bgt.n	8000374 <__aeabi_dmul+0x134>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f305 	lsl.w	r3, r0, r5
 8000348:	fa20 f004 	lsr.w	r0, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000358:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800035c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000360:	fa21 f604 	lsr.w	r6, r1, r4
 8000364:	eb42 0106 	adc.w	r1, r2, r6
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f1c4 040c 	rsb	r4, r4, #12
 8000378:	f1c4 0520 	rsb	r5, r4, #32
 800037c:	fa00 f304 	lsl.w	r3, r0, r4
 8000380:	fa20 f005 	lsr.w	r0, r0, r5
 8000384:	fa01 f204 	lsl.w	r2, r1, r4
 8000388:	ea40 0002 	orr.w	r0, r0, r2
 800038c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000390:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000394:	f141 0100 	adc.w	r1, r1, #0
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 0520 	rsb	r5, r4, #32
 80003a8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80003b0:	fa20 f304 	lsr.w	r3, r0, r4
 80003b4:	fa01 f205 	lsl.w	r2, r1, r5
 80003b8:	ea43 0302 	orr.w	r3, r3, r2
 80003bc:	fa21 f004 	lsr.w	r0, r1, r4
 80003c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	fa21 f204 	lsr.w	r2, r1, r4
 80003c8:	ea20 0002 	bic.w	r0, r0, r2
 80003cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003d4:	bf08      	it	eq
 80003d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003da:	bd70      	pop	{r4, r5, r6, pc}
 80003dc:	f094 0f00 	teq	r4, #0
 80003e0:	d10f      	bne.n	8000402 <__aeabi_dmul+0x1c2>
 80003e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003e6:	0040      	lsls	r0, r0, #1
 80003e8:	eb41 0101 	adc.w	r1, r1, r1
 80003ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003f0:	bf08      	it	eq
 80003f2:	3c01      	subeq	r4, #1
 80003f4:	d0f7      	beq.n	80003e6 <__aeabi_dmul+0x1a6>
 80003f6:	ea41 0106 	orr.w	r1, r1, r6
 80003fa:	f095 0f00 	teq	r5, #0
 80003fe:	bf18      	it	ne
 8000400:	4770      	bxne	lr
 8000402:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000406:	0052      	lsls	r2, r2, #1
 8000408:	eb43 0303 	adc.w	r3, r3, r3
 800040c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000410:	bf08      	it	eq
 8000412:	3d01      	subeq	r5, #1
 8000414:	d0f7      	beq.n	8000406 <__aeabi_dmul+0x1c6>
 8000416:	ea43 0306 	orr.w	r3, r3, r6
 800041a:	4770      	bx	lr
 800041c:	ea94 0f0c 	teq	r4, ip
 8000420:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000424:	bf18      	it	ne
 8000426:	ea95 0f0c 	teqne	r5, ip
 800042a:	d00c      	beq.n	8000446 <__aeabi_dmul+0x206>
 800042c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000430:	bf18      	it	ne
 8000432:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000436:	d1d1      	bne.n	80003dc <__aeabi_dmul+0x19c>
 8000438:	ea81 0103 	eor.w	r1, r1, r3
 800043c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd70      	pop	{r4, r5, r6, pc}
 8000446:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800044a:	bf06      	itte	eq
 800044c:	4610      	moveq	r0, r2
 800044e:	4619      	moveq	r1, r3
 8000450:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000454:	d019      	beq.n	800048a <__aeabi_dmul+0x24a>
 8000456:	ea94 0f0c 	teq	r4, ip
 800045a:	d102      	bne.n	8000462 <__aeabi_dmul+0x222>
 800045c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000460:	d113      	bne.n	800048a <__aeabi_dmul+0x24a>
 8000462:	ea95 0f0c 	teq	r5, ip
 8000466:	d105      	bne.n	8000474 <__aeabi_dmul+0x234>
 8000468:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800046c:	bf1c      	itt	ne
 800046e:	4610      	movne	r0, r2
 8000470:	4619      	movne	r1, r3
 8000472:	d10a      	bne.n	800048a <__aeabi_dmul+0x24a>
 8000474:	ea81 0103 	eor.w	r1, r1, r3
 8000478:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800047c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd70      	pop	{r4, r5, r6, pc}
 800048a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800048e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000492:	bd70      	pop	{r4, r5, r6, pc}

08000494 <__aeabi_drsub>:
 8000494:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e002      	b.n	80004a0 <__adddf3>
 800049a:	bf00      	nop

0800049c <__aeabi_dsub>:
 800049c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004a0 <__adddf3>:
 80004a0:	b530      	push	{r4, r5, lr}
 80004a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004aa:	ea94 0f05 	teq	r4, r5
 80004ae:	bf08      	it	eq
 80004b0:	ea90 0f02 	teqeq	r0, r2
 80004b4:	bf1f      	itttt	ne
 80004b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c6:	f000 80e2 	beq.w	800068e <__adddf3+0x1ee>
 80004ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004d2:	bfb8      	it	lt
 80004d4:	426d      	neglt	r5, r5
 80004d6:	dd0c      	ble.n	80004f2 <__adddf3+0x52>
 80004d8:	442c      	add	r4, r5
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	ea82 0000 	eor.w	r0, r2, r0
 80004e6:	ea83 0101 	eor.w	r1, r3, r1
 80004ea:	ea80 0202 	eor.w	r2, r0, r2
 80004ee:	ea81 0303 	eor.w	r3, r1, r3
 80004f2:	2d36      	cmp	r5, #54	; 0x36
 80004f4:	bf88      	it	hi
 80004f6:	bd30      	pophi	{r4, r5, pc}
 80004f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000500:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000504:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000508:	d002      	beq.n	8000510 <__adddf3+0x70>
 800050a:	4240      	negs	r0, r0
 800050c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000510:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000514:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000518:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800051c:	d002      	beq.n	8000524 <__adddf3+0x84>
 800051e:	4252      	negs	r2, r2
 8000520:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000524:	ea94 0f05 	teq	r4, r5
 8000528:	f000 80a7 	beq.w	800067a <__adddf3+0x1da>
 800052c:	f1a4 0401 	sub.w	r4, r4, #1
 8000530:	f1d5 0e20 	rsbs	lr, r5, #32
 8000534:	db0d      	blt.n	8000552 <__adddf3+0xb2>
 8000536:	fa02 fc0e 	lsl.w	ip, r2, lr
 800053a:	fa22 f205 	lsr.w	r2, r2, r5
 800053e:	1880      	adds	r0, r0, r2
 8000540:	f141 0100 	adc.w	r1, r1, #0
 8000544:	fa03 f20e 	lsl.w	r2, r3, lr
 8000548:	1880      	adds	r0, r0, r2
 800054a:	fa43 f305 	asr.w	r3, r3, r5
 800054e:	4159      	adcs	r1, r3
 8000550:	e00e      	b.n	8000570 <__adddf3+0xd0>
 8000552:	f1a5 0520 	sub.w	r5, r5, #32
 8000556:	f10e 0e20 	add.w	lr, lr, #32
 800055a:	2a01      	cmp	r2, #1
 800055c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000560:	bf28      	it	cs
 8000562:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000566:	fa43 f305 	asr.w	r3, r3, r5
 800056a:	18c0      	adds	r0, r0, r3
 800056c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	d507      	bpl.n	8000586 <__adddf3+0xe6>
 8000576:	f04f 0e00 	mov.w	lr, #0
 800057a:	f1dc 0c00 	rsbs	ip, ip, #0
 800057e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000582:	eb6e 0101 	sbc.w	r1, lr, r1
 8000586:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800058a:	d31b      	bcc.n	80005c4 <__adddf3+0x124>
 800058c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000590:	d30c      	bcc.n	80005ac <__adddf3+0x10c>
 8000592:	0849      	lsrs	r1, r1, #1
 8000594:	ea5f 0030 	movs.w	r0, r0, rrx
 8000598:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800059c:	f104 0401 	add.w	r4, r4, #1
 80005a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005a8:	f080 809a 	bcs.w	80006e0 <__adddf3+0x240>
 80005ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	ea41 0105 	orr.w	r1, r1, r5
 80005c2:	bd30      	pop	{r4, r5, pc}
 80005c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005c8:	4140      	adcs	r0, r0
 80005ca:	eb41 0101 	adc.w	r1, r1, r1
 80005ce:	3c01      	subs	r4, #1
 80005d0:	bf28      	it	cs
 80005d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005d6:	d2e9      	bcs.n	80005ac <__adddf3+0x10c>
 80005d8:	f091 0f00 	teq	r1, #0
 80005dc:	bf04      	itt	eq
 80005de:	4601      	moveq	r1, r0
 80005e0:	2000      	moveq	r0, #0
 80005e2:	fab1 f381 	clz	r3, r1
 80005e6:	bf08      	it	eq
 80005e8:	3320      	addeq	r3, #32
 80005ea:	f1a3 030b 	sub.w	r3, r3, #11
 80005ee:	f1b3 0220 	subs.w	r2, r3, #32
 80005f2:	da0c      	bge.n	800060e <__adddf3+0x16e>
 80005f4:	320c      	adds	r2, #12
 80005f6:	dd08      	ble.n	800060a <__adddf3+0x16a>
 80005f8:	f102 0c14 	add.w	ip, r2, #20
 80005fc:	f1c2 020c 	rsb	r2, r2, #12
 8000600:	fa01 f00c 	lsl.w	r0, r1, ip
 8000604:	fa21 f102 	lsr.w	r1, r1, r2
 8000608:	e00c      	b.n	8000624 <__adddf3+0x184>
 800060a:	f102 0214 	add.w	r2, r2, #20
 800060e:	bfd8      	it	le
 8000610:	f1c2 0c20 	rsble	ip, r2, #32
 8000614:	fa01 f102 	lsl.w	r1, r1, r2
 8000618:	fa20 fc0c 	lsr.w	ip, r0, ip
 800061c:	bfdc      	itt	le
 800061e:	ea41 010c 	orrle.w	r1, r1, ip
 8000622:	4090      	lslle	r0, r2
 8000624:	1ae4      	subs	r4, r4, r3
 8000626:	bfa2      	ittt	ge
 8000628:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800062c:	4329      	orrge	r1, r5
 800062e:	bd30      	popge	{r4, r5, pc}
 8000630:	ea6f 0404 	mvn.w	r4, r4
 8000634:	3c1f      	subs	r4, #31
 8000636:	da1c      	bge.n	8000672 <__adddf3+0x1d2>
 8000638:	340c      	adds	r4, #12
 800063a:	dc0e      	bgt.n	800065a <__adddf3+0x1ba>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0220 	rsb	r2, r4, #32
 8000644:	fa20 f004 	lsr.w	r0, r0, r4
 8000648:	fa01 f302 	lsl.w	r3, r1, r2
 800064c:	ea40 0003 	orr.w	r0, r0, r3
 8000650:	fa21 f304 	lsr.w	r3, r1, r4
 8000654:	ea45 0103 	orr.w	r1, r5, r3
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	f1c4 040c 	rsb	r4, r4, #12
 800065e:	f1c4 0220 	rsb	r2, r4, #32
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 f304 	lsl.w	r3, r1, r4
 800066a:	ea40 0003 	orr.w	r0, r0, r3
 800066e:	4629      	mov	r1, r5
 8000670:	bd30      	pop	{r4, r5, pc}
 8000672:	fa21 f004 	lsr.w	r0, r1, r4
 8000676:	4629      	mov	r1, r5
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	f094 0f00 	teq	r4, #0
 800067e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000682:	bf06      	itte	eq
 8000684:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000688:	3401      	addeq	r4, #1
 800068a:	3d01      	subne	r5, #1
 800068c:	e74e      	b.n	800052c <__adddf3+0x8c>
 800068e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000692:	bf18      	it	ne
 8000694:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000698:	d029      	beq.n	80006ee <__adddf3+0x24e>
 800069a:	ea94 0f05 	teq	r4, r5
 800069e:	bf08      	it	eq
 80006a0:	ea90 0f02 	teqeq	r0, r2
 80006a4:	d005      	beq.n	80006b2 <__adddf3+0x212>
 80006a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006aa:	bf04      	itt	eq
 80006ac:	4619      	moveq	r1, r3
 80006ae:	4610      	moveq	r0, r2
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	ea91 0f03 	teq	r1, r3
 80006b6:	bf1e      	ittt	ne
 80006b8:	2100      	movne	r1, #0
 80006ba:	2000      	movne	r0, #0
 80006bc:	bd30      	popne	{r4, r5, pc}
 80006be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006c2:	d105      	bne.n	80006d0 <__adddf3+0x230>
 80006c4:	0040      	lsls	r0, r0, #1
 80006c6:	4149      	adcs	r1, r1
 80006c8:	bf28      	it	cs
 80006ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006ce:	bd30      	pop	{r4, r5, pc}
 80006d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006d4:	bf3c      	itt	cc
 80006d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006da:	bd30      	popcc	{r4, r5, pc}
 80006dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf1a      	itte	ne
 80006f4:	4619      	movne	r1, r3
 80006f6:	4610      	movne	r0, r2
 80006f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006fc:	bf1c      	itt	ne
 80006fe:	460b      	movne	r3, r1
 8000700:	4602      	movne	r2, r0
 8000702:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000706:	bf06      	itte	eq
 8000708:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800070c:	ea91 0f03 	teqeq	r1, r3
 8000710:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000714:	bd30      	pop	{r4, r5, pc}
 8000716:	bf00      	nop

08000718 <__aeabi_ui2d>:
 8000718:	f090 0f00 	teq	r0, #0
 800071c:	bf04      	itt	eq
 800071e:	2100      	moveq	r1, #0
 8000720:	4770      	bxeq	lr
 8000722:	b530      	push	{r4, r5, lr}
 8000724:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000728:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800072c:	f04f 0500 	mov.w	r5, #0
 8000730:	f04f 0100 	mov.w	r1, #0
 8000734:	e750      	b.n	80005d8 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_i2d>:
 8000738:	f090 0f00 	teq	r0, #0
 800073c:	bf04      	itt	eq
 800073e:	2100      	moveq	r1, #0
 8000740:	4770      	bxeq	lr
 8000742:	b530      	push	{r4, r5, lr}
 8000744:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000748:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800074c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000750:	bf48      	it	mi
 8000752:	4240      	negmi	r0, r0
 8000754:	f04f 0100 	mov.w	r1, #0
 8000758:	e73e      	b.n	80005d8 <__adddf3+0x138>
 800075a:	bf00      	nop

0800075c <__aeabi_f2d>:
 800075c:	0042      	lsls	r2, r0, #1
 800075e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000762:	ea4f 0131 	mov.w	r1, r1, rrx
 8000766:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800076a:	bf1f      	itttt	ne
 800076c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000770:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000774:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000778:	4770      	bxne	lr
 800077a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800077e:	bf08      	it	eq
 8000780:	4770      	bxeq	lr
 8000782:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000786:	bf04      	itt	eq
 8000788:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800078c:	4770      	bxeq	lr
 800078e:	b530      	push	{r4, r5, lr}
 8000790:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000794:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000798:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800079c:	e71c      	b.n	80005d8 <__adddf3+0x138>
 800079e:	bf00      	nop

080007a0 <__aeabi_ul2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f04f 0500 	mov.w	r5, #0
 80007ae:	e00a      	b.n	80007c6 <__aeabi_l2d+0x16>

080007b0 <__aeabi_l2d>:
 80007b0:	ea50 0201 	orrs.w	r2, r0, r1
 80007b4:	bf08      	it	eq
 80007b6:	4770      	bxeq	lr
 80007b8:	b530      	push	{r4, r5, lr}
 80007ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007be:	d502      	bpl.n	80007c6 <__aeabi_l2d+0x16>
 80007c0:	4240      	negs	r0, r0
 80007c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007d2:	f43f aed8 	beq.w	8000586 <__adddf3+0xe6>
 80007d6:	f04f 0203 	mov.w	r2, #3
 80007da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007de:	bf18      	it	ne
 80007e0:	3203      	addne	r2, #3
 80007e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007e6:	bf18      	it	ne
 80007e8:	3203      	addne	r2, #3
 80007ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007ee:	f1c2 0320 	rsb	r3, r2, #32
 80007f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007f6:	fa20 f002 	lsr.w	r0, r0, r2
 80007fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80007fe:	ea40 000e 	orr.w	r0, r0, lr
 8000802:	fa21 f102 	lsr.w	r1, r1, r2
 8000806:	4414      	add	r4, r2
 8000808:	e6bd      	b.n	8000586 <__adddf3+0xe6>
 800080a:	bf00      	nop

0800080c <__aeabi_d2f>:
 800080c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000810:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000814:	bf24      	itt	cs
 8000816:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800081a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800081e:	d90d      	bls.n	800083c <__aeabi_d2f+0x30>
 8000820:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000824:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000828:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800082c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000830:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000834:	bf08      	it	eq
 8000836:	f020 0001 	biceq.w	r0, r0, #1
 800083a:	4770      	bx	lr
 800083c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000840:	d121      	bne.n	8000886 <__aeabi_d2f+0x7a>
 8000842:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000846:	bfbc      	itt	lt
 8000848:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800084c:	4770      	bxlt	lr
 800084e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000852:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000856:	f1c2 0218 	rsb	r2, r2, #24
 800085a:	f1c2 0c20 	rsb	ip, r2, #32
 800085e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000862:	fa20 f002 	lsr.w	r0, r0, r2
 8000866:	bf18      	it	ne
 8000868:	f040 0001 	orrne.w	r0, r0, #1
 800086c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000870:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000874:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000878:	ea40 000c 	orr.w	r0, r0, ip
 800087c:	fa23 f302 	lsr.w	r3, r3, r2
 8000880:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000884:	e7cc      	b.n	8000820 <__aeabi_d2f+0x14>
 8000886:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800088a:	d107      	bne.n	800089c <__aeabi_d2f+0x90>
 800088c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000890:	bf1e      	ittt	ne
 8000892:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000896:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800089a:	4770      	bxne	lr
 800089c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop

080008ac <__aeabi_frsub>:
 80008ac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80008b0:	e002      	b.n	80008b8 <__addsf3>
 80008b2:	bf00      	nop

080008b4 <__aeabi_fsub>:
 80008b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080008b8 <__addsf3>:
 80008b8:	0042      	lsls	r2, r0, #1
 80008ba:	bf1f      	itttt	ne
 80008bc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80008c0:	ea92 0f03 	teqne	r2, r3
 80008c4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80008c8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008cc:	d06a      	beq.n	80009a4 <__addsf3+0xec>
 80008ce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80008d2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80008d6:	bfc1      	itttt	gt
 80008d8:	18d2      	addgt	r2, r2, r3
 80008da:	4041      	eorgt	r1, r0
 80008dc:	4048      	eorgt	r0, r1
 80008de:	4041      	eorgt	r1, r0
 80008e0:	bfb8      	it	lt
 80008e2:	425b      	neglt	r3, r3
 80008e4:	2b19      	cmp	r3, #25
 80008e6:	bf88      	it	hi
 80008e8:	4770      	bxhi	lr
 80008ea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80008ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80008f6:	bf18      	it	ne
 80008f8:	4240      	negne	r0, r0
 80008fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008fe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000902:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000906:	bf18      	it	ne
 8000908:	4249      	negne	r1, r1
 800090a:	ea92 0f03 	teq	r2, r3
 800090e:	d03f      	beq.n	8000990 <__addsf3+0xd8>
 8000910:	f1a2 0201 	sub.w	r2, r2, #1
 8000914:	fa41 fc03 	asr.w	ip, r1, r3
 8000918:	eb10 000c 	adds.w	r0, r0, ip
 800091c:	f1c3 0320 	rsb	r3, r3, #32
 8000920:	fa01 f103 	lsl.w	r1, r1, r3
 8000924:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000928:	d502      	bpl.n	8000930 <__addsf3+0x78>
 800092a:	4249      	negs	r1, r1
 800092c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000930:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000934:	d313      	bcc.n	800095e <__addsf3+0xa6>
 8000936:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800093a:	d306      	bcc.n	800094a <__addsf3+0x92>
 800093c:	0840      	lsrs	r0, r0, #1
 800093e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000942:	f102 0201 	add.w	r2, r2, #1
 8000946:	2afe      	cmp	r2, #254	; 0xfe
 8000948:	d251      	bcs.n	80009ee <__addsf3+0x136>
 800094a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800094e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000952:	bf08      	it	eq
 8000954:	f020 0001 	biceq.w	r0, r0, #1
 8000958:	ea40 0003 	orr.w	r0, r0, r3
 800095c:	4770      	bx	lr
 800095e:	0049      	lsls	r1, r1, #1
 8000960:	eb40 0000 	adc.w	r0, r0, r0
 8000964:	3a01      	subs	r2, #1
 8000966:	bf28      	it	cs
 8000968:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800096c:	d2ed      	bcs.n	800094a <__addsf3+0x92>
 800096e:	fab0 fc80 	clz	ip, r0
 8000972:	f1ac 0c08 	sub.w	ip, ip, #8
 8000976:	ebb2 020c 	subs.w	r2, r2, ip
 800097a:	fa00 f00c 	lsl.w	r0, r0, ip
 800097e:	bfaa      	itet	ge
 8000980:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000984:	4252      	neglt	r2, r2
 8000986:	4318      	orrge	r0, r3
 8000988:	bfbc      	itt	lt
 800098a:	40d0      	lsrlt	r0, r2
 800098c:	4318      	orrlt	r0, r3
 800098e:	4770      	bx	lr
 8000990:	f092 0f00 	teq	r2, #0
 8000994:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000998:	bf06      	itte	eq
 800099a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800099e:	3201      	addeq	r2, #1
 80009a0:	3b01      	subne	r3, #1
 80009a2:	e7b5      	b.n	8000910 <__addsf3+0x58>
 80009a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009b2:	d021      	beq.n	80009f8 <__addsf3+0x140>
 80009b4:	ea92 0f03 	teq	r2, r3
 80009b8:	d004      	beq.n	80009c4 <__addsf3+0x10c>
 80009ba:	f092 0f00 	teq	r2, #0
 80009be:	bf08      	it	eq
 80009c0:	4608      	moveq	r0, r1
 80009c2:	4770      	bx	lr
 80009c4:	ea90 0f01 	teq	r0, r1
 80009c8:	bf1c      	itt	ne
 80009ca:	2000      	movne	r0, #0
 80009cc:	4770      	bxne	lr
 80009ce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80009d2:	d104      	bne.n	80009de <__addsf3+0x126>
 80009d4:	0040      	lsls	r0, r0, #1
 80009d6:	bf28      	it	cs
 80009d8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80009dc:	4770      	bx	lr
 80009de:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80009e2:	bf3c      	itt	cc
 80009e4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80009e8:	4770      	bxcc	lr
 80009ea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009ee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80009f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f6:	4770      	bx	lr
 80009f8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80009fc:	bf16      	itet	ne
 80009fe:	4608      	movne	r0, r1
 8000a00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a04:	4601      	movne	r1, r0
 8000a06:	0242      	lsls	r2, r0, #9
 8000a08:	bf06      	itte	eq
 8000a0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a0e:	ea90 0f01 	teqeq	r0, r1
 8000a12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a16:	4770      	bx	lr

08000a18 <__aeabi_ui2f>:
 8000a18:	f04f 0300 	mov.w	r3, #0
 8000a1c:	e004      	b.n	8000a28 <__aeabi_i2f+0x8>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_i2f>:
 8000a20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000a24:	bf48      	it	mi
 8000a26:	4240      	negmi	r0, r0
 8000a28:	ea5f 0c00 	movs.w	ip, r0
 8000a2c:	bf08      	it	eq
 8000a2e:	4770      	bxeq	lr
 8000a30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000a34:	4601      	mov	r1, r0
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	e01c      	b.n	8000a76 <__aeabi_l2f+0x2a>

08000a3c <__aeabi_ul2f>:
 8000a3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000a40:	bf08      	it	eq
 8000a42:	4770      	bxeq	lr
 8000a44:	f04f 0300 	mov.w	r3, #0
 8000a48:	e00a      	b.n	8000a60 <__aeabi_l2f+0x14>
 8000a4a:	bf00      	nop

08000a4c <__aeabi_l2f>:
 8000a4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000a50:	bf08      	it	eq
 8000a52:	4770      	bxeq	lr
 8000a54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__aeabi_l2f+0x14>
 8000a5a:	4240      	negs	r0, r0
 8000a5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a60:	ea5f 0c01 	movs.w	ip, r1
 8000a64:	bf02      	ittt	eq
 8000a66:	4684      	moveq	ip, r0
 8000a68:	4601      	moveq	r1, r0
 8000a6a:	2000      	moveq	r0, #0
 8000a6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000a70:	bf08      	it	eq
 8000a72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000a76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000a7a:	fabc f28c 	clz	r2, ip
 8000a7e:	3a08      	subs	r2, #8
 8000a80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000a84:	db10      	blt.n	8000aa8 <__aeabi_l2f+0x5c>
 8000a86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a8a:	4463      	add	r3, ip
 8000a8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a90:	f1c2 0220 	rsb	r2, r2, #32
 8000a94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000a98:	fa20 f202 	lsr.w	r2, r0, r2
 8000a9c:	eb43 0002 	adc.w	r0, r3, r2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f102 0220 	add.w	r2, r2, #32
 8000aac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ab0:	f1c2 0220 	rsb	r2, r2, #32
 8000ab4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ab8:	fa21 f202 	lsr.w	r2, r1, r2
 8000abc:	eb43 0002 	adc.w	r0, r3, r2
 8000ac0:	bf08      	it	eq
 8000ac2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_fmul>:
 8000ac8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000acc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ad6:	ea92 0f0c 	teqne	r2, ip
 8000ada:	ea93 0f0c 	teqne	r3, ip
 8000ade:	d06f      	beq.n	8000bc0 <__aeabi_fmul+0xf8>
 8000ae0:	441a      	add	r2, r3
 8000ae2:	ea80 0c01 	eor.w	ip, r0, r1
 8000ae6:	0240      	lsls	r0, r0, #9
 8000ae8:	bf18      	it	ne
 8000aea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000aee:	d01e      	beq.n	8000b2e <__aeabi_fmul+0x66>
 8000af0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000af4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000af8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000afc:	fba0 3101 	umull	r3, r1, r0, r1
 8000b00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b04:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b08:	bf3e      	ittt	cc
 8000b0a:	0049      	lslcc	r1, r1, #1
 8000b0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b10:	005b      	lslcc	r3, r3, #1
 8000b12:	ea40 0001 	orr.w	r0, r0, r1
 8000b16:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b1a:	2afd      	cmp	r2, #253	; 0xfd
 8000b1c:	d81d      	bhi.n	8000b5a <__aeabi_fmul+0x92>
 8000b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b26:	bf08      	it	eq
 8000b28:	f020 0001 	biceq.w	r0, r0, #1
 8000b2c:	4770      	bx	lr
 8000b2e:	f090 0f00 	teq	r0, #0
 8000b32:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b36:	bf08      	it	eq
 8000b38:	0249      	lsleq	r1, r1, #9
 8000b3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b42:	3a7f      	subs	r2, #127	; 0x7f
 8000b44:	bfc2      	ittt	gt
 8000b46:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b4e:	4770      	bxgt	lr
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	f04f 0300 	mov.w	r3, #0
 8000b58:	3a01      	subs	r2, #1
 8000b5a:	dc5d      	bgt.n	8000c18 <__aeabi_fmul+0x150>
 8000b5c:	f112 0f19 	cmn.w	r2, #25
 8000b60:	bfdc      	itt	le
 8000b62:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000b66:	4770      	bxle	lr
 8000b68:	f1c2 0200 	rsb	r2, r2, #0
 8000b6c:	0041      	lsls	r1, r0, #1
 8000b6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000b72:	f1c2 0220 	rsb	r2, r2, #32
 8000b76:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b7a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000b7e:	f140 0000 	adc.w	r0, r0, #0
 8000b82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000b86:	bf08      	it	eq
 8000b88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b8c:	4770      	bx	lr
 8000b8e:	f092 0f00 	teq	r2, #0
 8000b92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000b96:	bf02      	ittt	eq
 8000b98:	0040      	lsleq	r0, r0, #1
 8000b9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000b9e:	3a01      	subeq	r2, #1
 8000ba0:	d0f9      	beq.n	8000b96 <__aeabi_fmul+0xce>
 8000ba2:	ea40 000c 	orr.w	r0, r0, ip
 8000ba6:	f093 0f00 	teq	r3, #0
 8000baa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bae:	bf02      	ittt	eq
 8000bb0:	0049      	lsleq	r1, r1, #1
 8000bb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000bb6:	3b01      	subeq	r3, #1
 8000bb8:	d0f9      	beq.n	8000bae <__aeabi_fmul+0xe6>
 8000bba:	ea41 010c 	orr.w	r1, r1, ip
 8000bbe:	e78f      	b.n	8000ae0 <__aeabi_fmul+0x18>
 8000bc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000bc4:	ea92 0f0c 	teq	r2, ip
 8000bc8:	bf18      	it	ne
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d00a      	beq.n	8000be6 <__aeabi_fmul+0x11e>
 8000bd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000bd4:	bf18      	it	ne
 8000bd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000bda:	d1d8      	bne.n	8000b8e <__aeabi_fmul+0xc6>
 8000bdc:	ea80 0001 	eor.w	r0, r0, r1
 8000be0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000be4:	4770      	bx	lr
 8000be6:	f090 0f00 	teq	r0, #0
 8000bea:	bf17      	itett	ne
 8000bec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000bf0:	4608      	moveq	r0, r1
 8000bf2:	f091 0f00 	teqne	r1, #0
 8000bf6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000bfa:	d014      	beq.n	8000c26 <__aeabi_fmul+0x15e>
 8000bfc:	ea92 0f0c 	teq	r2, ip
 8000c00:	d101      	bne.n	8000c06 <__aeabi_fmul+0x13e>
 8000c02:	0242      	lsls	r2, r0, #9
 8000c04:	d10f      	bne.n	8000c26 <__aeabi_fmul+0x15e>
 8000c06:	ea93 0f0c 	teq	r3, ip
 8000c0a:	d103      	bne.n	8000c14 <__aeabi_fmul+0x14c>
 8000c0c:	024b      	lsls	r3, r1, #9
 8000c0e:	bf18      	it	ne
 8000c10:	4608      	movne	r0, r1
 8000c12:	d108      	bne.n	8000c26 <__aeabi_fmul+0x15e>
 8000c14:	ea80 0001 	eor.w	r0, r0, r1
 8000c18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_fdiv>:
 8000c30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c38:	bf1e      	ittt	ne
 8000c3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c3e:	ea92 0f0c 	teqne	r2, ip
 8000c42:	ea93 0f0c 	teqne	r3, ip
 8000c46:	d069      	beq.n	8000d1c <__aeabi_fdiv+0xec>
 8000c48:	eba2 0203 	sub.w	r2, r2, r3
 8000c4c:	ea80 0c01 	eor.w	ip, r0, r1
 8000c50:	0249      	lsls	r1, r1, #9
 8000c52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000c56:	d037      	beq.n	8000cc8 <__aeabi_fdiv+0x98>
 8000c58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000c60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000c64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	bf38      	it	cc
 8000c6c:	005b      	lslcc	r3, r3, #1
 8000c6e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000c72:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000c76:	428b      	cmp	r3, r1
 8000c78:	bf24      	itt	cs
 8000c7a:	1a5b      	subcs	r3, r3, r1
 8000c7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000c84:	bf24      	itt	cs
 8000c86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000c8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000c92:	bf24      	itt	cs
 8000c94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000c98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ca0:	bf24      	itt	cs
 8000ca2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ca6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000caa:	011b      	lsls	r3, r3, #4
 8000cac:	bf18      	it	ne
 8000cae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000cb2:	d1e0      	bne.n	8000c76 <__aeabi_fdiv+0x46>
 8000cb4:	2afd      	cmp	r2, #253	; 0xfd
 8000cb6:	f63f af50 	bhi.w	8000b5a <__aeabi_fmul+0x92>
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cc0:	bf08      	it	eq
 8000cc2:	f020 0001 	biceq.w	r0, r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ccc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cd0:	327f      	adds	r2, #127	; 0x7f
 8000cd2:	bfc2      	ittt	gt
 8000cd4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cd8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cdc:	4770      	bxgt	lr
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce2:	f04f 0300 	mov.w	r3, #0
 8000ce6:	3a01      	subs	r2, #1
 8000ce8:	e737      	b.n	8000b5a <__aeabi_fmul+0x92>
 8000cea:	f092 0f00 	teq	r2, #0
 8000cee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cf2:	bf02      	ittt	eq
 8000cf4:	0040      	lsleq	r0, r0, #1
 8000cf6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cfa:	3a01      	subeq	r2, #1
 8000cfc:	d0f9      	beq.n	8000cf2 <__aeabi_fdiv+0xc2>
 8000cfe:	ea40 000c 	orr.w	r0, r0, ip
 8000d02:	f093 0f00 	teq	r3, #0
 8000d06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d0a:	bf02      	ittt	eq
 8000d0c:	0049      	lsleq	r1, r1, #1
 8000d0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d12:	3b01      	subeq	r3, #1
 8000d14:	d0f9      	beq.n	8000d0a <__aeabi_fdiv+0xda>
 8000d16:	ea41 010c 	orr.w	r1, r1, ip
 8000d1a:	e795      	b.n	8000c48 <__aeabi_fdiv+0x18>
 8000d1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d20:	ea92 0f0c 	teq	r2, ip
 8000d24:	d108      	bne.n	8000d38 <__aeabi_fdiv+0x108>
 8000d26:	0242      	lsls	r2, r0, #9
 8000d28:	f47f af7d 	bne.w	8000c26 <__aeabi_fmul+0x15e>
 8000d2c:	ea93 0f0c 	teq	r3, ip
 8000d30:	f47f af70 	bne.w	8000c14 <__aeabi_fmul+0x14c>
 8000d34:	4608      	mov	r0, r1
 8000d36:	e776      	b.n	8000c26 <__aeabi_fmul+0x15e>
 8000d38:	ea93 0f0c 	teq	r3, ip
 8000d3c:	d104      	bne.n	8000d48 <__aeabi_fdiv+0x118>
 8000d3e:	024b      	lsls	r3, r1, #9
 8000d40:	f43f af4c 	beq.w	8000bdc <__aeabi_fmul+0x114>
 8000d44:	4608      	mov	r0, r1
 8000d46:	e76e      	b.n	8000c26 <__aeabi_fmul+0x15e>
 8000d48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d4c:	bf18      	it	ne
 8000d4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d52:	d1ca      	bne.n	8000cea <__aeabi_fdiv+0xba>
 8000d54:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000d58:	f47f af5c 	bne.w	8000c14 <__aeabi_fmul+0x14c>
 8000d5c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000d60:	f47f af3c 	bne.w	8000bdc <__aeabi_fmul+0x114>
 8000d64:	e75f      	b.n	8000c26 <__aeabi_fmul+0x15e>
 8000d66:	bf00      	nop

08000d68 <__aeabi_f2uiz>:
 8000d68:	0042      	lsls	r2, r0, #1
 8000d6a:	d20e      	bcs.n	8000d8a <__aeabi_f2uiz+0x22>
 8000d6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d70:	d30b      	bcc.n	8000d8a <__aeabi_f2uiz+0x22>
 8000d72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d7a:	d409      	bmi.n	8000d90 <__aeabi_f2uiz+0x28>
 8000d7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d84:	fa23 f002 	lsr.w	r0, r3, r2
 8000d88:	4770      	bx	lr
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	4770      	bx	lr
 8000d90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d94:	d101      	bne.n	8000d9a <__aeabi_f2uiz+0x32>
 8000d96:	0242      	lsls	r2, r0, #9
 8000d98:	d102      	bne.n	8000da0 <__aeabi_f2uiz+0x38>
 8000d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9e:	4770      	bx	lr
 8000da0:	f04f 0000 	mov.w	r0, #0
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <HAL_Init+0x20>)
{
 8000daa:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dac:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dae:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db0:	f043 0310 	orr.w	r3, r3, #16
 8000db4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db6:	f000 fa8f 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f006 f862 	bl	8006e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc0:	f005 fe5a 	bl	8006a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	bd08      	pop	{r3, pc}
 8000dc8:	40022000 	.word	0x40022000

08000dcc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000dcc:	4a03      	ldr	r2, [pc, #12]	; (8000ddc <HAL_IncTick+0x10>)
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <HAL_IncTick+0x14>)
 8000dd0:	6811      	ldr	r1, [r2, #0]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	440b      	add	r3, r1
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	2000189c 	.word	0x2000189c
 8000de0:	20000000 	.word	0x20000000

08000de4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000de4:	4b01      	ldr	r3, [pc, #4]	; (8000dec <HAL_GetTick+0x8>)
 8000de6:	6818      	ldr	r0, [r3, #0]
}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	2000189c 	.word	0x2000189c

08000df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df0:	b538      	push	{r3, r4, r5, lr}
 8000df2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000df4:	f7ff fff6 	bl	8000de4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000dfa:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000dfc:	d002      	beq.n	8000e04 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <HAL_Delay+0x20>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e04:	f7ff ffee 	bl	8000de4 <HAL_GetTick>
 8000e08:	1b40      	subs	r0, r0, r5
 8000e0a:	42a0      	cmp	r0, r4
 8000e0c:	d3fa      	bcc.n	8000e04 <HAL_Delay+0x14>
  {
  }
}
 8000e0e:	bd38      	pop	{r3, r4, r5, pc}
 8000e10:	20000000 	.word	0x20000000

08000e14 <HAL_ADC_Init>:
  uint32_t tmp_cr1 = 0U;
  uint32_t tmp_cr2 = 0U;
  uint32_t tmp_sqr1 = 0U;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e14:	2800      	cmp	r0, #0
 8000e16:	f000 808c 	beq.w	8000f32 <HAL_ADC_Init+0x11e>
{
 8000e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e1c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000e1e:	4604      	mov	r4, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d069      	beq.n	8000ef8 <HAL_ADC_Init+0xe4>
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e24:	6823      	ldr	r3, [r4, #0]
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	07d5      	lsls	r5, r2, #31
 8000e2a:	d442      	bmi.n	8000eb2 <HAL_ADC_Init+0x9e>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e2c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e2e:	06d2      	lsls	r2, r2, #27
 8000e30:	d45c      	bmi.n	8000eec <HAL_ADC_Init+0xd8>
    ADC_STATE_CLR_SET(hadc->State,
 8000e32:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e34:	4955      	ldr	r1, [pc, #340]	; (8000f8c <HAL_ADC_Init+0x178>)
    ADC_STATE_CLR_SET(hadc->State,
 8000e36:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8000e3a:	f022 0202 	bic.w	r2, r2, #2
 8000e3e:	f042 0202 	orr.w	r2, r2, #2
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e42:	428b      	cmp	r3, r1
    ADC_STATE_CLR_SET(hadc->State,
 8000e44:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e46:	69e0      	ldr	r0, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e48:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e4a:	d06c      	beq.n	8000f26 <HAL_ADC_Init+0x112>
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000e4c:	7b26      	ldrb	r6, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e4e:	68a1      	ldr	r1, [r4, #8]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e50:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e54:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e58:	ea42 0200 	orr.w	r2, r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e5c:	7d20      	ldrb	r0, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e5e:	d051      	beq.n	8000f04 <HAL_ADC_Init+0xf0>
 8000e60:	2901      	cmp	r1, #1
 8000e62:	bf0c      	ite	eq
 8000e64:	f44f 7780 	moveq.w	r7, #256	; 0x100
 8000e68:	2700      	movne	r7, #0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e6a:	2801      	cmp	r0, #1
 8000e6c:	d06d      	beq.n	8000f4a <HAL_ADC_Init+0x136>
      MODIFY_REG(hadc->Instance->CR1,
 8000e6e:	685d      	ldr	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000e70:	4847      	ldr	r0, [pc, #284]	; (8000f90 <HAL_ADC_Init+0x17c>)
      MODIFY_REG(hadc->Instance->CR1,
 8000e72:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000e76:	433d      	orrs	r5, r7
 8000e78:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000e7a:	689d      	ldr	r5, [r3, #8]
 8000e7c:	4028      	ands	r0, r5
 8000e7e:	4310      	orrs	r0, r2
 8000e80:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e82:	2901      	cmp	r1, #1
 8000e84:	d04b      	beq.n	8000f1e <HAL_ADC_Init+0x10a>
  uint32_t tmp_sqr1 = 0U;
 8000e86:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SQR1,
 8000e88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e8a:	4d42      	ldr	r5, [pc, #264]	; (8000f94 <HAL_ADC_Init+0x180>)
    MODIFY_REG(hadc->Instance->SQR1,
 8000e8c:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8000e90:	4301      	orrs	r1, r0
 8000e92:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	401d      	ands	r5, r3
 8000e98:	42aa      	cmp	r2, r5
 8000e9a:	d04c      	beq.n	8000f36 <HAL_ADC_Init+0x122>
      tmp_hal_status = HAL_ERROR;
 8000e9c:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000e9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ea0:	f023 0312 	bic.w	r3, r3, #18
 8000ea4:	f043 0310 	orr.w	r3, r3, #16
 8000ea8:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000eac:	4303      	orrs	r3, r0
 8000eae:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8000eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	f022 0201 	bic.w	r2, r2, #1
 8000eb8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000eba:	f7ff ff93 	bl	8000de4 <HAL_GetTick>
 8000ebe:	4605      	mov	r5, r0
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ec0:	6823      	ldr	r3, [r4, #0]
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	07d0      	lsls	r0, r2, #31
 8000ec6:	d5b1      	bpl.n	8000e2c <HAL_ADC_Init+0x18>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ec8:	f7ff ff8c 	bl	8000de4 <HAL_GetTick>
 8000ecc:	1b43      	subs	r3, r0, r5
 8000ece:	2b02      	cmp	r3, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000ed0:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ed2:	d9f6      	bls.n	8000ec2 <HAL_ADC_Init+0xae>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000ed4:	689a      	ldr	r2, [r3, #8]
 8000ed6:	07d1      	lsls	r1, r2, #31
 8000ed8:	d5f3      	bpl.n	8000ec2 <HAL_ADC_Init+0xae>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000edc:	f043 0310 	orr.w	r3, r3, #16
 8000ee0:	62a3      	str	r3, [r4, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ee2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000eea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8000eee:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ef0:	f043 0310 	orr.w	r3, r3, #16
 8000ef4:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8000ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8000ef8:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000efa:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000efe:	f005 fde3 	bl	8006ac8 <HAL_ADC_MspInit>
 8000f02:	e78f      	b.n	8000e24 <HAL_ADC_Init+0x10>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f04:	2801      	cmp	r0, #1
 8000f06:	d01f      	beq.n	8000f48 <HAL_ADC_Init+0x134>
      MODIFY_REG(hadc->Instance->CR1,
 8000f08:	6858      	ldr	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000f0a:	4921      	ldr	r1, [pc, #132]	; (8000f90 <HAL_ADC_Init+0x17c>)
      MODIFY_REG(hadc->Instance->CR1,
 8000f0c:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 8000f10:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8000f14:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000f16:	6898      	ldr	r0, [r3, #8]
 8000f18:	4001      	ands	r1, r0
 8000f1a:	4311      	orrs	r1, r2
 8000f1c:	6099      	str	r1, [r3, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f1e:	6921      	ldr	r1, [r4, #16]
 8000f20:	3901      	subs	r1, #1
 8000f22:	0508      	lsls	r0, r1, #20
 8000f24:	e7b0      	b.n	8000e88 <HAL_ADC_Init+0x74>
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f26:	f5b0 2f40 	cmp.w	r0, #786432	; 0xc0000
 8000f2a:	bf08      	it	eq
 8000f2c:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
 8000f30:	e78c      	b.n	8000e4c <HAL_ADC_Init+0x38>
    return HAL_ERROR;
 8000f32:	2001      	movs	r0, #1
}
 8000f34:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 8000f36:	2000      	movs	r0, #0
 8000f38:	62e0      	str	r0, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000f3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f3c:	f023 0303 	bic.w	r3, r3, #3
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8000f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f48:	460f      	mov	r7, r1
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f4a:	b1be      	cbz	r6, 8000f7c <HAL_ADC_Init+0x168>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f4c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000f4e:	f040 0020 	orr.w	r0, r0, #32
 8000f52:	62a0      	str	r0, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f54:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000f56:	f040 0001 	orr.w	r0, r0, #1
 8000f5a:	62e0      	str	r0, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8000f5c:	685d      	ldr	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000f5e:	480c      	ldr	r0, [pc, #48]	; (8000f90 <HAL_ADC_Init+0x17c>)
      MODIFY_REG(hadc->Instance->CR1,
 8000f60:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000f64:	433d      	orrs	r5, r7
 8000f66:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000f68:	689d      	ldr	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f6a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR2,
 8000f6e:	ea00 0005 	and.w	r0, r0, r5
 8000f72:	ea40 0002 	orr.w	r0, r0, r2
 8000f76:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f78:	d183      	bne.n	8000e82 <HAL_ADC_Init+0x6e>
 8000f7a:	e7d0      	b.n	8000f1e <HAL_ADC_Init+0x10a>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f7c:	69a0      	ldr	r0, [r4, #24]
 8000f7e:	1e45      	subs	r5, r0, #1
 8000f80:	ea47 3545 	orr.w	r5, r7, r5, lsl #13
 8000f84:	f445 6700 	orr.w	r7, r5, #2048	; 0x800
 8000f88:	e7e8      	b.n	8000f5c <HAL_ADC_Init+0x148>
 8000f8a:	bf00      	nop
 8000f8c:	40013c00 	.word	0x40013c00
 8000f90:	ffe1f7fd 	.word	0xffe1f7fd
 8000f94:	ff1f0efe 	.word	0xff1f0efe

08000f98 <HAL_ADC_ConvCpltCallback>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000f9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fa0:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000fa4:	d10f      	bne.n	8000fc6 <ADC_DMAConvCplt+0x2a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fa8:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 8000fae:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fb2:	688a      	ldr	r2, [r1, #8]
 8000fb4:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000fb8:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000fbc:	d006      	beq.n	8000fcc <ADC_DMAConvCplt+0x30>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ffea 	bl	8000f98 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000fc4:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4718      	bx	r3
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fcc:	7b1a      	ldrb	r2, [r3, #12]
 8000fce:	2a00      	cmp	r2, #0
 8000fd0:	d1f5      	bne.n	8000fbe <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000fd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fdc:	04d2      	lsls	r2, r2, #19
 8000fde:	d4ee      	bmi.n	8000fbe <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fe2:	f042 0201 	orr.w	r2, r2, #1
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28
 8000fe8:	e7e9      	b.n	8000fbe <ADC_DMAConvCplt+0x22>
 8000fea:	bf00      	nop

08000fec <HAL_ADC_ConvHalfCpltCallback>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000ff0:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000ff2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000ff4:	f7ff fffa 	bl	8000fec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000ff8:	bd08      	pop	{r3, pc}
 8000ffa:	bf00      	nop

08000ffc <HAL_ADC_ErrorCallback>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001000:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001002:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001004:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800100a:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800100c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800100e:	f043 0304 	orr.w	r3, r3, #4
 8001012:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001014:	f7ff fff2 	bl	8000ffc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001018:	bd08      	pop	{r3, pc}
 800101a:	bf00      	nop

0800101c <HAL_ADC_ConfigChannel>:
{ 
 800101c:	4602      	mov	r2, r0
  __IO uint32_t wait_loop_index = 0U;
 800101e:	2000      	movs	r0, #0
{ 
 8001020:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hadc);
 8001022:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
{ 
 8001026:	b083      	sub	sp, #12
  __HAL_LOCK(hadc);
 8001028:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 800102a:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800102c:	d05b      	beq.n	80010e6 <HAL_ADC_ConfigChannel+0xca>
 800102e:	2301      	movs	r3, #1
 8001030:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8001034:	684b      	ldr	r3, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001036:	261f      	movs	r6, #31
  if (sConfig->Rank < 7U)
 8001038:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800103a:	6814      	ldr	r4, [r2, #0]
  if (sConfig->Rank < 7U)
 800103c:	d92d      	bls.n	800109a <HAL_ADC_ConfigChannel+0x7e>
  else if (sConfig->Rank < 13U)
 800103e:	2b0c      	cmp	r3, #12
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001040:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 8001044:	d844      	bhi.n	80010d0 <HAL_ADC_ConfigChannel+0xb4>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001046:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001048:	6808      	ldr	r0, [r1, #0]
 800104a:	3b23      	subs	r3, #35	; 0x23
 800104c:	409e      	lsls	r6, r3
 800104e:	ea25 0506 	bic.w	r5, r5, r6
 8001052:	fa00 f303 	lsl.w	r3, r0, r3
 8001056:	432b      	orrs	r3, r5
 8001058:	6323      	str	r3, [r4, #48]	; 0x30
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800105a:	2809      	cmp	r0, #9
 800105c:	d92b      	bls.n	80010b6 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800105e:	2607      	movs	r6, #7
 8001060:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8001064:	688d      	ldr	r5, [r1, #8]
 8001066:	3b1e      	subs	r3, #30
 8001068:	68e1      	ldr	r1, [r4, #12]
 800106a:	409e      	lsls	r6, r3
 800106c:	409d      	lsls	r5, r3
 800106e:	ea21 0306 	bic.w	r3, r1, r6
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001072:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001076:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001078:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800107a:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800107c:	d826      	bhi.n	80010cc <HAL_ADC_ConfigChannel+0xb0>
    if (hadc->Instance == ADC1)
 800107e:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <HAL_ADC_ConfigChannel+0x10c>)
 8001080:	429c      	cmp	r4, r3
 8001082:	d034      	beq.n	80010ee <HAL_ADC_ConfigChannel+0xd2>
      tmp_hal_status = HAL_ERROR;
 8001084:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001086:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001088:	f043 0320 	orr.w	r3, r3, #32
 800108c:	6293      	str	r3, [r2, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 800108e:	2300      	movs	r3, #0
 8001090:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 8001094:	b003      	add	sp, #12
 8001096:	bc70      	pop	{r4, r5, r6}
 8001098:	4770      	bx	lr
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800109a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800109e:	6808      	ldr	r0, [r1, #0]
 80010a0:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80010a2:	3b05      	subs	r3, #5
 80010a4:	409e      	lsls	r6, r3
 80010a6:	ea25 0506 	bic.w	r5, r5, r6
 80010aa:	fa00 f303 	lsl.w	r3, r0, r3
 80010ae:	432b      	orrs	r3, r5
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80010b0:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010b2:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80010b4:	d8d3      	bhi.n	800105e <HAL_ADC_ConfigChannel+0x42>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010b6:	2507      	movs	r5, #7
 80010b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80010bc:	6889      	ldr	r1, [r1, #8]
 80010be:	6923      	ldr	r3, [r4, #16]
 80010c0:	4085      	lsls	r5, r0
 80010c2:	4081      	lsls	r1, r0
 80010c4:	ea23 0005 	bic.w	r0, r3, r5
 80010c8:	4308      	orrs	r0, r1
 80010ca:	6120      	str	r0, [r4, #16]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010cc:	2000      	movs	r0, #0
 80010ce:	e7de      	b.n	800108e <HAL_ADC_ConfigChannel+0x72>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010d0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80010d2:	6808      	ldr	r0, [r1, #0]
 80010d4:	3b41      	subs	r3, #65	; 0x41
 80010d6:	409e      	lsls	r6, r3
 80010d8:	ea25 0506 	bic.w	r5, r5, r6
 80010dc:	fa00 f303 	lsl.w	r3, r0, r3
 80010e0:	432b      	orrs	r3, r5
 80010e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80010e4:	e7b9      	b.n	800105a <HAL_ADC_ConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 80010e6:	2002      	movs	r0, #2
}
 80010e8:	b003      	add	sp, #12
 80010ea:	bc70      	pop	{r4, r5, r6}
 80010ec:	4770      	bx	lr
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80010ee:	68a3      	ldr	r3, [r4, #8]
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	d4eb      	bmi.n	80010cc <HAL_ADC_ConfigChannel+0xb0>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80010f4:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010f6:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80010f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010fc:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010fe:	d1e5      	bne.n	80010cc <HAL_ADC_ConfigChannel+0xb0>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <HAL_ADC_ConfigChannel+0x110>)
 8001102:	490b      	ldr	r1, [pc, #44]	; (8001130 <HAL_ADC_ConfigChannel+0x114>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	fba1 1303 	umull	r1, r3, r1, r3
 800110a:	0c9b      	lsrs	r3, r3, #18
 800110c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001114:	9b01      	ldr	r3, [sp, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d0d8      	beq.n	80010cc <HAL_ADC_ConfigChannel+0xb0>
            wait_loop_index--;
 800111a:	9b01      	ldr	r3, [sp, #4]
 800111c:	3b01      	subs	r3, #1
 800111e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001120:	9b01      	ldr	r3, [sp, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f9      	bne.n	800111a <HAL_ADC_ConfigChannel+0xfe>
 8001126:	e7d1      	b.n	80010cc <HAL_ADC_ConfigChannel+0xb0>
 8001128:	40012400 	.word	0x40012400
 800112c:	200002d4 	.word	0x200002d4
 8001130:	431bde83 	.word	0x431bde83

08001134 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8001134:	2300      	movs	r3, #0
{
 8001136:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001138:	6802      	ldr	r2, [r0, #0]
{
 800113a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 800113c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800113e:	6893      	ldr	r3, [r2, #8]
 8001140:	07d9      	lsls	r1, r3, #31
 8001142:	d427      	bmi.n	8001194 <ADC_Enable+0x60>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <ADC_Enable+0x80>)
 8001146:	4604      	mov	r4, r0
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	481b      	ldr	r0, [pc, #108]	; (80011b8 <ADC_Enable+0x84>)
    __HAL_ADC_ENABLE(hadc);
 800114c:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800114e:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 8001152:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001156:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8001158:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800115a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800115c:	9b01      	ldr	r3, [sp, #4]
 800115e:	b12b      	cbz	r3, 800116c <ADC_Enable+0x38>
      wait_loop_index--;
 8001160:	9b01      	ldr	r3, [sp, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001166:	9b01      	ldr	r3, [sp, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1f9      	bne.n	8001160 <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 800116c:	f7ff fe3a 	bl	8000de4 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001170:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001172:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	07da      	lsls	r2, r3, #31
 8001178:	d40c      	bmi.n	8001194 <ADC_Enable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800117a:	f7ff fe33 	bl	8000de4 <HAL_GetTick>
 800117e:	1b43      	subs	r3, r0, r5
 8001180:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001182:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001184:	d903      	bls.n	800118e <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	f012 0201 	ands.w	r2, r2, #1
 800118c:	d005      	beq.n	800119a <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	07db      	lsls	r3, r3, #31
 8001192:	d5f2      	bpl.n	800117a <ADC_Enable+0x46>
  return HAL_OK;
 8001194:	2000      	movs	r0, #0
}
 8001196:	b003      	add	sp, #12
 8001198:	bd30      	pop	{r4, r5, pc}
          __HAL_UNLOCK(hadc);
 800119a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800119c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 800119e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011a2:	f043 0310 	orr.w	r3, r3, #16
 80011a6:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80011aa:	4303      	orrs	r3, r0
 80011ac:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80011ae:	b003      	add	sp, #12
 80011b0:	bd30      	pop	{r4, r5, pc}
 80011b2:	bf00      	nop
 80011b4:	200002d4 	.word	0x200002d4
 80011b8:	431bde83 	.word	0x431bde83

080011bc <HAL_ADC_Start_DMA>:
{
 80011bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011be:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80011c0:	4d40      	ldr	r5, [pc, #256]	; (80012c4 <HAL_ADC_Start_DMA+0x108>)
 80011c2:	6800      	ldr	r0, [r0, #0]
{
 80011c4:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80011c6:	42a8      	cmp	r0, r5
{
 80011c8:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80011ca:	d05c      	beq.n	8001286 <HAL_ADC_Start_DMA+0xca>
 80011cc:	4b3e      	ldr	r3, [pc, #248]	; (80012c8 <HAL_ADC_Start_DMA+0x10c>)
 80011ce:	4298      	cmp	r0, r3
 80011d0:	d059      	beq.n	8001286 <HAL_ADC_Start_DMA+0xca>
    __HAL_LOCK(hadc);
 80011d2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d062      	beq.n	80012a0 <HAL_ADC_Start_DMA+0xe4>
 80011da:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80011dc:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80011de:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80011e2:	f7ff ffa7 	bl	8001134 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80011e6:	4605      	mov	r5, r0
 80011e8:	2800      	cmp	r0, #0
 80011ea:	d154      	bne.n	8001296 <HAL_ADC_Start_DMA+0xda>
      ADC_STATE_CLR_SET(hadc->State,
 80011ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011ee:	6821      	ldr	r1, [r4, #0]
 80011f0:	4b35      	ldr	r3, [pc, #212]	; (80012c8 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 80011f2:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
 80011f6:	f020 0001 	bic.w	r0, r0, #1
 80011fa:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011fe:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8001200:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001202:	d050      	beq.n	80012a6 <HAL_ADC_Start_DMA+0xea>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001204:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001206:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800120a:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800120c:	684b      	ldr	r3, [r1, #4]
 800120e:	055a      	lsls	r2, r3, #21
 8001210:	d505      	bpl.n	800121e <HAL_ADC_Start_DMA+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001212:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001214:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001218:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800121c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800121e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001220:	f06f 0202 	mvn.w	r2, #2
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001224:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001228:	bf18      	it	ne
 800122a:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800122c:	6a20      	ldr	r0, [r4, #32]
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800122e:	bf18      	it	ne
 8001230:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8001234:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8001236:	2300      	movs	r3, #0
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001238:	f8df c094 	ldr.w	ip, [pc, #148]	; 80012d0 <HAL_ADC_Start_DMA+0x114>
      __HAL_UNLOCK(hadc);
 800123c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001240:	4b22      	ldr	r3, [pc, #136]	; (80012cc <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001242:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001244:	e9c0 c30a 	strd	ip, r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001248:	f8df c088 	ldr.w	ip, [pc, #136]	; 80012d4 <HAL_ADC_Start_DMA+0x118>
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800124c:	4633      	mov	r3, r6
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800124e:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001252:	f841 2c4c 	str.w	r2, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001256:	f851 6c44 	ldr.w	r6, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800125a:	463a      	mov	r2, r7
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800125c:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 8001260:	f841 6c44 	str.w	r6, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001264:	f000 f8d6 	bl	8001414 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001268:	6823      	ldr	r3, [r4, #0]
}
 800126a:	4628      	mov	r0, r5
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001272:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	bf0c      	ite	eq
 800127a:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800127e:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8001282:	609a      	str	r2, [r3, #8]
}
 8001284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <HAL_ADC_Start_DMA+0x108>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800128e:	d0a0      	beq.n	80011d2 <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 8001290:	2501      	movs	r5, #1
}
 8001292:	4628      	mov	r0, r5
 8001294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_UNLOCK(hadc);
 8001296:	2300      	movs	r3, #0
 8001298:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800129c:	4628      	mov	r0, r5
 800129e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 80012a0:	2502      	movs	r5, #2
}
 80012a2:	4628      	mov	r0, r5
 80012a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012a6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80012b0:	d0a8      	beq.n	8001204 <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80012b4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80012b8:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	055b      	lsls	r3, r3, #21
 80012be:	d5ae      	bpl.n	800121e <HAL_ADC_Start_DMA+0x62>
 80012c0:	e7a7      	b.n	8001212 <HAL_ADC_Start_DMA+0x56>
 80012c2:	bf00      	nop
 80012c4:	40012400 	.word	0x40012400
 80012c8:	40012800 	.word	0x40012800
 80012cc:	08000ff1 	.word	0x08000ff1
 80012d0:	08000f9d 	.word	0x08000f9d
 80012d4:	08001001 	.word	0x08001001

080012d8 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d8:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012dc:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012de:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	68d0      	ldr	r0, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	4008      	ands	r0, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e8:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80012ea:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80012f2:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b19      	ldr	r3, [pc, #100]	; (8001364 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fe:	b430      	push	{r4, r5}
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001306:	f1c3 0507 	rsb	r5, r3, #7
 800130a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001310:	bf28      	it	cs
 8001312:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001314:	2c06      	cmp	r4, #6
 8001316:	d919      	bls.n	800134c <HAL_NVIC_SetPriority+0x50>
 8001318:	f04f 34ff 	mov.w	r4, #4294967295
 800131c:	3b03      	subs	r3, #3
 800131e:	409c      	lsls	r4, r3
 8001320:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	f04f 34ff 	mov.w	r4, #4294967295
 8001328:	40ac      	lsls	r4, r5
 800132a:	ea21 0104 	bic.w	r1, r1, r4
 800132e:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001330:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001332:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001336:	db0c      	blt.n	8001352 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	0109      	lsls	r1, r1, #4
 800133a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800133e:	b2c9      	uxtb	r1, r1
 8001340:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001344:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001348:	bc30      	pop	{r4, r5}
 800134a:	4770      	bx	lr
 800134c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134e:	4613      	mov	r3, r2
 8001350:	e7e8      	b.n	8001324 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001352:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_NVIC_SetPriority+0x6c>)
 8001354:	f000 000f 	and.w	r0, r0, #15
 8001358:	0109      	lsls	r1, r1, #4
 800135a:	b2c9      	uxtb	r1, r1
 800135c:	4403      	add	r3, r0
 800135e:	7619      	strb	r1, [r3, #24]
 8001360:	bc30      	pop	{r4, r5}
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00
 8001368:	e000ecfc 	.word	0xe000ecfc

0800136c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800136c:	2800      	cmp	r0, #0
 800136e:	db07      	blt.n	8001380 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001370:	2301      	movs	r3, #1
 8001372:	f000 011f 	and.w	r1, r0, #31
 8001376:	4a03      	ldr	r2, [pc, #12]	; (8001384 <HAL_NVIC_EnableIRQ+0x18>)
 8001378:	408b      	lsls	r3, r1
 800137a:	0940      	lsrs	r0, r0, #5
 800137c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000e100 	.word	0xe000e100

08001388 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001388:	2800      	cmp	r0, #0
 800138a:	d034      	beq.n	80013f6 <HAL_DMA_Init+0x6e>
 800138c:	4603      	mov	r3, r0
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800138e:	4a1b      	ldr	r2, [pc, #108]	; (80013fc <HAL_DMA_Init+0x74>)
 8001390:	6800      	ldr	r0, [r0, #0]
{
 8001392:	b4f0      	push	{r4, r5, r6, r7}
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001394:	4290      	cmp	r0, r2
 8001396:	d925      	bls.n	80013e4 <HAL_DMA_Init+0x5c>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001398:	4919      	ldr	r1, [pc, #100]	; (8001400 <HAL_DMA_Init+0x78>)
 800139a:	4a1a      	ldr	r2, [pc, #104]	; (8001404 <HAL_DMA_Init+0x7c>)
 800139c:	4401      	add	r1, r0
 800139e:	fba2 2101 	umull	r2, r1, r2, r1
    hdma->DmaBaseAddress = DMA2;
 80013a2:	4f19      	ldr	r7, [pc, #100]	; (8001408 <HAL_DMA_Init+0x80>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80013a4:	0909      	lsrs	r1, r1, #4
 80013a6:	0089      	lsls	r1, r1, #2
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013a8:	f44f 7580 	mov.w	r5, #256	; 0x100
  tmp |=  hdma->Init.Direction        |
 80013ac:	e9d3 2601 	ldrd	r2, r6, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013b0:	2400      	movs	r4, #0
  tmp |=  hdma->Init.Direction        |
 80013b2:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b4:	68de      	ldr	r6, [r3, #12]
 80013b6:	6419      	str	r1, [r3, #64]	; 0x40
 80013b8:	4332      	orrs	r2, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ba:	e9d3 6104 	ldrd	r6, r1, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013be:	4332      	orrs	r2, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c0:	699e      	ldr	r6, [r3, #24]
 80013c2:	430a      	orrs	r2, r1
  tmp = hdma->Instance->CCR;
 80013c4:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c6:	4332      	orrs	r2, r6
          hdma->Init.Mode                | hdma->Init.Priority;
 80013c8:	69de      	ldr	r6, [r3, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013ca:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 80013ce:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013d0:	f021 0130 	bic.w	r1, r1, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80013d4:	430a      	orrs	r2, r1
  hdma->Instance->CCR = tmp;
 80013d6:	63df      	str	r7, [r3, #60]	; 0x3c
 80013d8:	6002      	str	r2, [r0, #0]
  hdma->Lock = HAL_UNLOCKED;
 80013da:	841d      	strh	r5, [r3, #32]

  return HAL_OK;
 80013dc:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013de:	639c      	str	r4, [r3, #56]	; 0x38
}
 80013e0:	bcf0      	pop	{r4, r5, r6, r7}
 80013e2:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013e4:	4909      	ldr	r1, [pc, #36]	; (800140c <HAL_DMA_Init+0x84>)
 80013e6:	4a07      	ldr	r2, [pc, #28]	; (8001404 <HAL_DMA_Init+0x7c>)
 80013e8:	4401      	add	r1, r0
 80013ea:	fba2 2101 	umull	r2, r1, r2, r1
 80013ee:	0909      	lsrs	r1, r1, #4
    hdma->DmaBaseAddress = DMA1;
 80013f0:	4f07      	ldr	r7, [pc, #28]	; (8001410 <HAL_DMA_Init+0x88>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013f2:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 80013f4:	e7d8      	b.n	80013a8 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 80013f6:	2001      	movs	r0, #1
}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40020407 	.word	0x40020407
 8001400:	bffdfbf8 	.word	0xbffdfbf8
 8001404:	cccccccd 	.word	0xcccccccd
 8001408:	40020400 	.word	0x40020400
 800140c:	bffdfff8 	.word	0xbffdfff8
 8001410:	40020000 	.word	0x40020000

08001414 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001414:	b4f0      	push	{r4, r5, r6, r7}
 8001416:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001418:	f890 0020 	ldrb.w	r0, [r0, #32]
 800141c:	2801      	cmp	r0, #1
 800141e:	d038      	beq.n	8001492 <HAL_DMA_Start_IT+0x7e>
 8001420:	2501      	movs	r5, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001422:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001426:	f884 5020 	strb.w	r5, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800142a:	42a8      	cmp	r0, r5
 800142c:	d005      	beq.n	800143a <HAL_DMA_Start_IT+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800142e:	2300      	movs	r3, #0
 8001430:	f884 3020 	strb.w	r3, [r4, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001434:	2002      	movs	r0, #2
  }    
  return status;
}
 8001436:	bcf0      	pop	{r4, r5, r6, r7}
 8001438:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 800143a:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800143c:	2600      	movs	r6, #0
    __HAL_DMA_DISABLE(hdma);
 800143e:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8001440:	f884 7021 	strb.w	r7, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001444:	63a6      	str	r6, [r4, #56]	; 0x38
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001446:	6c27      	ldr	r7, [r4, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8001448:	682e      	ldr	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800144a:	40b8      	lsls	r0, r7
    __HAL_DMA_DISABLE(hdma);
 800144c:	f026 0601 	bic.w	r6, r6, #1
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001450:	6be7      	ldr	r7, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001452:	602e      	str	r6, [r5, #0]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001454:	6866      	ldr	r6, [r4, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001456:	6078      	str	r0, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8001458:	606b      	str	r3, [r5, #4]
    if(NULL != hdma->XferHalfCpltCallback)
 800145a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800145c:	2e10      	cmp	r6, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800145e:	bf0b      	itete	eq
 8001460:	60aa      	streq	r2, [r5, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001462:	60a9      	strne	r1, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001464:	60e9      	streq	r1, [r5, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001466:	60ea      	strne	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001468:	b153      	cbz	r3, 8001480 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800146a:	682b      	ldr	r3, [r5, #0]
 800146c:	f043 030e 	orr.w	r3, r3, #14
 8001470:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8001472:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001474:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	602b      	str	r3, [r5, #0]
}
 800147c:	bcf0      	pop	{r4, r5, r6, r7}
 800147e:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001480:	682b      	ldr	r3, [r5, #0]
 8001482:	f023 0304 	bic.w	r3, r3, #4
 8001486:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001488:	682b      	ldr	r3, [r5, #0]
 800148a:	f043 030a 	orr.w	r3, r3, #10
 800148e:	602b      	str	r3, [r5, #0]
 8001490:	e7ef      	b.n	8001472 <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 8001492:	2002      	movs	r0, #2
}
 8001494:	bcf0      	pop	{r4, r5, r6, r7}
 8001496:	4770      	bx	lr

08001498 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001498:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 800149c:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800149e:	2a02      	cmp	r2, #2
 80014a0:	d006      	beq.n	80014b0 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a2:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 80014a4:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a6:	6381      	str	r1, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80014a8:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 80014ac:	2001      	movs	r0, #1
}
 80014ae:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014b0:	2101      	movs	r1, #1
{
 80014b2:	b470      	push	{r4, r5, r6}
  __HAL_UNLOCK(hdma);      
 80014b4:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014b8:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014ba:	6c1e      	ldr	r6, [r3, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014bc:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014be:	40b1      	lsls	r1, r6
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014c0:	f024 040e 	bic.w	r4, r4, #14
 80014c4:	6014      	str	r4, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80014c6:	6814      	ldr	r4, [r2, #0]
  return status; 
 80014c8:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80014ca:	f024 0401 	bic.w	r4, r4, #1
 80014ce:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014d2:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hdma);      
 80014d4:	841d      	strh	r5, [r3, #32]
}
 80014d6:	bc70      	pop	{r4, r5, r6}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop

080014dc <HAL_DMA_Abort_IT>:
{  
 80014dc:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014de:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 80014e2:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014e4:	2a02      	cmp	r2, #2
 80014e6:	d003      	beq.n	80014f0 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e8:	2204      	movs	r2, #4
    status = HAL_ERROR;
 80014ea:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ec:	639a      	str	r2, [r3, #56]	; 0x38
}
 80014ee:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014f0:	6802      	ldr	r2, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014f2:	4845      	ldr	r0, [pc, #276]	; (8001608 <HAL_DMA_Abort_IT+0x12c>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014f4:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014f6:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014f8:	f021 010e 	bic.w	r1, r1, #14
 80014fc:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80014fe:	6811      	ldr	r1, [r2, #0]
 8001500:	f021 0101 	bic.w	r1, r1, #1
 8001504:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001506:	4941      	ldr	r1, [pc, #260]	; (800160c <HAL_DMA_Abort_IT+0x130>)
 8001508:	d924      	bls.n	8001554 <HAL_DMA_Abort_IT+0x78>
 800150a:	428a      	cmp	r2, r1
 800150c:	d055      	beq.n	80015ba <HAL_DMA_Abort_IT+0xde>
 800150e:	3114      	adds	r1, #20
 8001510:	428a      	cmp	r2, r1
 8001512:	d05e      	beq.n	80015d2 <HAL_DMA_Abort_IT+0xf6>
 8001514:	3114      	adds	r1, #20
 8001516:	428a      	cmp	r2, r1
 8001518:	d05d      	beq.n	80015d6 <HAL_DMA_Abort_IT+0xfa>
 800151a:	3114      	adds	r1, #20
 800151c:	428a      	cmp	r2, r1
 800151e:	d053      	beq.n	80015c8 <HAL_DMA_Abort_IT+0xec>
 8001520:	3114      	adds	r1, #20
 8001522:	428a      	cmp	r2, r1
 8001524:	d060      	beq.n	80015e8 <HAL_DMA_Abort_IT+0x10c>
 8001526:	3114      	adds	r1, #20
 8001528:	428a      	cmp	r2, r1
 800152a:	d063      	beq.n	80015f4 <HAL_DMA_Abort_IT+0x118>
 800152c:	4282      	cmp	r2, r0
 800152e:	d067      	beq.n	8001600 <HAL_DMA_Abort_IT+0x124>
 8001530:	f501 7167 	add.w	r1, r1, #924	; 0x39c
 8001534:	428a      	cmp	r2, r1
 8001536:	d040      	beq.n	80015ba <HAL_DMA_Abort_IT+0xde>
 8001538:	3114      	adds	r1, #20
 800153a:	428a      	cmp	r2, r1
 800153c:	d049      	beq.n	80015d2 <HAL_DMA_Abort_IT+0xf6>
 800153e:	3114      	adds	r1, #20
 8001540:	428a      	cmp	r2, r1
 8001542:	d048      	beq.n	80015d6 <HAL_DMA_Abort_IT+0xfa>
 8001544:	3114      	adds	r1, #20
 8001546:	428a      	cmp	r2, r1
 8001548:	bf14      	ite	ne
 800154a:	f44f 3280 	movne.w	r2, #65536	; 0x10000
 800154e:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 8001552:	e033      	b.n	80015bc <HAL_DMA_Abort_IT+0xe0>
 8001554:	428a      	cmp	r2, r1
 8001556:	d022      	beq.n	800159e <HAL_DMA_Abort_IT+0xc2>
 8001558:	3114      	adds	r1, #20
 800155a:	428a      	cmp	r2, r1
 800155c:	d037      	beq.n	80015ce <HAL_DMA_Abort_IT+0xf2>
 800155e:	3114      	adds	r1, #20
 8001560:	428a      	cmp	r2, r1
 8001562:	d03b      	beq.n	80015dc <HAL_DMA_Abort_IT+0x100>
 8001564:	3114      	adds	r1, #20
 8001566:	428a      	cmp	r2, r1
 8001568:	d02b      	beq.n	80015c2 <HAL_DMA_Abort_IT+0xe6>
 800156a:	3114      	adds	r1, #20
 800156c:	428a      	cmp	r2, r1
 800156e:	d038      	beq.n	80015e2 <HAL_DMA_Abort_IT+0x106>
 8001570:	3114      	adds	r1, #20
 8001572:	428a      	cmp	r2, r1
 8001574:	d03b      	beq.n	80015ee <HAL_DMA_Abort_IT+0x112>
 8001576:	4282      	cmp	r2, r0
 8001578:	d03f      	beq.n	80015fa <HAL_DMA_Abort_IT+0x11e>
 800157a:	f501 7167 	add.w	r1, r1, #924	; 0x39c
 800157e:	428a      	cmp	r2, r1
 8001580:	d00d      	beq.n	800159e <HAL_DMA_Abort_IT+0xc2>
 8001582:	3114      	adds	r1, #20
 8001584:	428a      	cmp	r2, r1
 8001586:	d022      	beq.n	80015ce <HAL_DMA_Abort_IT+0xf2>
 8001588:	3114      	adds	r1, #20
 800158a:	428a      	cmp	r2, r1
 800158c:	d026      	beq.n	80015dc <HAL_DMA_Abort_IT+0x100>
 800158e:	3114      	adds	r1, #20
 8001590:	428a      	cmp	r2, r1
 8001592:	bf14      	ite	ne
 8001594:	f44f 3280 	movne.w	r2, #65536	; 0x10000
 8001598:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 800159c:	e000      	b.n	80015a0 <HAL_DMA_Abort_IT+0xc4>
 800159e:	2201      	movs	r2, #1
 80015a0:	491b      	ldr	r1, [pc, #108]	; (8001610 <HAL_DMA_Abort_IT+0x134>)
 80015a2:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 80015a4:	f44f 7180 	mov.w	r1, #256	; 0x100
    if(hdma->XferAbortCallback != NULL)
 80015a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80015aa:	8419      	strh	r1, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 80015ac:	b11a      	cbz	r2, 80015b6 <HAL_DMA_Abort_IT+0xda>
      hdma->XferAbortCallback(hdma);
 80015ae:	4618      	mov	r0, r3
 80015b0:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80015b2:	2000      	movs	r0, #0
}
 80015b4:	bd08      	pop	{r3, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80015b6:	4610      	mov	r0, r2
}
 80015b8:	bd08      	pop	{r3, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015ba:	2201      	movs	r2, #1
 80015bc:	4915      	ldr	r1, [pc, #84]	; (8001614 <HAL_DMA_Abort_IT+0x138>)
 80015be:	604a      	str	r2, [r1, #4]
 80015c0:	e7f0      	b.n	80015a4 <HAL_DMA_Abort_IT+0xc8>
 80015c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015c6:	e7eb      	b.n	80015a0 <HAL_DMA_Abort_IT+0xc4>
 80015c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015cc:	e7f6      	b.n	80015bc <HAL_DMA_Abort_IT+0xe0>
 80015ce:	2210      	movs	r2, #16
 80015d0:	e7e6      	b.n	80015a0 <HAL_DMA_Abort_IT+0xc4>
 80015d2:	2210      	movs	r2, #16
 80015d4:	e7f2      	b.n	80015bc <HAL_DMA_Abort_IT+0xe0>
 80015d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015da:	e7ef      	b.n	80015bc <HAL_DMA_Abort_IT+0xe0>
 80015dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015e0:	e7de      	b.n	80015a0 <HAL_DMA_Abort_IT+0xc4>
 80015e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015e6:	e7db      	b.n	80015a0 <HAL_DMA_Abort_IT+0xc4>
 80015e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015ec:	e7e6      	b.n	80015bc <HAL_DMA_Abort_IT+0xe0>
 80015ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015f2:	e7d5      	b.n	80015a0 <HAL_DMA_Abort_IT+0xc4>
 80015f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015f8:	e7e0      	b.n	80015bc <HAL_DMA_Abort_IT+0xe0>
 80015fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015fe:	e7cf      	b.n	80015a0 <HAL_DMA_Abort_IT+0xc4>
 8001600:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001604:	e7da      	b.n	80015bc <HAL_DMA_Abort_IT+0xe0>
 8001606:	bf00      	nop
 8001608:	40020080 	.word	0x40020080
 800160c:	40020008 	.word	0x40020008
 8001610:	40020000 	.word	0x40020000
 8001614:	40020400 	.word	0x40020400

08001618 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001618:	2204      	movs	r2, #4
{
 800161a:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800161c:	e9d0 610f 	ldrd	r6, r1, [r0, #60]	; 0x3c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001620:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001622:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001624:	408a      	lsls	r2, r1
 8001626:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001628:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800162a:	d042      	beq.n	80016b2 <HAL_DMA_IRQHandler+0x9a>
 800162c:	076a      	lsls	r2, r5, #29
 800162e:	d540      	bpl.n	80016b2 <HAL_DMA_IRQHandler+0x9a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	0691      	lsls	r1, r2, #26
 8001634:	d403      	bmi.n	800163e <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	f022 0204 	bic.w	r2, r2, #4
 800163c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800163e:	4a9b      	ldr	r2, [pc, #620]	; (80018ac <HAL_DMA_IRQHandler+0x294>)
 8001640:	499b      	ldr	r1, [pc, #620]	; (80018b0 <HAL_DMA_IRQHandler+0x298>)
 8001642:	4293      	cmp	r3, r2
 8001644:	f240 8090 	bls.w	8001768 <HAL_DMA_IRQHandler+0x150>
 8001648:	428b      	cmp	r3, r1
 800164a:	f000 80ee 	beq.w	800182a <HAL_DMA_IRQHandler+0x212>
 800164e:	3114      	adds	r1, #20
 8001650:	428b      	cmp	r3, r1
 8001652:	f000 80f2 	beq.w	800183a <HAL_DMA_IRQHandler+0x222>
 8001656:	3114      	adds	r1, #20
 8001658:	428b      	cmp	r3, r1
 800165a:	f000 80e1 	beq.w	8001820 <HAL_DMA_IRQHandler+0x208>
 800165e:	3114      	adds	r1, #20
 8001660:	428b      	cmp	r3, r1
 8001662:	f000 80f5 	beq.w	8001850 <HAL_DMA_IRQHandler+0x238>
 8001666:	3114      	adds	r1, #20
 8001668:	428b      	cmp	r3, r1
 800166a:	f000 80fd 	beq.w	8001868 <HAL_DMA_IRQHandler+0x250>
 800166e:	3114      	adds	r1, #20
 8001670:	428b      	cmp	r3, r1
 8001672:	f000 8102 	beq.w	800187a <HAL_DMA_IRQHandler+0x262>
 8001676:	4293      	cmp	r3, r2
 8001678:	f000 810b 	beq.w	8001892 <HAL_DMA_IRQHandler+0x27a>
 800167c:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001680:	4293      	cmp	r3, r2
 8001682:	f000 80d2 	beq.w	800182a <HAL_DMA_IRQHandler+0x212>
 8001686:	3214      	adds	r2, #20
 8001688:	4293      	cmp	r3, r2
 800168a:	f000 80d6 	beq.w	800183a <HAL_DMA_IRQHandler+0x222>
 800168e:	3214      	adds	r2, #20
 8001690:	4293      	cmp	r3, r2
 8001692:	f000 80c5 	beq.w	8001820 <HAL_DMA_IRQHandler+0x208>
 8001696:	3214      	adds	r2, #20
 8001698:	4293      	cmp	r3, r2
 800169a:	bf14      	ite	ne
 800169c:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 80016a0:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 80016a4:	4a83      	ldr	r2, [pc, #524]	; (80018b4 <HAL_DMA_IRQHandler+0x29c>)
 80016a6:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80016a8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d15a      	bne.n	8001764 <HAL_DMA_IRQHandler+0x14c>
}
 80016ae:	bc70      	pop	{r4, r5, r6}
 80016b0:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80016b2:	2202      	movs	r2, #2
 80016b4:	408a      	lsls	r2, r1
 80016b6:	4222      	tst	r2, r4
 80016b8:	d03f      	beq.n	800173a <HAL_DMA_IRQHandler+0x122>
 80016ba:	07aa      	lsls	r2, r5, #30
 80016bc:	d53d      	bpl.n	800173a <HAL_DMA_IRQHandler+0x122>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	0691      	lsls	r1, r2, #26
 80016c2:	d406      	bmi.n	80016d2 <HAL_DMA_IRQHandler+0xba>
      hdma->State = HAL_DMA_STATE_READY;
 80016c4:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	f022 020a 	bic.w	r2, r2, #10
 80016cc:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80016ce:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80016d2:	4a76      	ldr	r2, [pc, #472]	; (80018ac <HAL_DMA_IRQHandler+0x294>)
 80016d4:	4976      	ldr	r1, [pc, #472]	; (80018b0 <HAL_DMA_IRQHandler+0x298>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d96d      	bls.n	80017b6 <HAL_DMA_IRQHandler+0x19e>
 80016da:	428b      	cmp	r3, r1
 80016dc:	f000 80a7 	beq.w	800182e <HAL_DMA_IRQHandler+0x216>
 80016e0:	3114      	adds	r1, #20
 80016e2:	428b      	cmp	r3, r1
 80016e4:	f000 8097 	beq.w	8001816 <HAL_DMA_IRQHandler+0x1fe>
 80016e8:	3114      	adds	r1, #20
 80016ea:	428b      	cmp	r3, r1
 80016ec:	f000 80a7 	beq.w	800183e <HAL_DMA_IRQHandler+0x226>
 80016f0:	3114      	adds	r1, #20
 80016f2:	428b      	cmp	r3, r1
 80016f4:	f000 80af 	beq.w	8001856 <HAL_DMA_IRQHandler+0x23e>
 80016f8:	3114      	adds	r1, #20
 80016fa:	428b      	cmp	r3, r1
 80016fc:	f000 80ba 	beq.w	8001874 <HAL_DMA_IRQHandler+0x25c>
 8001700:	3114      	adds	r1, #20
 8001702:	428b      	cmp	r3, r1
 8001704:	f000 80c2 	beq.w	800188c <HAL_DMA_IRQHandler+0x274>
 8001708:	4293      	cmp	r3, r2
 800170a:	f000 80cb 	beq.w	80018a4 <HAL_DMA_IRQHandler+0x28c>
 800170e:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001712:	4293      	cmp	r3, r2
 8001714:	f000 808b 	beq.w	800182e <HAL_DMA_IRQHandler+0x216>
 8001718:	3214      	adds	r2, #20
 800171a:	4293      	cmp	r3, r2
 800171c:	d07b      	beq.n	8001816 <HAL_DMA_IRQHandler+0x1fe>
 800171e:	3214      	adds	r2, #20
 8001720:	4293      	cmp	r3, r2
 8001722:	f000 808c 	beq.w	800183e <HAL_DMA_IRQHandler+0x226>
 8001726:	3214      	adds	r2, #20
 8001728:	4293      	cmp	r3, r2
 800172a:	bf14      	ite	ne
 800172c:	f44f 3200 	movne.w	r2, #131072	; 0x20000
 8001730:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 8001734:	4b5f      	ldr	r3, [pc, #380]	; (80018b4 <HAL_DMA_IRQHandler+0x29c>)
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	e062      	b.n	8001800 <HAL_DMA_IRQHandler+0x1e8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800173a:	2208      	movs	r2, #8
 800173c:	408a      	lsls	r2, r1
 800173e:	4222      	tst	r2, r4
 8001740:	d0b5      	beq.n	80016ae <HAL_DMA_IRQHandler+0x96>
 8001742:	072a      	lsls	r2, r5, #28
 8001744:	d5b3      	bpl.n	80016ae <HAL_DMA_IRQHandler+0x96>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001746:	2401      	movs	r4, #1
    __HAL_UNLOCK(hdma);
 8001748:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800174c:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800174e:	fa04 f101 	lsl.w	r1, r4, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001752:	f022 020e 	bic.w	r2, r2, #14
 8001756:	601a      	str	r2, [r3, #0]
    if (hdma->XferErrorCallback != NULL)
 8001758:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800175a:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800175c:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 800175e:	8405      	strh	r5, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0a4      	beq.n	80016ae <HAL_DMA_IRQHandler+0x96>
}
 8001764:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001766:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001768:	428b      	cmp	r3, r1
 800176a:	d05c      	beq.n	8001826 <HAL_DMA_IRQHandler+0x20e>
 800176c:	3114      	adds	r1, #20
 800176e:	428b      	cmp	r3, r1
 8001770:	d061      	beq.n	8001836 <HAL_DMA_IRQHandler+0x21e>
 8001772:	3114      	adds	r1, #20
 8001774:	428b      	cmp	r3, r1
 8001776:	d050      	beq.n	800181a <HAL_DMA_IRQHandler+0x202>
 8001778:	3114      	adds	r1, #20
 800177a:	428b      	cmp	r3, r1
 800177c:	d065      	beq.n	800184a <HAL_DMA_IRQHandler+0x232>
 800177e:	3114      	adds	r1, #20
 8001780:	428b      	cmp	r3, r1
 8001782:	d06e      	beq.n	8001862 <HAL_DMA_IRQHandler+0x24a>
 8001784:	3114      	adds	r1, #20
 8001786:	428b      	cmp	r3, r1
 8001788:	d07a      	beq.n	8001880 <HAL_DMA_IRQHandler+0x268>
 800178a:	4293      	cmp	r3, r2
 800178c:	f000 8084 	beq.w	8001898 <HAL_DMA_IRQHandler+0x280>
 8001790:	4a49      	ldr	r2, [pc, #292]	; (80018b8 <HAL_DMA_IRQHandler+0x2a0>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d047      	beq.n	8001826 <HAL_DMA_IRQHandler+0x20e>
 8001796:	3214      	adds	r2, #20
 8001798:	4293      	cmp	r3, r2
 800179a:	d04c      	beq.n	8001836 <HAL_DMA_IRQHandler+0x21e>
 800179c:	3214      	adds	r2, #20
 800179e:	4293      	cmp	r3, r2
 80017a0:	d03b      	beq.n	800181a <HAL_DMA_IRQHandler+0x202>
 80017a2:	3214      	adds	r2, #20
 80017a4:	4293      	cmp	r3, r2
 80017a6:	bf14      	ite	ne
 80017a8:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 80017ac:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 80017b0:	4a42      	ldr	r2, [pc, #264]	; (80018bc <HAL_DMA_IRQHandler+0x2a4>)
 80017b2:	6053      	str	r3, [r2, #4]
 80017b4:	e778      	b.n	80016a8 <HAL_DMA_IRQHandler+0x90>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80017b6:	428b      	cmp	r3, r1
 80017b8:	d03b      	beq.n	8001832 <HAL_DMA_IRQHandler+0x21a>
 80017ba:	3114      	adds	r1, #20
 80017bc:	428b      	cmp	r3, r1
 80017be:	d028      	beq.n	8001812 <HAL_DMA_IRQHandler+0x1fa>
 80017c0:	3114      	adds	r1, #20
 80017c2:	428b      	cmp	r3, r1
 80017c4:	d03e      	beq.n	8001844 <HAL_DMA_IRQHandler+0x22c>
 80017c6:	3114      	adds	r1, #20
 80017c8:	428b      	cmp	r3, r1
 80017ca:	d047      	beq.n	800185c <HAL_DMA_IRQHandler+0x244>
 80017cc:	3114      	adds	r1, #20
 80017ce:	428b      	cmp	r3, r1
 80017d0:	d04d      	beq.n	800186e <HAL_DMA_IRQHandler+0x256>
 80017d2:	3114      	adds	r1, #20
 80017d4:	428b      	cmp	r3, r1
 80017d6:	d056      	beq.n	8001886 <HAL_DMA_IRQHandler+0x26e>
 80017d8:	4293      	cmp	r3, r2
 80017da:	d060      	beq.n	800189e <HAL_DMA_IRQHandler+0x286>
 80017dc:	4a36      	ldr	r2, [pc, #216]	; (80018b8 <HAL_DMA_IRQHandler+0x2a0>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d027      	beq.n	8001832 <HAL_DMA_IRQHandler+0x21a>
 80017e2:	3214      	adds	r2, #20
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d014      	beq.n	8001812 <HAL_DMA_IRQHandler+0x1fa>
 80017e8:	3214      	adds	r2, #20
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d02a      	beq.n	8001844 <HAL_DMA_IRQHandler+0x22c>
 80017ee:	3214      	adds	r2, #20
 80017f0:	4293      	cmp	r3, r2
 80017f2:	bf14      	ite	ne
 80017f4:	f44f 3200 	movne.w	r2, #131072	; 0x20000
 80017f8:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 80017fc:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <HAL_DMA_IRQHandler+0x2a4>)
 80017fe:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8001800:	2200      	movs	r2, #0
    if(hdma->XferCpltCallback != NULL)
 8001802:	6a83      	ldr	r3, [r0, #40]	; 0x28
    __HAL_UNLOCK(hdma);
 8001804:	f880 2020 	strb.w	r2, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001808:	2b00      	cmp	r3, #0
 800180a:	f43f af50 	beq.w	80016ae <HAL_DMA_IRQHandler+0x96>
}
 800180e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001810:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001812:	2220      	movs	r2, #32
 8001814:	e7f2      	b.n	80017fc <HAL_DMA_IRQHandler+0x1e4>
 8001816:	2220      	movs	r2, #32
 8001818:	e78c      	b.n	8001734 <HAL_DMA_IRQHandler+0x11c>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800181a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800181e:	e7c7      	b.n	80017b0 <HAL_DMA_IRQHandler+0x198>
 8001820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001824:	e73e      	b.n	80016a4 <HAL_DMA_IRQHandler+0x8c>
 8001826:	2304      	movs	r3, #4
 8001828:	e7c2      	b.n	80017b0 <HAL_DMA_IRQHandler+0x198>
 800182a:	2304      	movs	r3, #4
 800182c:	e73a      	b.n	80016a4 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800182e:	2202      	movs	r2, #2
 8001830:	e780      	b.n	8001734 <HAL_DMA_IRQHandler+0x11c>
 8001832:	2202      	movs	r2, #2
 8001834:	e7e2      	b.n	80017fc <HAL_DMA_IRQHandler+0x1e4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001836:	2340      	movs	r3, #64	; 0x40
 8001838:	e7ba      	b.n	80017b0 <HAL_DMA_IRQHandler+0x198>
 800183a:	2340      	movs	r3, #64	; 0x40
 800183c:	e732      	b.n	80016a4 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800183e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001842:	e777      	b.n	8001734 <HAL_DMA_IRQHandler+0x11c>
 8001844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001848:	e7d8      	b.n	80017fc <HAL_DMA_IRQHandler+0x1e4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800184a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800184e:	e7af      	b.n	80017b0 <HAL_DMA_IRQHandler+0x198>
 8001850:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001854:	e726      	b.n	80016a4 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001856:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800185a:	e76b      	b.n	8001734 <HAL_DMA_IRQHandler+0x11c>
 800185c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001860:	e7cc      	b.n	80017fc <HAL_DMA_IRQHandler+0x1e4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001862:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001866:	e7a3      	b.n	80017b0 <HAL_DMA_IRQHandler+0x198>
 8001868:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800186c:	e71a      	b.n	80016a4 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800186e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001872:	e7c3      	b.n	80017fc <HAL_DMA_IRQHandler+0x1e4>
 8001874:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001878:	e75c      	b.n	8001734 <HAL_DMA_IRQHandler+0x11c>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800187a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800187e:	e711      	b.n	80016a4 <HAL_DMA_IRQHandler+0x8c>
 8001880:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001884:	e794      	b.n	80017b0 <HAL_DMA_IRQHandler+0x198>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001886:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800188a:	e7b7      	b.n	80017fc <HAL_DMA_IRQHandler+0x1e4>
 800188c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001890:	e750      	b.n	8001734 <HAL_DMA_IRQHandler+0x11c>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001892:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001896:	e705      	b.n	80016a4 <HAL_DMA_IRQHandler+0x8c>
 8001898:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800189c:	e788      	b.n	80017b0 <HAL_DMA_IRQHandler+0x198>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800189e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018a2:	e7ab      	b.n	80017fc <HAL_DMA_IRQHandler+0x1e4>
 80018a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018a8:	e744      	b.n	8001734 <HAL_DMA_IRQHandler+0x11c>
 80018aa:	bf00      	nop
 80018ac:	40020080 	.word	0x40020080
 80018b0:	40020008 	.word	0x40020008
 80018b4:	40020400 	.word	0x40020400
 80018b8:	40020408 	.word	0x40020408
 80018bc:	40020000 	.word	0x40020000

080018c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c4:	680c      	ldr	r4, [r1, #0]
{
 80018c6:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c8:	2c00      	cmp	r4, #0
 80018ca:	f000 80a2 	beq.w	8001a12 <HAL_GPIO_Init+0x152>
  uint32_t config = 0x00u;
 80018ce:	2600      	movs	r6, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018d0:	f8df c228 	ldr.w	ip, [pc, #552]	; 8001afc <HAL_GPIO_Init+0x23c>
  uint32_t position = 0x00u;
 80018d4:	4633      	mov	r3, r6
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018d6:	f8df 8228 	ldr.w	r8, [pc, #552]	; 8001b00 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018da:	4f82      	ldr	r7, [pc, #520]	; (8001ae4 <HAL_GPIO_Init+0x224>)
      switch (GPIO_Init->Mode)
 80018dc:	f8df e224 	ldr.w	lr, [pc, #548]	; 8001b04 <HAL_GPIO_Init+0x244>
 80018e0:	e004      	b.n	80018ec <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 80018e2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e4:	fa34 f203 	lsrs.w	r2, r4, r3
 80018e8:	f000 8093 	beq.w	8001a12 <HAL_GPIO_Init+0x152>
    ioposition = (0x01uL << position);
 80018ec:	2201      	movs	r2, #1
 80018ee:	409a      	lsls	r2, r3
    if (iocurrent == ioposition)
 80018f0:	ea32 0904 	bics.w	r9, r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018f4:	ea02 0504 	and.w	r5, r2, r4
    if (iocurrent == ioposition)
 80018f8:	d1f3      	bne.n	80018e2 <HAL_GPIO_Init+0x22>
      switch (GPIO_Init->Mode)
 80018fa:	684c      	ldr	r4, [r1, #4]
 80018fc:	2c12      	cmp	r4, #18
 80018fe:	f200 808b 	bhi.w	8001a18 <HAL_GPIO_Init+0x158>
 8001902:	2c12      	cmp	r4, #18
 8001904:	d80c      	bhi.n	8001920 <HAL_GPIO_Init+0x60>
 8001906:	e8df f004 	tbb	[pc, r4]
 800190a:	c693      	.short	0xc693
 800190c:	0b0b0ac3 	.word	0x0b0b0ac3
 8001910:	0b0b0b0b 	.word	0x0b0b0b0b
 8001914:	0b0b0b0b 	.word	0x0b0b0b0b
 8001918:	c00b0b0b 	.word	0xc00b0b0b
 800191c:	bd          	.byte	0xbd
 800191d:	00          	.byte	0x00
 800191e:	2600      	movs	r6, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001920:	2dff      	cmp	r5, #255	; 0xff
 8001922:	f200 808c 	bhi.w	8001a3e <HAL_GPIO_Init+0x17e>
 8001926:	4681      	mov	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001928:	ea4f 0a83 	mov.w	sl, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800192c:	240f      	movs	r4, #15
 800192e:	f8d9 2000 	ldr.w	r2, [r9]
 8001932:	fa04 fb0a 	lsl.w	fp, r4, sl
 8001936:	ea22 020b 	bic.w	r2, r2, fp
 800193a:	fa06 fa0a 	lsl.w	sl, r6, sl
 800193e:	ea42 020a 	orr.w	r2, r2, sl
 8001942:	f8c9 2000 	str.w	r2, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001946:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800194a:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 800194e:	f000 8097 	beq.w	8001a80 <HAL_GPIO_Init+0x1c0>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001952:	f8dc a018 	ldr.w	sl, [ip, #24]
 8001956:	f023 0203 	bic.w	r2, r3, #3
 800195a:	f04a 0a01 	orr.w	sl, sl, #1
 800195e:	f8cc a018 	str.w	sl, [ip, #24]
 8001962:	f8dc a018 	ldr.w	sl, [ip, #24]
 8001966:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800196a:	f00a 0a01 	and.w	sl, sl, #1
 800196e:	f8cd a00c 	str.w	sl, [sp, #12]
 8001972:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001976:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800197a:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800197e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001982:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001986:	fa04 f40a 	lsl.w	r4, r4, sl
 800198a:	ea2b 0404 	bic.w	r4, fp, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800198e:	4540      	cmp	r0, r8
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001990:	9401      	str	r4, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001992:	d01b      	beq.n	80019cc <HAL_GPIO_Init+0x10c>
 8001994:	4c54      	ldr	r4, [pc, #336]	; (8001ae8 <HAL_GPIO_Init+0x228>)
 8001996:	42a0      	cmp	r0, r4
 8001998:	f000 8088 	beq.w	8001aac <HAL_GPIO_Init+0x1ec>
 800199c:	4c53      	ldr	r4, [pc, #332]	; (8001aec <HAL_GPIO_Init+0x22c>)
 800199e:	42a0      	cmp	r0, r4
 80019a0:	d07b      	beq.n	8001a9a <HAL_GPIO_Init+0x1da>
 80019a2:	4c53      	ldr	r4, [pc, #332]	; (8001af0 <HAL_GPIO_Init+0x230>)
 80019a4:	42a0      	cmp	r0, r4
 80019a6:	f000 808a 	beq.w	8001abe <HAL_GPIO_Init+0x1fe>
 80019aa:	4c52      	ldr	r4, [pc, #328]	; (8001af4 <HAL_GPIO_Init+0x234>)
 80019ac:	42a0      	cmp	r0, r4
 80019ae:	f000 808f 	beq.w	8001ad0 <HAL_GPIO_Init+0x210>
 80019b2:	4c51      	ldr	r4, [pc, #324]	; (8001af8 <HAL_GPIO_Init+0x238>)
 80019b4:	42a0      	cmp	r0, r4
 80019b6:	bf0c      	ite	eq
 80019b8:	f04f 0b05 	moveq.w	fp, #5
 80019bc:	f04f 0b06 	movne.w	fp, #6
 80019c0:	9c01      	ldr	r4, [sp, #4]
 80019c2:	fa0b fa0a 	lsl.w	sl, fp, sl
 80019c6:	ea44 040a 	orr.w	r4, r4, sl
 80019ca:	9401      	str	r4, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 80019cc:	9c01      	ldr	r4, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019ce:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        AFIO->EXTICR[position >> 2u] = temp;
 80019d2:	6094      	str	r4, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	bf14      	ite	ne
 80019d8:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019da:	43aa      	biceq	r2, r5
 80019dc:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80019de:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019e0:	f419 3f00 	tst.w	r9, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80019e4:	bf14      	ite	ne
 80019e6:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019e8:	43aa      	biceq	r2, r5
 80019ea:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80019ec:	68ba      	ldr	r2, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ee:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80019f2:	bf14      	ite	ne
 80019f4:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019f6:	43aa      	biceq	r2, r5
 80019f8:	60ba      	str	r2, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019fa:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80019fe:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a00:	d03b      	beq.n	8001a7a <HAL_GPIO_Init+0x1ba>
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a02:	4315      	orrs	r5, r2
 8001a04:	60fd      	str	r5, [r7, #12]
 8001a06:	680c      	ldr	r4, [r1, #0]
	position++;
 8001a08:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0a:	fa34 f203 	lsrs.w	r2, r4, r3
 8001a0e:	f47f af6d 	bne.w	80018ec <HAL_GPIO_Init+0x2c>
  }
}
 8001a12:	b005      	add	sp, #20
 8001a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001a18:	4574      	cmp	r4, lr
 8001a1a:	d009      	beq.n	8001a30 <HAL_GPIO_Init+0x170>
 8001a1c:	d916      	bls.n	8001a4c <HAL_GPIO_Init+0x18c>
 8001a1e:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8001b08 <HAL_GPIO_Init+0x248>
 8001a22:	454c      	cmp	r4, r9
 8001a24:	d004      	beq.n	8001a30 <HAL_GPIO_Init+0x170>
 8001a26:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001a2a:	454c      	cmp	r4, r9
 8001a2c:	f47f af78 	bne.w	8001920 <HAL_GPIO_Init+0x60>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a30:	688c      	ldr	r4, [r1, #8]
 8001a32:	b9dc      	cbnz	r4, 8001a6c <HAL_GPIO_Init+0x1ac>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a34:	2dff      	cmp	r5, #255	; 0xff
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a36:	f04f 0604 	mov.w	r6, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a3a:	f67f af74 	bls.w	8001926 <HAL_GPIO_Init+0x66>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a3e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8001a42:	f1aa 0a20 	sub.w	sl, sl, #32
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a46:	f100 0904 	add.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a4a:	e76f      	b.n	800192c <HAL_GPIO_Init+0x6c>
      switch (GPIO_Init->Mode)
 8001a4c:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8001b0c <HAL_GPIO_Init+0x24c>
 8001a50:	454c      	cmp	r4, r9
 8001a52:	d0ed      	beq.n	8001a30 <HAL_GPIO_Init+0x170>
 8001a54:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8001a58:	454c      	cmp	r4, r9
 8001a5a:	d0e9      	beq.n	8001a30 <HAL_GPIO_Init+0x170>
 8001a5c:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8001a60:	454c      	cmp	r4, r9
 8001a62:	f47f af5d 	bne.w	8001920 <HAL_GPIO_Init+0x60>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a66:	688c      	ldr	r4, [r1, #8]
 8001a68:	2c00      	cmp	r4, #0
 8001a6a:	d0e3      	beq.n	8001a34 <HAL_GPIO_Init+0x174>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a6c:	2c01      	cmp	r4, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a6e:	f04f 0608 	mov.w	r6, #8
            GPIOx->BSRR = ioposition;
 8001a72:	bf0c      	ite	eq
 8001a74:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 8001a76:	6142      	strne	r2, [r0, #20]
 8001a78:	e752      	b.n	8001920 <HAL_GPIO_Init+0x60>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a7a:	ea22 0505 	bic.w	r5, r2, r5
 8001a7e:	60fd      	str	r5, [r7, #12]
 8001a80:	680c      	ldr	r4, [r1, #0]
 8001a82:	e72e      	b.n	80018e2 <HAL_GPIO_Init+0x22>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a84:	68ce      	ldr	r6, [r1, #12]
 8001a86:	360c      	adds	r6, #12
          break;
 8001a88:	e74a      	b.n	8001920 <HAL_GPIO_Init+0x60>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a8a:	68ce      	ldr	r6, [r1, #12]
 8001a8c:	3604      	adds	r6, #4
          break;
 8001a8e:	e747      	b.n	8001920 <HAL_GPIO_Init+0x60>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a90:	68ce      	ldr	r6, [r1, #12]
 8001a92:	3608      	adds	r6, #8
          break;
 8001a94:	e744      	b.n	8001920 <HAL_GPIO_Init+0x60>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a96:	68ce      	ldr	r6, [r1, #12]
          break;
 8001a98:	e742      	b.n	8001920 <HAL_GPIO_Init+0x60>
 8001a9a:	f04f 0b02 	mov.w	fp, #2
 8001a9e:	9c01      	ldr	r4, [sp, #4]
 8001aa0:	fa0b fa0a 	lsl.w	sl, fp, sl
 8001aa4:	ea44 040a 	orr.w	r4, r4, sl
 8001aa8:	9401      	str	r4, [sp, #4]
 8001aaa:	e78f      	b.n	80019cc <HAL_GPIO_Init+0x10c>
 8001aac:	f04f 0b01 	mov.w	fp, #1
 8001ab0:	9c01      	ldr	r4, [sp, #4]
 8001ab2:	fa0b fa0a 	lsl.w	sl, fp, sl
 8001ab6:	ea44 040a 	orr.w	r4, r4, sl
 8001aba:	9401      	str	r4, [sp, #4]
 8001abc:	e786      	b.n	80019cc <HAL_GPIO_Init+0x10c>
 8001abe:	f04f 0b03 	mov.w	fp, #3
 8001ac2:	9c01      	ldr	r4, [sp, #4]
 8001ac4:	fa0b fa0a 	lsl.w	sl, fp, sl
 8001ac8:	ea44 040a 	orr.w	r4, r4, sl
 8001acc:	9401      	str	r4, [sp, #4]
 8001ace:	e77d      	b.n	80019cc <HAL_GPIO_Init+0x10c>
 8001ad0:	f04f 0b04 	mov.w	fp, #4
 8001ad4:	9c01      	ldr	r4, [sp, #4]
 8001ad6:	fa0b fa0a 	lsl.w	sl, fp, sl
 8001ada:	ea44 040a 	orr.w	r4, r4, sl
 8001ade:	9401      	str	r4, [sp, #4]
 8001ae0:	e774      	b.n	80019cc <HAL_GPIO_Init+0x10c>
 8001ae2:	bf00      	nop
 8001ae4:	40010400 	.word	0x40010400
 8001ae8:	40010c00 	.word	0x40010c00
 8001aec:	40011000 	.word	0x40011000
 8001af0:	40011400 	.word	0x40011400
 8001af4:	40011800 	.word	0x40011800
 8001af8:	40011c00 	.word	0x40011c00
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40010800 	.word	0x40010800
 8001b04:	10220000 	.word	0x10220000
 8001b08:	10310000 	.word	0x10310000
 8001b0c:	10120000 	.word	0x10120000

08001b10 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b10:	6883      	ldr	r3, [r0, #8]
 8001b12:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001b14:	bf14      	ite	ne
 8001b16:	2001      	movne	r0, #1
 8001b18:	2000      	moveq	r0, #0
 8001b1a:	4770      	bx	lr

08001b1c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b1c:	b902      	cbnz	r2, 8001b20 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b1e:	0409      	lsls	r1, r1, #16
 8001b20:	6101      	str	r1, [r0, #16]
  }
}
 8001b22:	4770      	bx	lr

08001b24 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b24:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b26:	ea01 0203 	and.w	r2, r1, r3
 8001b2a:	ea21 0103 	bic.w	r1, r1, r3
 8001b2e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001b32:	6101      	str	r1, [r0, #16]
}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop

08001b38 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>:
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8001b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b3a:	4605      	mov	r5, r0
 8001b3c:	460e      	mov	r6, r1
 8001b3e:	4617      	mov	r7, r2
 8001b40:	1c72      	adds	r2, r6, #1
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b42:	682c      	ldr	r4, [r5, #0]
 8001b44:	d003      	beq.n	8001b4e <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x16>
 8001b46:	e009      	b.n	8001b5c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x24>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b48:	6963      	ldr	r3, [r4, #20]
 8001b4a:	055b      	lsls	r3, r3, #21
 8001b4c:	d424      	bmi.n	8001b98 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b4e:	6963      	ldr	r3, [r4, #20]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	f013 0308 	ands.w	r3, r3, #8
 8001b56:	d1f7      	bne.n	8001b48 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x10>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001b58:	4618      	mov	r0, r3
}
 8001b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b5c:	6963      	ldr	r3, [r4, #20]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	f013 0308 	ands.w	r3, r3, #8
 8001b64:	d0f8      	beq.n	8001b58 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x20>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b66:	6963      	ldr	r3, [r4, #20]
 8001b68:	0559      	lsls	r1, r3, #21
 8001b6a:	d415      	bmi.n	8001b98 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b6c:	f7ff f93a 	bl	8000de4 <HAL_GetTick>
 8001b70:	1bc0      	subs	r0, r0, r7
 8001b72:	4286      	cmp	r6, r0
 8001b74:	d301      	bcc.n	8001b7a <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x42>
 8001b76:	2e00      	cmp	r6, #0
 8001b78:	d1e2      	bne.n	8001b40 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b7a:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b7c:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b7e:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b80:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b84:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b88:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001b8a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b8e:	f043 0320 	orr.w	r3, r3, #32
        return HAL_ERROR;
 8001b92:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b94:	642b      	str	r3, [r5, #64]	; 0x40
}
 8001b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b98:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b9a:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b9e:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba0:	6823      	ldr	r3, [r4, #0]
 8001ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ba6:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ba8:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001baa:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001bac:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bb0:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bb4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001bb6:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bba:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8001bbe:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bc0:	642b      	str	r3, [r5, #64]	; 0x40
}
 8001bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8001bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc6:	4605      	mov	r5, r0
 8001bc8:	460e      	mov	r6, r1
 8001bca:	4617      	mov	r7, r2
 8001bcc:	1c72      	adds	r2, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bce:	682c      	ldr	r4, [r5, #0]
 8001bd0:	d003      	beq.n	8001bda <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x16>
 8001bd2:	e009      	b.n	8001be8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x24>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bd4:	6963      	ldr	r3, [r4, #20]
 8001bd6:	055b      	lsls	r3, r3, #21
 8001bd8:	d424      	bmi.n	8001c24 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bda:	6963      	ldr	r3, [r4, #20]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	f013 0302 	ands.w	r3, r3, #2
 8001be2:	d1f7      	bne.n	8001bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x10>
  return HAL_OK;
 8001be4:	4618      	mov	r0, r3
}
 8001be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001be8:	6963      	ldr	r3, [r4, #20]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	f013 0302 	ands.w	r3, r3, #2
 8001bf0:	d0f8      	beq.n	8001be4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x20>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bf2:	6963      	ldr	r3, [r4, #20]
 8001bf4:	0559      	lsls	r1, r3, #21
 8001bf6:	d415      	bmi.n	8001c24 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bf8:	f7ff f8f4 	bl	8000de4 <HAL_GetTick>
 8001bfc:	1bc0      	subs	r0, r0, r7
 8001bfe:	4286      	cmp	r6, r0
 8001c00:	d301      	bcc.n	8001c06 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x42>
 8001c02:	2e00      	cmp	r6, #0
 8001c04:	d1e2      	bne.n	8001bcc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c06:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c08:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c0a:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c0c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c10:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c14:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001c16:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c1a:	f043 0320 	orr.w	r3, r3, #32
        return HAL_ERROR;
 8001c1e:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c20:	642b      	str	r3, [r5, #64]	; 0x40
}
 8001c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c24:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c26:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c2a:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c2c:	6823      	ldr	r3, [r4, #0]
 8001c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c32:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c34:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c36:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c38:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c3c:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c40:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001c42:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c46:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8001c4a:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c4c:	642b      	str	r3, [r5, #64]	; 0x40
}
 8001c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001c50 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001c50:	2800      	cmp	r0, #0
 8001c52:	f000 80b5 	beq.w	8001dc0 <HAL_I2C_Init+0x170>
{
 8001c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c58:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c5c:	4604      	mov	r4, r0
 8001c5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8094 	beq.w	8001d90 <HAL_I2C_Init+0x140>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c68:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001c6a:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c6c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	f022 0201 	bic.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c86:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c88:	f000 fcc0 	bl	800260c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c8c:	6865      	ldr	r5, [r4, #4]
 8001c8e:	4b4d      	ldr	r3, [pc, #308]	; (8001dc4 <HAL_I2C_Init+0x174>)
 8001c90:	429d      	cmp	r5, r3
 8001c92:	d84c      	bhi.n	8001d2e <HAL_I2C_Init+0xde>
 8001c94:	4b4c      	ldr	r3, [pc, #304]	; (8001dc8 <HAL_I2C_Init+0x178>)
 8001c96:	4298      	cmp	r0, r3
 8001c98:	d978      	bls.n	8001d8c <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c9a:	1e42      	subs	r2, r0, #1
 8001c9c:	006d      	lsls	r5, r5, #1
 8001c9e:	fbb2 f2f5 	udiv	r2, r2, r5
 8001ca2:	f640 76fc 	movw	r6, #4092	; 0xffc
  freqrange = I2C_FREQRANGE(pclk1);
 8001ca6:	4949      	ldr	r1, [pc, #292]	; (8001dcc <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ca8:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001caa:	fba1 1000 	umull	r1, r0, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cae:	6859      	ldr	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cb0:	3201      	adds	r2, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cb2:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001cb6:	ea41 4190 	orr.w	r1, r1, r0, lsr #18
 8001cba:	6059      	str	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cbc:	6a19      	ldr	r1, [r3, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8001cbe:	0c80      	lsrs	r0, r0, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cc0:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001cc4:	3001      	adds	r0, #1
 8001cc6:	4308      	orrs	r0, r1
 8001cc8:	6218      	str	r0, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cca:	69d9      	ldr	r1, [r3, #28]
 8001ccc:	4232      	tst	r2, r6
 8001cce:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001cd2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001cd6:	d160      	bne.n	8001d9a <HAL_I2C_Init+0x14a>
 8001cd8:	2204      	movs	r2, #4
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cda:	2500      	movs	r5, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001cdc:	2620      	movs	r6, #32
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	61da      	str	r2, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ce2:	6819      	ldr	r1, [r3, #0]
 8001ce4:	e9d4 2007 	ldrd	r2, r0, [r4, #28]
 8001ce8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001cec:	4302      	orrs	r2, r0
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cf2:	6899      	ldr	r1, [r3, #8]
 8001cf4:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 8001cf8:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001cfc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001d00:	4302      	orrs	r2, r0
 8001d02:	430a      	orrs	r2, r1
 8001d04:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d06:	68d9      	ldr	r1, [r3, #12]
 8001d08:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 8001d0c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001d10:	4302      	orrs	r2, r0
 8001d12:	430a      	orrs	r2, r1
 8001d14:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001d16:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8001d18:	4628      	mov	r0, r5
  __HAL_I2C_ENABLE(hi2c);
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d20:	6425      	str	r5, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d22:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d26:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d28:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 8001d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d2e:	4b28      	ldr	r3, [pc, #160]	; (8001dd0 <HAL_I2C_Init+0x180>)
 8001d30:	4298      	cmp	r0, r3
 8001d32:	d92b      	bls.n	8001d8c <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d34:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001d38:	4e24      	ldr	r6, [pc, #144]	; (8001dcc <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d3a:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001d3c:	fba6 2600 	umull	r2, r6, r6, r0
 8001d40:	0cb2      	lsrs	r2, r6, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d42:	fb01 f102 	mul.w	r1, r1, r2
 8001d46:	4f23      	ldr	r7, [pc, #140]	; (8001dd4 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d48:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d4a:	fba7 7101 	umull	r7, r1, r7, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d4e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001d52:	ea42 4296 	orr.w	r2, r2, r6, lsr #18
 8001d56:	605a      	str	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d58:	6a1a      	ldr	r2, [r3, #32]
 8001d5a:	0989      	lsrs	r1, r1, #6
 8001d5c:	3101      	adds	r1, #1
 8001d5e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001d62:	4311      	orrs	r1, r2
 8001d64:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d66:	69d9      	ldr	r1, [r3, #28]
 8001d68:	68a6      	ldr	r6, [r4, #8]
 8001d6a:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001d6e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001d72:	b9ae      	cbnz	r6, 8001da0 <HAL_I2C_Init+0x150>
 8001d74:	3801      	subs	r0, #1
 8001d76:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8001d7a:	fbb0 f2f2 	udiv	r2, r0, r2
 8001d7e:	3201      	adds	r2, #1
 8001d80:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001d84:	b1d2      	cbz	r2, 8001dbc <HAL_I2C_Init+0x16c>
 8001d86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d8a:	e7a6      	b.n	8001cda <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 8001d8c:	2001      	movs	r0, #1
}
 8001d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001d90:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001d94:	f004 fef8 	bl	8006b88 <HAL_I2C_MspInit>
 8001d98:	e766      	b.n	8001c68 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d9a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001d9e:	e79c      	b.n	8001cda <HAL_I2C_Init+0x8a>
 8001da0:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001da4:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 8001da8:	1e42      	subs	r2, r0, #1
 8001daa:	fbb2 f2f5 	udiv	r2, r2, r5
 8001dae:	3201      	adds	r2, #1
 8001db0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001db4:	b112      	cbz	r2, 8001dbc <HAL_I2C_Init+0x16c>
 8001db6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001dba:	e78e      	b.n	8001cda <HAL_I2C_Init+0x8a>
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	e78c      	b.n	8001cda <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 8001dc0:	2001      	movs	r0, #1
}
 8001dc2:	4770      	bx	lr
 8001dc4:	000186a0 	.word	0x000186a0
 8001dc8:	001e847f 	.word	0x001e847f
 8001dcc:	431bde83 	.word	0x431bde83
 8001dd0:	003d08ff 	.word	0x003d08ff
 8001dd4:	10624dd3 	.word	0x10624dd3

08001dd8 <HAL_I2C_Master_Transmit>:
{
 8001dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ddc:	4604      	mov	r4, r0
 8001dde:	b082      	sub	sp, #8
 8001de0:	469a      	mov	sl, r3
 8001de2:	4688      	mov	r8, r1
 8001de4:	4691      	mov	r9, r2
 8001de6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  uint32_t tickstart = HAL_GetTick();
 8001de8:	f7fe fffc 	bl	8000de4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dec:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001df0:	2b20      	cmp	r3, #32
 8001df2:	d005      	beq.n	8001e00 <HAL_I2C_Master_Transmit+0x28>
      return HAL_BUSY;
 8001df4:	f04f 0802 	mov.w	r8, #2
}
 8001df8:	4640      	mov	r0, r8
 8001dfa:	b002      	add	sp, #8
 8001dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e00:	4607      	mov	r7, r0
 8001e02:	e005      	b.n	8001e10 <HAL_I2C_Master_Transmit+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e04:	f7fe ffee 	bl	8000de4 <HAL_GetTick>
 8001e08:	1bc0      	subs	r0, r0, r7
 8001e0a:	2819      	cmp	r0, #25
 8001e0c:	f200 80f3 	bhi.w	8001ff6 <HAL_I2C_Master_Transmit+0x21e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e10:	6823      	ldr	r3, [r4, #0]
 8001e12:	699d      	ldr	r5, [r3, #24]
 8001e14:	43ed      	mvns	r5, r5
 8001e16:	f015 0502 	ands.w	r5, r5, #2
 8001e1a:	d0f3      	beq.n	8001e04 <HAL_I2C_Master_Transmit+0x2c>
    __HAL_LOCK(hi2c);
 8001e1c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8001e20:	2a01      	cmp	r2, #1
 8001e22:	d0e7      	beq.n	8001df4 <HAL_I2C_Master_Transmit+0x1c>
 8001e24:	2201      	movs	r2, #1
 8001e26:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	07d2      	lsls	r2, r2, #31
 8001e2e:	d570      	bpl.n	8001f12 <HAL_I2C_Master_Transmit+0x13a>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e30:	2100      	movs	r1, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e32:	2521      	movs	r5, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e34:	2010      	movs	r0, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e3c:	601a      	str	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e3e:	4a8b      	ldr	r2, [pc, #556]	; (800206c <HAL_I2C_Master_Transmit+0x294>)
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e40:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e44:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e48:	6421      	str	r1, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001e4a:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e4e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e50:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8001e54:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e58:	2a08      	cmp	r2, #8
    hi2c->XferSize    = hi2c->XferCount;
 8001e5a:	8521      	strh	r1, [r4, #40]	; 0x28
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e5c:	d007      	beq.n	8001e6e <HAL_I2C_Master_Transmit+0x96>
 8001e5e:	2a01      	cmp	r2, #1
 8001e60:	d005      	beq.n	8001e6e <HAL_I2C_Master_Transmit+0x96>
 8001e62:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001e66:	d002      	beq.n	8001e6e <HAL_I2C_Master_Transmit+0x96>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e68:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e6a:	2a12      	cmp	r2, #18
 8001e6c:	d103      	bne.n	8001e76 <HAL_I2C_Master_Transmit+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	1c75      	adds	r5, r6, #1
 8001e78:	d13d      	bne.n	8001ef6 <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	07d0      	lsls	r0, r2, #31
 8001e7e:	d5fc      	bpl.n	8001e7a <HAL_I2C_Master_Transmit+0xa2>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e80:	6922      	ldr	r2, [r4, #16]
 8001e82:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001e86:	d149      	bne.n	8001f1c <HAL_I2C_Master_Transmit+0x144>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e88:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 8001e8c:	6119      	str	r1, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e8e:	463a      	mov	r2, r7
 8001e90:	4631      	mov	r1, r6
 8001e92:	4620      	mov	r0, r4
 8001e94:	f7ff fe96 	bl	8001bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
 8001e98:	4680      	mov	r8, r0
 8001e9a:	bb30      	cbnz	r0, 8001eea <HAL_I2C_Master_Transmit+0x112>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e9c:	6823      	ldr	r3, [r4, #0]
 8001e9e:	9001      	str	r0, [sp, #4]
 8001ea0:	6959      	ldr	r1, [r3, #20]
    while (hi2c->XferSize > 0U)
 8001ea2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ea4:	9101      	str	r1, [sp, #4]
 8001ea6:	6999      	ldr	r1, [r3, #24]
 8001ea8:	9101      	str	r1, [sp, #4]
 8001eaa:	9901      	ldr	r1, [sp, #4]
    while (hi2c->XferSize > 0U)
 8001eac:	2a00      	cmp	r2, #0
 8001eae:	d076      	beq.n	8001f9e <HAL_I2C_Master_Transmit+0x1c6>
 8001eb0:	1c75      	adds	r5, r6, #1
 8001eb2:	f040 8081 	bne.w	8001fb8 <HAL_I2C_Master_Transmit+0x1e0>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001eb6:	695a      	ldr	r2, [r3, #20]
 8001eb8:	0610      	lsls	r0, r2, #24
 8001eba:	d442      	bmi.n	8001f42 <HAL_I2C_Master_Transmit+0x16a>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ebc:	695a      	ldr	r2, [r3, #20]
 8001ebe:	0551      	lsls	r1, r2, #21
 8001ec0:	d5f9      	bpl.n	8001eb6 <HAL_I2C_Master_Transmit+0xde>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ec2:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ec4:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ec8:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eca:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ecc:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ece:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ed2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ed6:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001edc:	f043 0304 	orr.w	r3, r3, #4
 8001ee0:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ee2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	f000 80ab 	beq.w	8002040 <HAL_I2C_Master_Transmit+0x268>
      return HAL_ERROR;
 8001eea:	f04f 0801 	mov.w	r8, #1
}
 8001eee:	4640      	mov	r0, r8
 8001ef0:	b002      	add	sp, #8
 8001ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ef6:	695a      	ldr	r2, [r3, #20]
 8001ef8:	07d1      	lsls	r1, r2, #31
 8001efa:	d4c1      	bmi.n	8001e80 <HAL_I2C_Master_Transmit+0xa8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001efc:	f7fe ff72 	bl	8000de4 <HAL_GetTick>
 8001f00:	1bc0      	subs	r0, r0, r7
 8001f02:	4286      	cmp	r6, r0
 8001f04:	f0c0 8084 	bcc.w	8002010 <HAL_I2C_Master_Transmit+0x238>
 8001f08:	2e00      	cmp	r6, #0
 8001f0a:	f000 8081 	beq.w	8002010 <HAL_I2C_Master_Transmit+0x238>
 8001f0e:	6823      	ldr	r3, [r4, #0]
 8001f10:	e7b1      	b.n	8001e76 <HAL_I2C_Master_Transmit+0x9e>
      __HAL_I2C_ENABLE(hi2c);
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	f042 0201 	orr.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	e789      	b.n	8001e30 <HAL_I2C_Master_Transmit+0x58>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f1c:	ea4f 12e8 	mov.w	r2, r8, asr #7
 8001f20:	f002 0206 	and.w	r2, r2, #6
 8001f24:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8001f28:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f2a:	4631      	mov	r1, r6
 8001f2c:	463a      	mov	r2, r7
 8001f2e:	4620      	mov	r0, r4
 8001f30:	f7ff fe02 	bl	8001b38 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8001f34:	2800      	cmp	r0, #0
 8001f36:	d1d8      	bne.n	8001eea <HAL_I2C_Master_Transmit+0x112>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	fa5f f188 	uxtb.w	r1, r8
 8001f3e:	6119      	str	r1, [r3, #16]
 8001f40:	e7a5      	b.n	8001e8e <HAL_I2C_Master_Transmit+0xb6>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f42:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001f44:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f48:	4605      	mov	r5, r0
 8001f4a:	f815 2b01 	ldrb.w	r2, [r5], #1
      hi2c->XferSize--;
 8001f4e:	f10c 31ff 	add.w	r1, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f52:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8001f54:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001f56:	b289      	uxth	r1, r1
      hi2c->XferCount--;
 8001f58:	3a01      	subs	r2, #1
 8001f5a:	b292      	uxth	r2, r2
 8001f5c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f5e:	695a      	ldr	r2, [r3, #20]
      hi2c->pBuffPtr++;
 8001f60:	6265      	str	r5, [r4, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f62:	0755      	lsls	r5, r2, #29
      hi2c->XferSize--;
 8001f64:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f66:	d50c      	bpl.n	8001f82 <HAL_I2C_Master_Transmit+0x1aa>
 8001f68:	b159      	cbz	r1, 8001f82 <HAL_I2C_Master_Transmit+0x1aa>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f6a:	7842      	ldrb	r2, [r0, #1]
        hi2c->XferSize--;
 8001f6c:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f70:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8001f72:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8001f74:	3002      	adds	r0, #2
        hi2c->XferCount--;
 8001f76:	3a01      	subs	r2, #1
 8001f78:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 8001f7a:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8001f7e:	6260      	str	r0, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001f80:	8562      	strh	r2, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001f82:	1c75      	adds	r5, r6, #1
 8001f84:	d128      	bne.n	8001fd8 <HAL_I2C_Master_Transmit+0x200>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f86:	695a      	ldr	r2, [r3, #20]
 8001f88:	0750      	lsls	r0, r2, #29
 8001f8a:	d405      	bmi.n	8001f98 <HAL_I2C_Master_Transmit+0x1c0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f8c:	695a      	ldr	r2, [r3, #20]
 8001f8e:	0551      	lsls	r1, r2, #21
 8001f90:	d497      	bmi.n	8001ec2 <HAL_I2C_Master_Transmit+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f92:	695a      	ldr	r2, [r3, #20]
 8001f94:	0750      	lsls	r0, r2, #29
 8001f96:	d5f9      	bpl.n	8001f8c <HAL_I2C_Master_Transmit+0x1b4>
    while (hi2c->XferSize > 0U)
 8001f98:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001f9a:	2a00      	cmp	r2, #0
 8001f9c:	d188      	bne.n	8001eb0 <HAL_I2C_Master_Transmit+0xd8>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f9e:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001fa0:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa8:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001faa:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001fae:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb2:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 8001fb6:	e71f      	b.n	8001df8 <HAL_I2C_Master_Transmit+0x20>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fb8:	695a      	ldr	r2, [r3, #20]
 8001fba:	0612      	lsls	r2, r2, #24
 8001fbc:	d4c1      	bmi.n	8001f42 <HAL_I2C_Master_Transmit+0x16a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fbe:	695a      	ldr	r2, [r3, #20]
 8001fc0:	0552      	lsls	r2, r2, #21
 8001fc2:	f53f af7e 	bmi.w	8001ec2 <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc6:	f7fe ff0d 	bl	8000de4 <HAL_GetTick>
 8001fca:	1bc0      	subs	r0, r0, r7
 8001fcc:	4286      	cmp	r6, r0
 8001fce:	d33f      	bcc.n	8002050 <HAL_I2C_Master_Transmit+0x278>
 8001fd0:	2e00      	cmp	r6, #0
 8001fd2:	d03d      	beq.n	8002050 <HAL_I2C_Master_Transmit+0x278>
 8001fd4:	6823      	ldr	r3, [r4, #0]
 8001fd6:	e76b      	b.n	8001eb0 <HAL_I2C_Master_Transmit+0xd8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	0752      	lsls	r2, r2, #29
 8001fdc:	d4dc      	bmi.n	8001f98 <HAL_I2C_Master_Transmit+0x1c0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fde:	695a      	ldr	r2, [r3, #20]
 8001fe0:	0552      	lsls	r2, r2, #21
 8001fe2:	f53f af6e 	bmi.w	8001ec2 <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe6:	f7fe fefd 	bl	8000de4 <HAL_GetTick>
 8001fea:	1bc0      	subs	r0, r0, r7
 8001fec:	4286      	cmp	r6, r0
 8001fee:	d32f      	bcc.n	8002050 <HAL_I2C_Master_Transmit+0x278>
 8001ff0:	b376      	cbz	r6, 8002050 <HAL_I2C_Master_Transmit+0x278>
 8001ff2:	6823      	ldr	r3, [r4, #0]
 8001ff4:	e7c5      	b.n	8001f82 <HAL_I2C_Master_Transmit+0x1aa>
        hi2c->State             = HAL_I2C_STATE_READY;
 8001ff6:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ff8:	6325      	str	r5, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001ffa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ffe:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002002:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002004:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002008:	f043 0320 	orr.w	r3, r3, #32
 800200c:	6423      	str	r3, [r4, #64]	; 0x40
 800200e:	e6f1      	b.n	8001df4 <HAL_I2C_Master_Transmit+0x1c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002010:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002012:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002014:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002016:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800201a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800201e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002020:	6821      	ldr	r1, [r4, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002022:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8002026:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800202a:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800202c:	680b      	ldr	r3, [r1, #0]
 800202e:	05de      	lsls	r6, r3, #23
 8002030:	f57f af5b 	bpl.w	8001eea <HAL_I2C_Master_Transmit+0x112>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002034:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 8002038:	f04f 0801 	mov.w	r8, #1
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800203c:	6423      	str	r3, [r4, #64]	; 0x40
 800203e:	e6db      	b.n	8001df8 <HAL_I2C_Master_Transmit+0x20>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002040:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR;
 8002042:	f04f 0801 	mov.w	r8, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002046:	6813      	ldr	r3, [r2, #0]
 8002048:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	e6d3      	b.n	8001df8 <HAL_I2C_Master_Transmit+0x20>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002050:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002052:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002054:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002056:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800205a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800205e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002060:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002064:	f043 0320 	orr.w	r3, r3, #32
 8002068:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800206a:	e73a      	b.n	8001ee2 <HAL_I2C_Master_Transmit+0x10a>
 800206c:	ffff0000 	.word	0xffff0000

08002070 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002070:	2800      	cmp	r0, #0
 8002072:	f000 81c3 	beq.w	80023fc <HAL_RCC_OscConfig+0x38c>
{
 8002076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800207a:	6803      	ldr	r3, [r0, #0]
 800207c:	4604      	mov	r4, r0
 800207e:	07dd      	lsls	r5, r3, #31
{
 8002080:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002082:	d535      	bpl.n	80020f0 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002084:	49a6      	ldr	r1, [pc, #664]	; (8002320 <HAL_RCC_OscConfig+0x2b0>)
 8002086:	684a      	ldr	r2, [r1, #4]
 8002088:	f002 020c 	and.w	r2, r2, #12
 800208c:	2a04      	cmp	r2, #4
 800208e:	f000 80ef 	beq.w	8002270 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002092:	684a      	ldr	r2, [r1, #4]
 8002094:	f002 020c 	and.w	r2, r2, #12
 8002098:	2a08      	cmp	r2, #8
 800209a:	f000 80e5 	beq.w	8002268 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800209e:	6863      	ldr	r3, [r4, #4]
 80020a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a4:	d010      	beq.n	80020c8 <HAL_RCC_OscConfig+0x58>
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 810d 	beq.w	80022c6 <HAL_RCC_OscConfig+0x256>
 80020ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020b0:	f000 818f 	beq.w	80023d2 <HAL_RCC_OscConfig+0x362>
 80020b4:	4b9a      	ldr	r3, [pc, #616]	; (8002320 <HAL_RCC_OscConfig+0x2b0>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	e004      	b.n	80020d2 <HAL_RCC_OscConfig+0x62>
 80020c8:	4a95      	ldr	r2, [pc, #596]	; (8002320 <HAL_RCC_OscConfig+0x2b0>)
 80020ca:	6813      	ldr	r3, [r2, #0]
 80020cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d2:	f7fe fe87 	bl	8000de4 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d6:	4e92      	ldr	r6, [pc, #584]	; (8002320 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80020d8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020da:	e005      	b.n	80020e8 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020dc:	f7fe fe82 	bl	8000de4 <HAL_GetTick>
 80020e0:	1b40      	subs	r0, r0, r5
 80020e2:	2864      	cmp	r0, #100	; 0x64
 80020e4:	f200 80eb 	bhi.w	80022be <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e8:	6833      	ldr	r3, [r6, #0]
 80020ea:	039a      	lsls	r2, r3, #14
 80020ec:	d5f6      	bpl.n	80020dc <HAL_RCC_OscConfig+0x6c>
 80020ee:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f0:	079f      	lsls	r7, r3, #30
 80020f2:	d528      	bpl.n	8002146 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020f4:	4a8a      	ldr	r2, [pc, #552]	; (8002320 <HAL_RCC_OscConfig+0x2b0>)
 80020f6:	6851      	ldr	r1, [r2, #4]
 80020f8:	f011 0f0c 	tst.w	r1, #12
 80020fc:	f000 808e 	beq.w	800221c <HAL_RCC_OscConfig+0x1ac>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002100:	6851      	ldr	r1, [r2, #4]
 8002102:	f001 010c 	and.w	r1, r1, #12
 8002106:	2908      	cmp	r1, #8
 8002108:	f000 8084 	beq.w	8002214 <HAL_RCC_OscConfig+0x1a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800210c:	6923      	ldr	r3, [r4, #16]
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 8125 	beq.w	800235e <HAL_RCC_OscConfig+0x2ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002114:	2201      	movs	r2, #1
 8002116:	4b83      	ldr	r3, [pc, #524]	; (8002324 <HAL_RCC_OscConfig+0x2b4>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002118:	4e81      	ldr	r6, [pc, #516]	; (8002320 <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_ENABLE();
 800211a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800211c:	f7fe fe62 	bl	8000de4 <HAL_GetTick>
 8002120:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002122:	e005      	b.n	8002130 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002124:	f7fe fe5e 	bl	8000de4 <HAL_GetTick>
 8002128:	1b40      	subs	r0, r0, r5
 800212a:	2802      	cmp	r0, #2
 800212c:	f200 80c7 	bhi.w	80022be <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002130:	6833      	ldr	r3, [r6, #0]
 8002132:	0798      	lsls	r0, r3, #30
 8002134:	d5f6      	bpl.n	8002124 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002136:	6833      	ldr	r3, [r6, #0]
 8002138:	6962      	ldr	r2, [r4, #20]
 800213a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800213e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002142:	6033      	str	r3, [r6, #0]
 8002144:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002146:	071a      	lsls	r2, r3, #28
 8002148:	d41f      	bmi.n	800218a <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800214a:	075d      	lsls	r5, r3, #29
 800214c:	d541      	bpl.n	80021d2 <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800214e:	4b74      	ldr	r3, [pc, #464]	; (8002320 <HAL_RCC_OscConfig+0x2b0>)
 8002150:	69da      	ldr	r2, [r3, #28]
 8002152:	00d0      	lsls	r0, r2, #3
 8002154:	d57d      	bpl.n	8002252 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8002156:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002158:	4b73      	ldr	r3, [pc, #460]	; (8002328 <HAL_RCC_OscConfig+0x2b8>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	05d1      	lsls	r1, r2, #23
 800215e:	f140 809d 	bpl.w	800229c <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002162:	68e3      	ldr	r3, [r4, #12]
 8002164:	2b01      	cmp	r3, #1
 8002166:	f000 810b 	beq.w	8002380 <HAL_RCC_OscConfig+0x310>
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 80c5 	beq.w	80022fa <HAL_RCC_OscConfig+0x28a>
 8002170:	2b05      	cmp	r3, #5
 8002172:	4b6b      	ldr	r3, [pc, #428]	; (8002320 <HAL_RCC_OscConfig+0x2b0>)
 8002174:	6a1a      	ldr	r2, [r3, #32]
 8002176:	f000 8139 	beq.w	80023ec <HAL_RCC_OscConfig+0x37c>
 800217a:	f022 0201 	bic.w	r2, r2, #1
 800217e:	621a      	str	r2, [r3, #32]
 8002180:	6a1a      	ldr	r2, [r3, #32]
 8002182:	f022 0204 	bic.w	r2, r2, #4
 8002186:	621a      	str	r2, [r3, #32]
 8002188:	e0ff      	b.n	800238a <HAL_RCC_OscConfig+0x31a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800218a:	69a3      	ldr	r3, [r4, #24]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d050      	beq.n	8002232 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8002190:	2201      	movs	r2, #1
 8002192:	4b66      	ldr	r3, [pc, #408]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002194:	4e62      	ldr	r6, [pc, #392]	; (8002320 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_ENABLE();
 8002196:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002198:	f7fe fe24 	bl	8000de4 <HAL_GetTick>
 800219c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219e:	e005      	b.n	80021ac <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a0:	f7fe fe20 	bl	8000de4 <HAL_GetTick>
 80021a4:	1b40      	subs	r0, r0, r5
 80021a6:	2802      	cmp	r0, #2
 80021a8:	f200 8089 	bhi.w	80022be <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80021ae:	079b      	lsls	r3, r3, #30
 80021b0:	d5f6      	bpl.n	80021a0 <HAL_RCC_OscConfig+0x130>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021b2:	4b5f      	ldr	r3, [pc, #380]	; (8002330 <HAL_RCC_OscConfig+0x2c0>)
 80021b4:	4a5f      	ldr	r2, [pc, #380]	; (8002334 <HAL_RCC_OscConfig+0x2c4>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	fba2 2303 	umull	r2, r3, r2, r3
 80021bc:	0a5b      	lsrs	r3, r3, #9
 80021be:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80021c0:	bf00      	nop
  }
  while (Delay --);
 80021c2:	9b01      	ldr	r3, [sp, #4]
 80021c4:	1e5a      	subs	r2, r3, #1
 80021c6:	9201      	str	r2, [sp, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f9      	bne.n	80021c0 <HAL_RCC_OscConfig+0x150>
 80021cc:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ce:	075d      	lsls	r5, r3, #29
 80021d0:	d4bd      	bmi.n	800214e <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d2:	69e0      	ldr	r0, [r4, #28]
 80021d4:	b1d0      	cbz	r0, 800220c <HAL_RCC_OscConfig+0x19c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021d6:	4d52      	ldr	r5, [pc, #328]	; (8002320 <HAL_RCC_OscConfig+0x2b0>)
 80021d8:	686a      	ldr	r2, [r5, #4]
 80021da:	f002 020c 	and.w	r2, r2, #12
 80021de:	2a08      	cmp	r2, #8
 80021e0:	f000 80e6 	beq.w	80023b0 <HAL_RCC_OscConfig+0x340>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021e4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80021e6:	f04f 0100 	mov.w	r1, #0
 80021ea:	4a53      	ldr	r2, [pc, #332]	; (8002338 <HAL_RCC_OscConfig+0x2c8>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ec:	f000 8108 	beq.w	8002400 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_PLL_DISABLE();
 80021f0:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 80021f2:	f7fe fdf7 	bl	8000de4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f6:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80021f8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fa:	e004      	b.n	8002206 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fc:	f7fe fdf2 	bl	8000de4 <HAL_GetTick>
 8002200:	1b40      	subs	r0, r0, r5
 8002202:	2802      	cmp	r0, #2
 8002204:	d85b      	bhi.n	80022be <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002206:	6823      	ldr	r3, [r4, #0]
 8002208:	019b      	lsls	r3, r3, #6
 800220a:	d4f7      	bmi.n	80021fc <HAL_RCC_OscConfig+0x18c>
  return HAL_OK;
 800220c:	2000      	movs	r0, #0
}
 800220e:	b002      	add	sp, #8
 8002210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002214:	6852      	ldr	r2, [r2, #4]
 8002216:	03d6      	lsls	r6, r2, #15
 8002218:	f53f af78 	bmi.w	800210c <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221c:	4a40      	ldr	r2, [pc, #256]	; (8002320 <HAL_RCC_OscConfig+0x2b0>)
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	0795      	lsls	r5, r2, #30
 8002222:	d52f      	bpl.n	8002284 <HAL_RCC_OscConfig+0x214>
 8002224:	6922      	ldr	r2, [r4, #16]
 8002226:	2a01      	cmp	r2, #1
 8002228:	d02c      	beq.n	8002284 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 800222a:	2001      	movs	r0, #1
}
 800222c:	b002      	add	sp, #8
 800222e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002232:	4a3e      	ldr	r2, [pc, #248]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002234:	4e3a      	ldr	r6, [pc, #232]	; (8002320 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_DISABLE();
 8002236:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002238:	f7fe fdd4 	bl	8000de4 <HAL_GetTick>
 800223c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223e:	e004      	b.n	800224a <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002240:	f7fe fdd0 	bl	8000de4 <HAL_GetTick>
 8002244:	1b40      	subs	r0, r0, r5
 8002246:	2802      	cmp	r0, #2
 8002248:	d839      	bhi.n	80022be <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800224c:	079f      	lsls	r7, r3, #30
 800224e:	d4f7      	bmi.n	8002240 <HAL_RCC_OscConfig+0x1d0>
 8002250:	e7bc      	b.n	80021cc <HAL_RCC_OscConfig+0x15c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8002254:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800225a:	61da      	str	r2, [r3, #28]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8002266:	e777      	b.n	8002158 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002268:	684a      	ldr	r2, [r1, #4]
 800226a:	03d0      	lsls	r0, r2, #15
 800226c:	f57f af17 	bpl.w	800209e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002270:	4a2b      	ldr	r2, [pc, #172]	; (8002320 <HAL_RCC_OscConfig+0x2b0>)
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	0391      	lsls	r1, r2, #14
 8002276:	f57f af3b 	bpl.w	80020f0 <HAL_RCC_OscConfig+0x80>
 800227a:	6862      	ldr	r2, [r4, #4]
 800227c:	2a00      	cmp	r2, #0
 800227e:	f47f af37 	bne.w	80020f0 <HAL_RCC_OscConfig+0x80>
 8002282:	e7d2      	b.n	800222a <HAL_RCC_OscConfig+0x1ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002284:	4926      	ldr	r1, [pc, #152]	; (8002320 <HAL_RCC_OscConfig+0x2b0>)
 8002286:	6960      	ldr	r0, [r4, #20]
 8002288:	680a      	ldr	r2, [r1, #0]
 800228a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800228e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002292:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002294:	071a      	lsls	r2, r3, #28
 8002296:	f57f af58 	bpl.w	800214a <HAL_RCC_OscConfig+0xda>
 800229a:	e776      	b.n	800218a <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800229c:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229e:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022a4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80022a6:	f7fe fd9d 	bl	8000de4 <HAL_GetTick>
 80022aa:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	05da      	lsls	r2, r3, #23
 80022b0:	f53f af57 	bmi.w	8002162 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b4:	f7fe fd96 	bl	8000de4 <HAL_GetTick>
 80022b8:	1b80      	subs	r0, r0, r6
 80022ba:	2864      	cmp	r0, #100	; 0x64
 80022bc:	d9f6      	bls.n	80022ac <HAL_RCC_OscConfig+0x23c>
            return HAL_TIMEOUT;
 80022be:	2003      	movs	r0, #3
}
 80022c0:	b002      	add	sp, #8
 80022c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022ca:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80022ce:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d0:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022e0:	f7fe fd80 	bl	8000de4 <HAL_GetTick>
 80022e4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e6:	e004      	b.n	80022f2 <HAL_RCC_OscConfig+0x282>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e8:	f7fe fd7c 	bl	8000de4 <HAL_GetTick>
 80022ec:	1b40      	subs	r0, r0, r5
 80022ee:	2864      	cmp	r0, #100	; 0x64
 80022f0:	d8e5      	bhi.n	80022be <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f2:	6833      	ldr	r3, [r6, #0]
 80022f4:	039b      	lsls	r3, r3, #14
 80022f6:	d4f7      	bmi.n	80022e8 <HAL_RCC_OscConfig+0x278>
 80022f8:	e6f9      	b.n	80020ee <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022fe:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002302:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002304:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002306:	f022 0201 	bic.w	r2, r2, #1
 800230a:	621a      	str	r2, [r3, #32]
 800230c:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002312:	f022 0204 	bic.w	r2, r2, #4
 8002316:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 8002318:	f7fe fd64 	bl	8000de4 <HAL_GetTick>
 800231c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231e:	e012      	b.n	8002346 <HAL_RCC_OscConfig+0x2d6>
 8002320:	40021000 	.word	0x40021000
 8002324:	42420000 	.word	0x42420000
 8002328:	40007000 	.word	0x40007000
 800232c:	42420480 	.word	0x42420480
 8002330:	200002d4 	.word	0x200002d4
 8002334:	10624dd3 	.word	0x10624dd3
 8002338:	42420060 	.word	0x42420060
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233c:	f7fe fd52 	bl	8000de4 <HAL_GetTick>
 8002340:	1b80      	subs	r0, r0, r6
 8002342:	4540      	cmp	r0, r8
 8002344:	d8bb      	bhi.n	80022be <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	0798      	lsls	r0, r3, #30
 800234a:	d4f7      	bmi.n	800233c <HAL_RCC_OscConfig+0x2cc>
    if (pwrclkchanged == SET)
 800234c:	2d00      	cmp	r5, #0
 800234e:	f43f af40 	beq.w	80021d2 <HAL_RCC_OscConfig+0x162>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002352:	4a44      	ldr	r2, [pc, #272]	; (8002464 <HAL_RCC_OscConfig+0x3f4>)
 8002354:	69d3      	ldr	r3, [r2, #28]
 8002356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800235a:	61d3      	str	r3, [r2, #28]
 800235c:	e739      	b.n	80021d2 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 800235e:	4a42      	ldr	r2, [pc, #264]	; (8002468 <HAL_RCC_OscConfig+0x3f8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002360:	4e40      	ldr	r6, [pc, #256]	; (8002464 <HAL_RCC_OscConfig+0x3f4>)
        __HAL_RCC_HSI_DISABLE();
 8002362:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002364:	f7fe fd3e 	bl	8000de4 <HAL_GetTick>
 8002368:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236a:	e004      	b.n	8002376 <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800236c:	f7fe fd3a 	bl	8000de4 <HAL_GetTick>
 8002370:	1b40      	subs	r0, r0, r5
 8002372:	2802      	cmp	r0, #2
 8002374:	d8a3      	bhi.n	80022be <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002376:	6833      	ldr	r3, [r6, #0]
 8002378:	0799      	lsls	r1, r3, #30
 800237a:	d4f7      	bmi.n	800236c <HAL_RCC_OscConfig+0x2fc>
 800237c:	6823      	ldr	r3, [r4, #0]
 800237e:	e6e2      	b.n	8002146 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002380:	4a38      	ldr	r2, [pc, #224]	; (8002464 <HAL_RCC_OscConfig+0x3f4>)
 8002382:	6a13      	ldr	r3, [r2, #32]
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800238a:	f7fe fd2b 	bl	8000de4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002392:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002394:	4f33      	ldr	r7, [pc, #204]	; (8002464 <HAL_RCC_OscConfig+0x3f4>)
 8002396:	e004      	b.n	80023a2 <HAL_RCC_OscConfig+0x332>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002398:	f7fe fd24 	bl	8000de4 <HAL_GetTick>
 800239c:	1b80      	subs	r0, r0, r6
 800239e:	4540      	cmp	r0, r8
 80023a0:	d88d      	bhi.n	80022be <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	079b      	lsls	r3, r3, #30
 80023a6:	d5f7      	bpl.n	8002398 <HAL_RCC_OscConfig+0x328>
    if (pwrclkchanged == SET)
 80023a8:	2d00      	cmp	r5, #0
 80023aa:	f43f af12 	beq.w	80021d2 <HAL_RCC_OscConfig+0x162>
 80023ae:	e7d0      	b.n	8002352 <HAL_RCC_OscConfig+0x2e2>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b0:	2801      	cmp	r0, #1
 80023b2:	f43f af2c 	beq.w	800220e <HAL_RCC_OscConfig+0x19e>
        pll_config = RCC->CFGR;
 80023b6:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b8:	6a22      	ldr	r2, [r4, #32]
 80023ba:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80023be:	4291      	cmp	r1, r2
 80023c0:	f47f af33 	bne.w	800222a <HAL_RCC_OscConfig+0x1ba>
 80023c4:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023c6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 80023ca:	1a18      	subs	r0, r3, r0
 80023cc:	bf18      	it	ne
 80023ce:	2001      	movne	r0, #1
 80023d0:	e71d      	b.n	800220e <HAL_RCC_OscConfig+0x19e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023d6:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	e672      	b.n	80020d2 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ec:	f042 0204 	orr.w	r2, r2, #4
 80023f0:	621a      	str	r2, [r3, #32]
 80023f2:	6a1a      	ldr	r2, [r3, #32]
 80023f4:	f042 0201 	orr.w	r2, r2, #1
 80023f8:	621a      	str	r2, [r3, #32]
 80023fa:	e7c6      	b.n	800238a <HAL_RCC_OscConfig+0x31a>
    return HAL_ERROR;
 80023fc:	2001      	movs	r0, #1
}
 80023fe:	4770      	bx	lr
        __HAL_RCC_PLL_DISABLE();
 8002400:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8002402:	f7fe fcef 	bl	8000de4 <HAL_GetTick>
 8002406:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002408:	e005      	b.n	8002416 <HAL_RCC_OscConfig+0x3a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240a:	f7fe fceb 	bl	8000de4 <HAL_GetTick>
 800240e:	1b80      	subs	r0, r0, r6
 8002410:	2802      	cmp	r0, #2
 8002412:	f63f af54 	bhi.w	80022be <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002416:	682b      	ldr	r3, [r5, #0]
 8002418:	0199      	lsls	r1, r3, #6
 800241a:	d4f6      	bmi.n	800240a <HAL_RCC_OscConfig+0x39a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800241c:	6a23      	ldr	r3, [r4, #32]
 800241e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002422:	d105      	bne.n	8002430 <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002424:	686a      	ldr	r2, [r5, #4]
 8002426:	68a1      	ldr	r1, [r4, #8]
 8002428:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800242c:	430a      	orrs	r2, r1
 800242e:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002430:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002432:	4d0c      	ldr	r5, [pc, #48]	; (8002464 <HAL_RCC_OscConfig+0x3f4>)
 8002434:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002436:	686a      	ldr	r2, [r5, #4]
 8002438:	430b      	orrs	r3, r1
 800243a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 800243e:	490b      	ldr	r1, [pc, #44]	; (800246c <HAL_RCC_OscConfig+0x3fc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002440:	4313      	orrs	r3, r2
 8002442:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002444:	6008      	str	r0, [r1, #0]
        tickstart = HAL_GetTick();
 8002446:	f7fe fccd 	bl	8000de4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800244a:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800244c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800244e:	e005      	b.n	800245c <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002450:	f7fe fcc8 	bl	8000de4 <HAL_GetTick>
 8002454:	1b40      	subs	r0, r0, r5
 8002456:	2802      	cmp	r0, #2
 8002458:	f63f af31 	bhi.w	80022be <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800245c:	6823      	ldr	r3, [r4, #0]
 800245e:	019a      	lsls	r2, r3, #6
 8002460:	d5f6      	bpl.n	8002450 <HAL_RCC_OscConfig+0x3e0>
 8002462:	e6d3      	b.n	800220c <HAL_RCC_OscConfig+0x19c>
 8002464:	40021000 	.word	0x40021000
 8002468:	42420000 	.word	0x42420000
 800246c:	42420060 	.word	0x42420060

08002470 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002470:	2800      	cmp	r0, #0
 8002472:	f000 80af 	beq.w	80025d4 <HAL_RCC_ClockConfig+0x164>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002476:	4a5d      	ldr	r2, [pc, #372]	; (80025ec <HAL_RCC_ClockConfig+0x17c>)
{
 8002478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800247c:	6813      	ldr	r3, [r2, #0]
 800247e:	4604      	mov	r4, r0
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	428b      	cmp	r3, r1
 8002486:	460d      	mov	r5, r1
{
 8002488:	b086      	sub	sp, #24
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800248a:	d20d      	bcs.n	80024a8 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248c:	6813      	ldr	r3, [r2, #0]
 800248e:	f023 0307 	bic.w	r3, r3, #7
 8002492:	430b      	orrs	r3, r1
 8002494:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002496:	6813      	ldr	r3, [r2, #0]
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	428b      	cmp	r3, r1
 800249e:	d003      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 80024a0:	2001      	movs	r0, #1
}
 80024a2:	b006      	add	sp, #24
 80024a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a8:	6823      	ldr	r3, [r4, #0]
 80024aa:	0798      	lsls	r0, r3, #30
 80024ac:	d514      	bpl.n	80024d8 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ae:	0759      	lsls	r1, r3, #29
 80024b0:	d504      	bpl.n	80024bc <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b2:	494f      	ldr	r1, [pc, #316]	; (80025f0 <HAL_RCC_ClockConfig+0x180>)
 80024b4:	684a      	ldr	r2, [r1, #4]
 80024b6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80024ba:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024bc:	071a      	lsls	r2, r3, #28
 80024be:	d504      	bpl.n	80024ca <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c0:	494b      	ldr	r1, [pc, #300]	; (80025f0 <HAL_RCC_ClockConfig+0x180>)
 80024c2:	684a      	ldr	r2, [r1, #4]
 80024c4:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80024c8:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ca:	4949      	ldr	r1, [pc, #292]	; (80025f0 <HAL_RCC_ClockConfig+0x180>)
 80024cc:	68a0      	ldr	r0, [r4, #8]
 80024ce:	684a      	ldr	r2, [r1, #4]
 80024d0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80024d4:	4302      	orrs	r2, r0
 80024d6:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d8:	07db      	lsls	r3, r3, #31
 80024da:	d520      	bpl.n	800251e <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024dc:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024de:	4b44      	ldr	r3, [pc, #272]	; (80025f0 <HAL_RCC_ClockConfig+0x180>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e0:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e2:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e4:	d078      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x168>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e6:	2a02      	cmp	r2, #2
 80024e8:	d071      	beq.n	80025ce <HAL_RCC_ClockConfig+0x15e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ea:	0798      	lsls	r0, r3, #30
 80024ec:	d5d8      	bpl.n	80024a0 <HAL_RCC_ClockConfig+0x30>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ee:	4e40      	ldr	r6, [pc, #256]	; (80025f0 <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024f4:	6873      	ldr	r3, [r6, #4]
 80024f6:	f023 0303 	bic.w	r3, r3, #3
 80024fa:	4313      	orrs	r3, r2
 80024fc:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80024fe:	f7fe fc71 	bl	8000de4 <HAL_GetTick>
 8002502:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002504:	e004      	b.n	8002510 <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002506:	f7fe fc6d 	bl	8000de4 <HAL_GetTick>
 800250a:	1bc0      	subs	r0, r0, r7
 800250c:	4540      	cmp	r0, r8
 800250e:	d866      	bhi.n	80025de <HAL_RCC_ClockConfig+0x16e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002510:	6873      	ldr	r3, [r6, #4]
 8002512:	6862      	ldr	r2, [r4, #4]
 8002514:	f003 030c 	and.w	r3, r3, #12
 8002518:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800251c:	d1f3      	bne.n	8002506 <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800251e:	4a33      	ldr	r2, [pc, #204]	; (80025ec <HAL_RCC_ClockConfig+0x17c>)
 8002520:	6813      	ldr	r3, [r2, #0]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	42ab      	cmp	r3, r5
 8002528:	d909      	bls.n	800253e <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252a:	6813      	ldr	r3, [r2, #0]
 800252c:	f023 0307 	bic.w	r3, r3, #7
 8002530:	432b      	orrs	r3, r5
 8002532:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002534:	6813      	ldr	r3, [r2, #0]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	42ab      	cmp	r3, r5
 800253c:	d1b0      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	0759      	lsls	r1, r3, #29
 8002542:	d506      	bpl.n	8002552 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002544:	492a      	ldr	r1, [pc, #168]	; (80025f0 <HAL_RCC_ClockConfig+0x180>)
 8002546:	68e0      	ldr	r0, [r4, #12]
 8002548:	684a      	ldr	r2, [r1, #4]
 800254a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800254e:	4302      	orrs	r2, r0
 8002550:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002552:	071a      	lsls	r2, r3, #28
 8002554:	d507      	bpl.n	8002566 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002556:	4a26      	ldr	r2, [pc, #152]	; (80025f0 <HAL_RCC_ClockConfig+0x180>)
 8002558:	6921      	ldr	r1, [r4, #16]
 800255a:	6853      	ldr	r3, [r2, #4]
 800255c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002560:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002564:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002566:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800256a:	4b22      	ldr	r3, [pc, #136]	; (80025f4 <HAL_RCC_ClockConfig+0x184>)
 800256c:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800256e:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002572:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002574:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8002578:	491d      	ldr	r1, [pc, #116]	; (80025f0 <HAL_RCC_ClockConfig+0x180>)
 800257a:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800257c:	f002 030c 	and.w	r3, r2, #12
 8002580:	2b08      	cmp	r3, #8
 8002582:	d011      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
 8002584:	4b1c      	ldr	r3, [pc, #112]	; (80025f8 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002586:	4a1a      	ldr	r2, [pc, #104]	; (80025f0 <HAL_RCC_ClockConfig+0x180>)
 8002588:	481c      	ldr	r0, [pc, #112]	; (80025fc <HAL_RCC_ClockConfig+0x18c>)
 800258a:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 800258c:	491c      	ldr	r1, [pc, #112]	; (8002600 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800258e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002592:	5c80      	ldrb	r0, [r0, r2]
 8002594:	4a1b      	ldr	r2, [pc, #108]	; (8002604 <HAL_RCC_ClockConfig+0x194>)
 8002596:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8002598:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800259a:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 800259c:	f004 fc72 	bl	8006e84 <HAL_InitTick>
  return HAL_OK;
 80025a0:	2000      	movs	r0, #0
}
 80025a2:	b006      	add	sp, #24
 80025a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025a8:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80025ac:	4423      	add	r3, r4
 80025ae:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025b2:	03d3      	lsls	r3, r2, #15
 80025b4:	d515      	bpl.n	80025e2 <HAL_RCC_ClockConfig+0x172>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025b6:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025b8:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <HAL_RCC_ClockConfig+0x188>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025ba:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025be:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025c2:	4422      	add	r2, r4
 80025c4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80025cc:	e7db      	b.n	8002586 <HAL_RCC_ClockConfig+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ce:	019e      	lsls	r6, r3, #6
 80025d0:	d48d      	bmi.n	80024ee <HAL_RCC_ClockConfig+0x7e>
 80025d2:	e765      	b.n	80024a0 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 80025d4:	2001      	movs	r0, #1
}
 80025d6:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d8:	039f      	lsls	r7, r3, #14
 80025da:	d488      	bmi.n	80024ee <HAL_RCC_ClockConfig+0x7e>
 80025dc:	e760      	b.n	80024a0 <HAL_RCC_ClockConfig+0x30>
        return HAL_TIMEOUT;
 80025de:	2003      	movs	r0, #3
 80025e0:	e75f      	b.n	80024a2 <HAL_RCC_ClockConfig+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <HAL_RCC_ClockConfig+0x198>)
 80025e4:	fb03 f300 	mul.w	r3, r3, r0
 80025e8:	e7cd      	b.n	8002586 <HAL_RCC_ClockConfig+0x116>
 80025ea:	bf00      	nop
 80025ec:	40022000 	.word	0x40022000
 80025f0:	40021000 	.word	0x40021000
 80025f4:	08007ab8 	.word	0x08007ab8
 80025f8:	007a1200 	.word	0x007a1200
 80025fc:	08007aa0 	.word	0x08007aa0
 8002600:	20000004 	.word	0x20000004
 8002604:	200002d4 	.word	0x200002d4
 8002608:	003d0900 	.word	0x003d0900

0800260c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800260c:	4b04      	ldr	r3, [pc, #16]	; (8002620 <HAL_RCC_GetPCLK1Freq+0x14>)
 800260e:	4905      	ldr	r1, [pc, #20]	; (8002624 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002610:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8002612:	4a05      	ldr	r2, [pc, #20]	; (8002628 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002614:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002618:	5ccb      	ldrb	r3, [r1, r3]
 800261a:	6810      	ldr	r0, [r2, #0]
}
 800261c:	40d8      	lsrs	r0, r3
 800261e:	4770      	bx	lr
 8002620:	40021000 	.word	0x40021000
 8002624:	08007ab0 	.word	0x08007ab0
 8002628:	200002d4 	.word	0x200002d4

0800262c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <HAL_RCC_GetPCLK2Freq+0x14>)
 800262e:	4905      	ldr	r1, [pc, #20]	; (8002644 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002630:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8002632:	4a05      	ldr	r2, [pc, #20]	; (8002648 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002634:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002638:	5ccb      	ldrb	r3, [r1, r3]
 800263a:	6810      	ldr	r0, [r2, #0]
}
 800263c:	40d8      	lsrs	r0, r3
 800263e:	4770      	bx	lr
 8002640:	40021000 	.word	0x40021000
 8002644:	08007ab0 	.word	0x08007ab0
 8002648:	200002d4 	.word	0x200002d4

0800264c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800264c:	220f      	movs	r2, #15
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800264e:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <HAL_RCC_GetClockConfig+0x38>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002650:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002652:	685a      	ldr	r2, [r3, #4]
{
 8002654:	b410      	push	{r4}
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002656:	f002 0203 	and.w	r2, r2, #3
 800265a:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800265c:	685a      	ldr	r2, [r3, #4]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800265e:	4c0a      	ldr	r4, [pc, #40]	; (8002688 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002660:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002664:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800266c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	08db      	lsrs	r3, r3, #3
 8002672:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002676:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002678:	6823      	ldr	r3, [r4, #0]
}
 800267a:	bc10      	pop	{r4}
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	600b      	str	r3, [r1, #0]
}
 8002682:	4770      	bx	lr
 8002684:	40021000 	.word	0x40021000
 8002688:	40022000 	.word	0x40022000

0800268c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800268c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002690:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002692:	6800      	ldr	r0, [r0, #0]
{
 8002694:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002696:	07c3      	lsls	r3, r0, #31
 8002698:	d52a      	bpl.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800269a:	4b39      	ldr	r3, [pc, #228]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800269c:	69da      	ldr	r2, [r3, #28]
 800269e:	00d7      	lsls	r7, r2, #3
 80026a0:	d53d      	bpl.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a2:	4b38      	ldr	r3, [pc, #224]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    FlagStatus pwrclkchanged = RESET;
 80026a4:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	05d6      	lsls	r6, r2, #23
 80026aa:	d546      	bpl.n	800273a <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026ac:	4e34      	ldr	r6, [pc, #208]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80026ae:	6a33      	ldr	r3, [r6, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026b0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80026b4:	d00f      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80026b6:	6861      	ldr	r1, [r4, #4]
 80026b8:	f401 7240 	and.w	r2, r1, #768	; 0x300
 80026bc:	429a      	cmp	r2, r3
 80026be:	d00b      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026c0:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026c2:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026c4:	6a33      	ldr	r3, [r6, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80026c6:	4a30      	ldr	r2, [pc, #192]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026c8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80026cc:	6017      	str	r7, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026ce:	6010      	str	r0, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026d0:	6231      	str	r1, [r6, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026d2:	07d9      	lsls	r1, r3, #31
 80026d4:	d445      	bmi.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 80026d6:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026d8:	4a29      	ldr	r2, [pc, #164]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80026da:	6a13      	ldr	r3, [r2, #32]
 80026dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e0:	430b      	orrs	r3, r1
 80026e2:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026e4:	b11d      	cbz	r5, 80026ee <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e6:	69d3      	ldr	r3, [r2, #28]
 80026e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ec:	61d3      	str	r3, [r2, #28]
 80026ee:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026f0:	0783      	lsls	r3, r0, #30
 80026f2:	d506      	bpl.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026f4:	4922      	ldr	r1, [pc, #136]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80026f6:	68a3      	ldr	r3, [r4, #8]
 80026f8:	684a      	ldr	r2, [r1, #4]
 80026fa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80026fe:	431a      	orrs	r2, r3
 8002700:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002702:	f010 0010 	ands.w	r0, r0, #16
 8002706:	d007      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002708:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800270a:	4a1d      	ldr	r2, [pc, #116]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800270c:	6961      	ldr	r1, [r4, #20]
 800270e:	6853      	ldr	r3, [r2, #4]
 8002710:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002714:	430b      	orrs	r3, r1
 8002716:	6053      	str	r3, [r2, #4]
}
 8002718:	b002      	add	sp, #8
 800271a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800271e:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8002720:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002722:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002726:	61da      	str	r2, [r3, #28]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002732:	4b14      	ldr	r3, [pc, #80]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	05d6      	lsls	r6, r2, #23
 8002738:	d4b8      	bmi.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273a:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273c:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002742:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002744:	f7fe fb4e 	bl	8000de4 <HAL_GetTick>
 8002748:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	05d8      	lsls	r0, r3, #23
 800274e:	d4ad      	bmi.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002750:	f7fe fb48 	bl	8000de4 <HAL_GetTick>
 8002754:	1b83      	subs	r3, r0, r6
 8002756:	2b64      	cmp	r3, #100	; 0x64
 8002758:	d9f7      	bls.n	800274a <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 800275a:	2003      	movs	r0, #3
}
 800275c:	b002      	add	sp, #8
 800275e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 8002762:	f7fe fb3f 	bl	8000de4 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002766:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800276a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276c:	e004      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0xec>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7fe fb39 	bl	8000de4 <HAL_GetTick>
 8002772:	1bc0      	subs	r0, r0, r7
 8002774:	4540      	cmp	r0, r8
 8002776:	d8f0      	bhi.n	800275a <HAL_RCCEx_PeriphCLKConfig+0xce>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002778:	6a33      	ldr	r3, [r6, #32]
 800277a:	079a      	lsls	r2, r3, #30
 800277c:	d5f7      	bpl.n	800276e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800277e:	e7aa      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8002780:	40021000 	.word	0x40021000
 8002784:	40007000 	.word	0x40007000
 8002788:	42420440 	.word	0x42420440

0800278c <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800278c:	2800      	cmp	r0, #0
 800278e:	d055      	beq.n	800283c <HAL_SPI_Init+0xb0>
{
 8002790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002792:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002794:	4604      	mov	r4, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d041      	beq.n	800281e <HAL_SPI_Init+0x92>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800279a:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800279c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027a0:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027a2:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027a6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80027a8:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 80027ac:	2900      	cmp	r1, #0
 80027ae:	d03c      	beq.n	800282a <HAL_SPI_Init+0x9e>
 80027b0:	461a      	mov	r2, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027b2:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 80027b6:	2702      	movs	r7, #2
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 80027b8:	2601      	movs	r6, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027ba:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027bc:	68e1      	ldr	r1, [r4, #12]
 80027be:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 80027c2:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80027c6:	4303      	orrs	r3, r0
 80027c8:	6920      	ldr	r0, [r4, #16]
 80027ca:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 80027ce:	4038      	ands	r0, r7
 80027d0:	430b      	orrs	r3, r1
 80027d2:	6961      	ldr	r1, [r4, #20]
 80027d4:	4303      	orrs	r3, r0
 80027d6:	69a0      	ldr	r0, [r4, #24]
 80027d8:	4031      	ands	r1, r6
 80027da:	430b      	orrs	r3, r1
 80027dc:	f400 7100 	and.w	r1, r0, #512	; 0x200
 80027e0:	430b      	orrs	r3, r1
 80027e2:	69e1      	ldr	r1, [r4, #28]
  hspi->State = HAL_SPI_STATE_BUSY;
 80027e4:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027e8:	6a27      	ldr	r7, [r4, #32]
 80027ea:	f001 0138 	and.w	r1, r1, #56	; 0x38
 80027ee:	430b      	orrs	r3, r1
 80027f0:	f007 0780 	and.w	r7, r7, #128	; 0x80
  __HAL_SPI_DISABLE(hspi);
 80027f4:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027f6:	433b      	orrs	r3, r7
 80027f8:	4313      	orrs	r3, r2
  __HAL_SPI_DISABLE(hspi);
 80027fa:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80027fc:	0c00      	lsrs	r0, r0, #16
 80027fe:	f000 0004 	and.w	r0, r0, #4
  __HAL_SPI_DISABLE(hspi);
 8002802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002806:	600a      	str	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002808:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800280a:	6048      	str	r0, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800280c:	69cb      	ldr	r3, [r1, #28]

  return HAL_OK;
 800280e:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002810:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002814:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002816:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002818:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
}
 800281c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800281e:	6842      	ldr	r2, [r0, #4]
 8002820:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002824:	d0bc      	beq.n	80027a0 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002826:	61c3      	str	r3, [r0, #28]
 8002828:	e7ba      	b.n	80027a0 <HAL_SPI_Init+0x14>
    hspi->Lock = HAL_UNLOCKED;
 800282a:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800282e:	4620      	mov	r0, r4
 8002830:	f004 f9dc 	bl	8006bec <HAL_SPI_MspInit>
 8002834:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002836:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800283a:	e7ba      	b.n	80027b2 <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 800283c:	2001      	movs	r0, #1
}
 800283e:	4770      	bx	lr

08002840 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002840:	2800      	cmp	r0, #0
 8002842:	d064      	beq.n	800290e <HAL_TIM_Base_Init+0xce>
{
 8002844:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002846:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800284a:	4604      	mov	r4, r0
 800284c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002850:	2b00      	cmp	r3, #0
 8002852:	d057      	beq.n	8002904 <HAL_TIM_Base_Init+0xc4>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002854:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002856:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002858:	492e      	ldr	r1, [pc, #184]	; (8002914 <HAL_TIM_Base_Init+0xd4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800285a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800285e:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8002860:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002862:	d024      	beq.n	80028ae <HAL_TIM_Base_Init+0x6e>
 8002864:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002868:	428a      	cmp	r2, r1
 800286a:	d020      	beq.n	80028ae <HAL_TIM_Base_Init+0x6e>
 800286c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002870:	d00b      	beq.n	800288a <HAL_TIM_Base_Init+0x4a>
 8002872:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8002876:	428a      	cmp	r2, r1
 8002878:	d007      	beq.n	800288a <HAL_TIM_Base_Init+0x4a>
 800287a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800287e:	428a      	cmp	r2, r1
 8002880:	d003      	beq.n	800288a <HAL_TIM_Base_Init+0x4a>
 8002882:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002886:	428a      	cmp	r2, r1
 8002888:	d107      	bne.n	800289a <HAL_TIM_Base_Init+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800288a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800288c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002890:	430b      	orrs	r3, r1

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002892:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002898:	430b      	orrs	r3, r1
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800289a:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800289c:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800289e:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028a4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80028a6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028a8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80028aa:	6291      	str	r1, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028ac:	e012      	b.n	80028d4 <HAL_TIM_Base_Init+0x94>
    tmpcr1 |= Structure->CounterMode;
 80028ae:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80028b4:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028b6:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80028b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028bc:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028be:	69a1      	ldr	r1, [r4, #24]
 80028c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028c4:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80028c6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028c8:	68e3      	ldr	r3, [r4, #12]
 80028ca:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80028cc:	6863      	ldr	r3, [r4, #4]
 80028ce:	6293      	str	r3, [r2, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028d0:	6963      	ldr	r3, [r4, #20]
 80028d2:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028d4:	2301      	movs	r3, #1
 80028d6:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028d8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80028e0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80028e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80028e8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028f4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80028f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80028fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002900:	2000      	movs	r0, #0
}
 8002902:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 8002904:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002908:	f004 f9aa 	bl	8006c60 <HAL_TIM_Base_MspInit>
 800290c:	e7a2      	b.n	8002854 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 800290e:	2001      	movs	r0, #1
}
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	40012c00 	.word	0x40012c00

08002918 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002918:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800291c:	2b01      	cmp	r3, #1
 800291e:	d127      	bne.n	8002970 <HAL_TIM_Base_Start_IT+0x58>
  htim->State = HAL_TIM_STATE_BUSY;
 8002920:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002922:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002924:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002928:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800292a:	4913      	ldr	r1, [pc, #76]	; (8002978 <HAL_TIM_Base_Start_IT+0x60>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800292c:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002930:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002932:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002934:	d011      	beq.n	800295a <HAL_TIM_Base_Start_IT+0x42>
 8002936:	4a11      	ldr	r2, [pc, #68]	; (800297c <HAL_TIM_Base_Start_IT+0x64>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d00e      	beq.n	800295a <HAL_TIM_Base_Start_IT+0x42>
 800293c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002940:	d00b      	beq.n	800295a <HAL_TIM_Base_Start_IT+0x42>
 8002942:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002946:	4293      	cmp	r3, r2
 8002948:	d007      	beq.n	800295a <HAL_TIM_Base_Start_IT+0x42>
 800294a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800294e:	4293      	cmp	r3, r2
 8002950:	d003      	beq.n	800295a <HAL_TIM_Base_Start_IT+0x42>
 8002952:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002956:	4293      	cmp	r3, r2
 8002958:	d104      	bne.n	8002964 <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002960:	2a06      	cmp	r2, #6
 8002962:	d007      	beq.n	8002974 <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 8002964:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8002966:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8002968:	f042 0201 	orr.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	4770      	bx	lr
    return HAL_ERROR;
 8002970:	2001      	movs	r0, #1
 8002972:	4770      	bx	lr
  return HAL_OK;
 8002974:	2000      	movs	r0, #0
}
 8002976:	4770      	bx	lr
 8002978:	40012c00 	.word	0x40012c00
 800297c:	40013400 	.word	0x40013400

08002980 <HAL_TIM_IC_MspInit>:
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop

08002984 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8002984:	2800      	cmp	r0, #0
 8002986:	d064      	beq.n	8002a52 <HAL_TIM_IC_Init+0xce>
{
 8002988:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800298a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800298e:	4604      	mov	r4, r0
 8002990:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002994:	2b00      	cmp	r3, #0
 8002996:	d057      	beq.n	8002a48 <HAL_TIM_IC_Init+0xc4>
  htim->State = HAL_TIM_STATE_BUSY;
 8002998:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800299a:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800299c:	492e      	ldr	r1, [pc, #184]	; (8002a58 <HAL_TIM_IC_Init+0xd4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800299e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029a2:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80029a4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029a6:	d024      	beq.n	80029f2 <HAL_TIM_IC_Init+0x6e>
 80029a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80029ac:	428a      	cmp	r2, r1
 80029ae:	d020      	beq.n	80029f2 <HAL_TIM_IC_Init+0x6e>
 80029b0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80029b4:	d00b      	beq.n	80029ce <HAL_TIM_IC_Init+0x4a>
 80029b6:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 80029ba:	428a      	cmp	r2, r1
 80029bc:	d007      	beq.n	80029ce <HAL_TIM_IC_Init+0x4a>
 80029be:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80029c2:	428a      	cmp	r2, r1
 80029c4:	d003      	beq.n	80029ce <HAL_TIM_IC_Init+0x4a>
 80029c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80029ca:	428a      	cmp	r2, r1
 80029cc:	d107      	bne.n	80029de <HAL_TIM_IC_Init+0x5a>
    tmpcr1 |= Structure->CounterMode;
 80029ce:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80029d4:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029d6:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80029d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029dc:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029de:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029e0:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80029e2:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029e8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80029ea:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029ec:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80029ee:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029f0:	e012      	b.n	8002a18 <HAL_TIM_IC_Init+0x94>
    tmpcr1 |= Structure->CounterMode;
 80029f2:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80029f8:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029fa:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80029fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a00:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a02:	69a1      	ldr	r1, [r4, #24]
 8002a04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a08:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002a0a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a0c:	68e3      	ldr	r3, [r4, #12]
 8002a0e:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002a10:	6863      	ldr	r3, [r4, #4]
 8002a12:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002a14:	6963      	ldr	r3, [r4, #20]
 8002a16:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a1c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a20:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002a24:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002a28:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002a2c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a38:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002a3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002a40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002a44:	2000      	movs	r0, #0
}
 8002a46:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 8002a48:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8002a4c:	f7ff ff98 	bl	8002980 <HAL_TIM_IC_MspInit>
 8002a50:	e7a2      	b.n	8002998 <HAL_TIM_IC_Init+0x14>
    return HAL_ERROR;
 8002a52:	2001      	movs	r0, #1
}
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40012c00 	.word	0x40012c00

08002a5c <HAL_TIM_IC_Start_IT>:
{
 8002a5c:	b410      	push	{r4}
 8002a5e:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002a60:	2900      	cmp	r1, #0
 8002a62:	d148      	bne.n	8002af6 <HAL_TIM_IC_Start_IT+0x9a>
 8002a64:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002a68:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002a6c:	b2d8      	uxtb	r0, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002a6e:	b2d3      	uxtb	r3, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a70:	2801      	cmp	r0, #1
 8002a72:	d103      	bne.n	8002a7c <HAL_TIM_IC_Start_IT+0x20>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d004      	beq.n	8002a82 <HAL_TIM_IC_Start_IT+0x26>
}
 8002a78:	bc10      	pop	{r4}
 8002a7a:	4770      	bx	lr
    return HAL_ERROR;
 8002a7c:	2001      	movs	r0, #1
}
 8002a7e:	bc10      	pop	{r4}
 8002a80:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a82:	2900      	cmp	r1, #0
 8002a84:	d146      	bne.n	8002b14 <HAL_TIM_IC_Start_IT+0xb8>
 8002a86:	2302      	movs	r3, #2
 8002a88:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	f042 0202 	orr.w	r2, r2, #2
 8002a98:	60da      	str	r2, [r3, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a9a:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a9c:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a9e:	f001 011f 	and.w	r1, r1, #31
 8002aa2:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 8002aa6:	ea20 0001 	bic.w	r0, r0, r1
 8002aaa:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002aac:	6a18      	ldr	r0, [r3, #32]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aae:	4a41      	ldr	r2, [pc, #260]	; (8002bb4 <HAL_TIM_IC_Start_IT+0x158>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ab0:	4301      	orrs	r1, r0
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab2:	4293      	cmp	r3, r2
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ab4:	6219      	str	r1, [r3, #32]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab6:	d012      	beq.n	8002ade <HAL_TIM_IC_Start_IT+0x82>
 8002ab8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d00e      	beq.n	8002ade <HAL_TIM_IC_Start_IT+0x82>
 8002ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac4:	d00b      	beq.n	8002ade <HAL_TIM_IC_Start_IT+0x82>
 8002ac6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d007      	beq.n	8002ade <HAL_TIM_IC_Start_IT+0x82>
 8002ace:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d003      	beq.n	8002ade <HAL_TIM_IC_Start_IT+0x82>
 8002ad6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d104      	bne.n	8002ae8 <HAL_TIM_IC_Start_IT+0x8c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae4:	2a06      	cmp	r2, #6
 8002ae6:	d057      	beq.n	8002b98 <HAL_TIM_IC_Start_IT+0x13c>
    __HAL_TIM_ENABLE(htim);
 8002ae8:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8002aea:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8002aec:	f042 0201 	orr.w	r2, r2, #1
}
 8002af0:	bc10      	pop	{r4}
    __HAL_TIM_ENABLE(htim);
 8002af2:	601a      	str	r2, [r3, #0]
}
 8002af4:	4770      	bx	lr
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002af6:	2904      	cmp	r1, #4
 8002af8:	d047      	beq.n	8002b8a <HAL_TIM_IC_Start_IT+0x12e>
 8002afa:	2908      	cmp	r1, #8
 8002afc:	bf0b      	itete	eq
 8002afe:	f890 3040 	ldrbeq.w	r3, [r0, #64]	; 0x40
 8002b02:	f890 3041 	ldrbne.w	r3, [r0, #65]	; 0x41
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002b06:	f890 2044 	ldrbeq.w	r2, [r0, #68]	; 0x44
 8002b0a:	f890 2045 	ldrbne.w	r2, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002b0e:	b2d8      	uxtb	r0, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002b10:	b2d3      	uxtb	r3, r2
 8002b12:	e7ad      	b.n	8002a70 <HAL_TIM_IC_Start_IT+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b14:	2904      	cmp	r1, #4
 8002b16:	d027      	beq.n	8002b68 <HAL_TIM_IC_Start_IT+0x10c>
 8002b18:	2908      	cmp	r1, #8
 8002b1a:	d03f      	beq.n	8002b9c <HAL_TIM_IC_Start_IT+0x140>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  switch (Channel)
 8002b26:	290c      	cmp	r1, #12
 8002b28:	d81c      	bhi.n	8002b64 <HAL_TIM_IC_Start_IT+0x108>
 8002b2a:	a301      	add	r3, pc, #4	; (adr r3, 8002b30 <HAL_TIM_IC_Start_IT+0xd4>)
 8002b2c:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8002b30:	08002a91 	.word	0x08002a91
 8002b34:	08002b65 	.word	0x08002b65
 8002b38:	08002b65 	.word	0x08002b65
 8002b3c:	08002b65 	.word	0x08002b65
 8002b40:	08002b73 	.word	0x08002b73
 8002b44:	08002b65 	.word	0x08002b65
 8002b48:	08002b65 	.word	0x08002b65
 8002b4c:	08002b65 	.word	0x08002b65
 8002b50:	08002b65 	.word	0x08002b65
 8002b54:	08002b65 	.word	0x08002b65
 8002b58:	08002b65 	.word	0x08002b65
 8002b5c:	08002b65 	.word	0x08002b65
 8002b60:	08002b7f 	.word	0x08002b7f
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	e798      	b.n	8002a9a <HAL_TIM_IC_Start_IT+0x3e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b68:	2302      	movs	r3, #2
 8002b6a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	f042 0204 	orr.w	r2, r2, #4
 8002b7a:	60da      	str	r2, [r3, #12]
      break;
 8002b7c:	e78d      	b.n	8002a9a <HAL_TIM_IC_Start_IT+0x3e>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	f042 0210 	orr.w	r2, r2, #16
 8002b86:	60da      	str	r2, [r3, #12]
      break;
 8002b88:	e787      	b.n	8002a9a <HAL_TIM_IC_Start_IT+0x3e>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002b8a:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002b8e:	f890 2043 	ldrb.w	r2, [r0, #67]	; 0x43
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002b92:	b2d8      	uxtb	r0, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002b94:	b2d3      	uxtb	r3, r2
 8002b96:	e76b      	b.n	8002a70 <HAL_TIM_IC_Start_IT+0x14>
  return HAL_OK;
 8002b98:	2000      	movs	r0, #0
 8002b9a:	e76d      	b.n	8002a78 <HAL_TIM_IC_Start_IT+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b9c:	2202      	movs	r2, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002b9e:	6823      	ldr	r3, [r4, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ba0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ba4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	f042 0208 	orr.w	r2, r2, #8
 8002bae:	60da      	str	r2, [r3, #12]
      break;
 8002bb0:	e773      	b.n	8002a9a <HAL_TIM_IC_Start_IT+0x3e>
 8002bb2:	bf00      	nop
 8002bb4:	40012c00 	.word	0x40012c00

08002bb8 <HAL_TIM_IC_ConfigChannel>:
  __HAL_LOCK(htim);
 8002bb8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	f000 80c2 	beq.w	8002d46 <HAL_TIM_IC_ConfigChannel+0x18e>
 8002bc2:	2301      	movs	r3, #1
{
 8002bc4:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8002bc6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    TIM_TI1_SetConfig(htim->Instance,
 8002bca:	6803      	ldr	r3, [r0, #0]
  if (Channel == TIM_CHANNEL_1)
 8002bcc:	b36a      	cbz	r2, 8002c2a <HAL_TIM_IC_ConfigChannel+0x72>
  else if (Channel == TIM_CHANNEL_2)
 8002bce:	2a04      	cmp	r2, #4
 8002bd0:	d06b      	beq.n	8002caa <HAL_TIM_IC_ConfigChannel+0xf2>
  else if (Channel == TIM_CHANNEL_3)
 8002bd2:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bd4:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI3_SetConfig(htim->Instance,
 8002bd6:	680a      	ldr	r2, [r1, #0]
  else if (Channel == TIM_CHANNEL_3)
 8002bd8:	f000 8090 	beq.w	8002cfc <HAL_TIM_IC_ConfigChannel+0x144>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bdc:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
    TIM_TI4_SetConfig(htim->Instance,
 8002be0:	684f      	ldr	r7, [r1, #4]
 8002be2:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002be4:	621e      	str	r6, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002be6:	69dd      	ldr	r5, [r3, #28]
  tmpccer = TIMx->CCER;
 8002be8:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002bea:	f425 7540 	bic.w	r5, r5, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002bee:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002bf2:	0312      	lsls	r2, r2, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002bf4:	0324      	lsls	r4, r4, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002bf6:	f425 4570 	bic.w	r5, r5, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC4P);
 8002bfa:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002bfe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002c02:	b2a4      	uxth	r4, r4
 8002c04:	432c      	orrs	r4, r5
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002c06:	4332      	orrs	r2, r6
  TIMx->CCMR2 = tmpccmr2;
 8002c08:	61dc      	str	r4, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002c0a:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002c0c:	69dc      	ldr	r4, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002c0e:	688d      	ldr	r5, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002c10:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
 8002c14:	61dc      	str	r4, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002c16:	69da      	ldr	r2, [r3, #28]
 8002c18:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8002c1c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8002c24:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8002c26:	4618      	mov	r0, r3
}
 8002c28:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c2a:	6a1e      	ldr	r6, [r3, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002c2c:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8002d4c <HAL_TIM_IC_ConfigChannel+0x194>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c30:	f026 0601 	bic.w	r6, r6, #1
    TIM_TI1_SetConfig(htim->Instance,
 8002c34:	680c      	ldr	r4, [r1, #0]
 8002c36:	684d      	ldr	r5, [r1, #4]
 8002c38:	68ca      	ldr	r2, [r1, #12]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002c3a:	4563      	cmp	r3, ip
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c3c:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c3e:	699f      	ldr	r7, [r3, #24]
  tmpccer = TIMx->CCER;
 8002c40:	6a1e      	ldr	r6, [r3, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002c42:	d015      	beq.n	8002c70 <HAL_TIM_IC_ConfigChannel+0xb8>
 8002c44:	f50c 6c00 	add.w	ip, ip, #2048	; 0x800
 8002c48:	4563      	cmp	r3, ip
 8002c4a:	d011      	beq.n	8002c70 <HAL_TIM_IC_ConfigChannel+0xb8>
 8002c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c50:	d00e      	beq.n	8002c70 <HAL_TIM_IC_ConfigChannel+0xb8>
 8002c52:	f5ac 3c98 	sub.w	ip, ip, #77824	; 0x13000
 8002c56:	4563      	cmp	r3, ip
 8002c58:	d00a      	beq.n	8002c70 <HAL_TIM_IC_ConfigChannel+0xb8>
 8002c5a:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 8002c5e:	4563      	cmp	r3, ip
 8002c60:	d006      	beq.n	8002c70 <HAL_TIM_IC_ConfigChannel+0xb8>
 8002c62:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 8002c66:	4563      	cmp	r3, ip
 8002c68:	d002      	beq.n	8002c70 <HAL_TIM_IC_ConfigChannel+0xb8>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002c6a:	f047 0501 	orr.w	r5, r7, #1
 8002c6e:	e002      	b.n	8002c76 <HAL_TIM_IC_ConfigChannel+0xbe>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002c70:	f027 0703 	bic.w	r7, r7, #3
    tmpccmr1 |= TIM_ICSelection;
 8002c74:	433d      	orrs	r5, r7
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002c76:	0112      	lsls	r2, r2, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c78:	f025 05f0 	bic.w	r5, r5, #240	; 0xf0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c7c:	f026 060a 	bic.w	r6, r6, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002c80:	b2d2      	uxtb	r2, r2
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002c82:	f004 040a 	and.w	r4, r4, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002c86:	432a      	orrs	r2, r5
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002c88:	4334      	orrs	r4, r6
  TIMx->CCMR1 = tmpccmr1;
 8002c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c8c:	621c      	str	r4, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002c8e:	699c      	ldr	r4, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002c90:	688d      	ldr	r5, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002c92:	f024 040c 	bic.w	r4, r4, #12
 8002c96:	619c      	str	r4, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002c98:	699a      	ldr	r2, [r3, #24]
 8002c9a:	432a      	orrs	r2, r5
 8002c9c:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8002ca4:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8002ca6:	4618      	mov	r0, r3
}
 8002ca8:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002caa:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI2_SetConfig(htim->Instance,
 8002cac:	684f      	ldr	r7, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cae:	f026 0610 	bic.w	r6, r6, #16
    TIM_TI2_SetConfig(htim->Instance,
 8002cb2:	680a      	ldr	r2, [r1, #0]
 8002cb4:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cb6:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cb8:	699d      	ldr	r5, [r3, #24]
  tmpccer = TIMx->CCER;
 8002cba:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002cbc:	f425 7540 	bic.w	r5, r5, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002cc0:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002cc4:	0112      	lsls	r2, r2, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002cc6:	0324      	lsls	r4, r4, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cc8:	f425 4570 	bic.w	r5, r5, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ccc:	f026 06a0 	bic.w	r6, r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002cd0:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002cd4:	b2a4      	uxth	r4, r4
 8002cd6:	432c      	orrs	r4, r5
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002cd8:	4332      	orrs	r2, r6
  TIMx->CCMR1 = tmpccmr1 ;
 8002cda:	619c      	str	r4, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cdc:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002cde:	699c      	ldr	r4, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002ce0:	688d      	ldr	r5, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002ce2:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
 8002ce6:	619c      	str	r4, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002ce8:	699a      	ldr	r2, [r3, #24]
 8002cea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8002cee:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8002cf6:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8002cf8:	4618      	mov	r0, r3
}
 8002cfa:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cfc:	f426 7680 	bic.w	r6, r6, #256	; 0x100
    TIM_TI3_SetConfig(htim->Instance,
 8002d00:	684d      	ldr	r5, [r1, #4]
 8002d02:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d04:	621e      	str	r6, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d06:	69df      	ldr	r7, [r3, #28]
  tmpccer = TIMx->CCER;
 8002d08:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002d0a:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= TIM_ICSelection;
 8002d0e:	433d      	orrs	r5, r7
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002d10:	0212      	lsls	r2, r2, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002d12:	0124      	lsls	r4, r4, #4
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002d14:	f025 05f0 	bic.w	r5, r5, #240	; 0xf0
  tmpccer &= ~(TIM_CCER_CC3P);
 8002d18:	f426 7600 	bic.w	r6, r6, #512	; 0x200
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002d1c:	f402 7200 	and.w	r2, r2, #512	; 0x200
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002d20:	b2e4      	uxtb	r4, r4
 8002d22:	432c      	orrs	r4, r5
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002d24:	4332      	orrs	r2, r6
  TIMx->CCMR2 = tmpccmr2;
 8002d26:	61dc      	str	r4, [r3, #28]
  TIMx->CCER = tmpccer;
 8002d28:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002d2a:	69dc      	ldr	r4, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002d2c:	688d      	ldr	r5, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002d2e:	f024 040c 	bic.w	r4, r4, #12
 8002d32:	61dc      	str	r4, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002d34:	69da      	ldr	r2, [r3, #28]
 8002d36:	432a      	orrs	r2, r5
 8002d38:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8002d40:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8002d42:	4618      	mov	r0, r3
}
 8002d44:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002d46:	2002      	movs	r0, #2
}
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40012c00 	.word	0x40012c00

08002d50 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002d50:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d074      	beq.n	8002e42 <HAL_TIM_ConfigClockSource+0xf2>
{
 8002d58:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8002d5a:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8002d5c:	2401      	movs	r4, #1
  tmpsmcr = htim->Instance->SMCR;
 8002d5e:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 8002d60:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002d64:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002d68:	6894      	ldr	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002d6a:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d6c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8002d70:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8002d74:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8002d76:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002d78:	d065      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0xf6>
 8002d7a:	d831      	bhi.n	8002de0 <HAL_TIM_ConfigClockSource+0x90>
 8002d7c:	2b40      	cmp	r3, #64	; 0x40
 8002d7e:	d048      	beq.n	8002e12 <HAL_TIM_ConfigClockSource+0xc2>
 8002d80:	d921      	bls.n	8002dc6 <HAL_TIM_ConfigClockSource+0x76>
 8002d82:	2b50      	cmp	r3, #80	; 0x50
 8002d84:	d116      	bne.n	8002db4 <HAL_TIM_ConfigClockSource+0x64>
  tmpccer = TIMx->CCER;
 8002d86:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d88:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d8a:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d8c:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d90:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d92:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d94:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d96:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d9e:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002da2:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8002da4:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8002da6:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8002da8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dae:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002db2:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 8002db4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002db6:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8002db8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8002dbc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
}
 8002dc0:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8002dc2:	4618      	mov	r0, r3
}
 8002dc4:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8002dc6:	2b20      	cmp	r3, #32
 8002dc8:	d002      	beq.n	8002dd0 <HAL_TIM_ConfigClockSource+0x80>
 8002dca:	d91e      	bls.n	8002e0a <HAL_TIM_ConfigClockSource+0xba>
 8002dcc:	2b30      	cmp	r3, #48	; 0x30
 8002dce:	d1f1      	bne.n	8002db4 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8002dd0:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dd2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dd6:	430b      	orrs	r3, r1
 8002dd8:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8002ddc:	6093      	str	r3, [r2, #8]
}
 8002dde:	e7e9      	b.n	8002db4 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8002de0:	2b70      	cmp	r3, #112	; 0x70
 8002de2:	d049      	beq.n	8002e78 <HAL_TIM_ConfigClockSource+0x128>
 8002de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de8:	d1e4      	bne.n	8002db4 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dea:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8002dee:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8002df0:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002df2:	432b      	orrs	r3, r5
 8002df4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002df8:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dfc:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002dfe:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e00:	6893      	ldr	r3, [r2, #8]
 8002e02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e06:	6093      	str	r3, [r2, #8]
      break;
 8002e08:	e7d4      	b.n	8002db4 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8002e0a:	f033 0110 	bics.w	r1, r3, #16
 8002e0e:	d1d1      	bne.n	8002db4 <HAL_TIM_ConfigClockSource+0x64>
 8002e10:	e7de      	b.n	8002dd0 <HAL_TIM_ConfigClockSource+0x80>
  tmpccer = TIMx->CCER;
 8002e12:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e14:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e16:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e18:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e1c:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e1e:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e20:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e22:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e2a:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002e2e:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8002e30:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8002e32:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8002e34:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e3a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8002e3e:	6093      	str	r3, [r2, #8]
}
 8002e40:	e7b8      	b.n	8002db4 <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 8002e42:	2002      	movs	r0, #2
}
 8002e44:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e46:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e48:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e4a:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e4e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e50:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e52:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8002e54:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e56:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e5e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e62:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002e66:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8002e68:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8002e6a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e70:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8002e74:	6093      	str	r3, [r2, #8]
}
 8002e76:	e79d      	b.n	8002db4 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e78:	68cc      	ldr	r4, [r1, #12]
 8002e7a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002e7e:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e80:	432b      	orrs	r3, r5
 8002e82:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e86:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e8a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002e8c:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002e8e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002e94:	6093      	str	r3, [r2, #8]
      break;
 8002e96:	e78d      	b.n	8002db4 <HAL_TIM_ConfigClockSource+0x64>

08002e98 <HAL_TIM_OC_DelayElapsedCallback>:
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop

08002e9c <HAL_TIM_PWM_PulseFinishedCallback>:
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop

08002ea0 <HAL_TIM_TriggerCallback>:
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop

08002ea4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ea4:	6803      	ldr	r3, [r0, #0]
{
 8002ea6:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ea8:	691a      	ldr	r2, [r3, #16]
{
 8002eaa:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002eac:	0791      	lsls	r1, r2, #30
 8002eae:	d502      	bpl.n	8002eb6 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	0792      	lsls	r2, r2, #30
 8002eb4:	d45f      	bmi.n	8002f76 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	0750      	lsls	r0, r2, #29
 8002eba:	d502      	bpl.n	8002ec2 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	0751      	lsls	r1, r2, #29
 8002ec0:	d446      	bmi.n	8002f50 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	0712      	lsls	r2, r2, #28
 8002ec6:	d502      	bpl.n	8002ece <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	0710      	lsls	r0, r2, #28
 8002ecc:	d42e      	bmi.n	8002f2c <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	06d2      	lsls	r2, r2, #27
 8002ed2:	d502      	bpl.n	8002eda <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	06d0      	lsls	r0, r2, #27
 8002ed8:	d418      	bmi.n	8002f0c <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	07d1      	lsls	r1, r2, #31
 8002ede:	d502      	bpl.n	8002ee6 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	07d2      	lsls	r2, r2, #31
 8002ee4:	d45d      	bmi.n	8002fa2 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	0610      	lsls	r0, r2, #24
 8002eea:	d502      	bpl.n	8002ef2 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	0611      	lsls	r1, r2, #24
 8002ef0:	d45f      	bmi.n	8002fb2 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	0652      	lsls	r2, r2, #25
 8002ef6:	d502      	bpl.n	8002efe <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	0650      	lsls	r0, r2, #25
 8002efc:	d461      	bmi.n	8002fc2 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002efe:	691a      	ldr	r2, [r3, #16]
 8002f00:	0691      	lsls	r1, r2, #26
 8002f02:	d502      	bpl.n	8002f0a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	0692      	lsls	r2, r2, #26
 8002f08:	d443      	bmi.n	8002f92 <HAL_TIM_IRQHandler+0xee>
}
 8002f0a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f0c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f10:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f12:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f14:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f16:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002f18:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f1a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002f1e:	d064      	beq.n	8002fea <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002f20:	f003 f8c2 	bl	80060a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f24:	2200      	movs	r2, #0
 8002f26:	6823      	ldr	r3, [r4, #0]
 8002f28:	7722      	strb	r2, [r4, #28]
 8002f2a:	e7d6      	b.n	8002eda <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f2c:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f30:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f32:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f34:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f36:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002f38:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f3a:	0799      	lsls	r1, r3, #30
 8002f3c:	d152      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3e:	f7ff ffab 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f42:	4620      	mov	r0, r4
 8002f44:	f7ff ffaa 	bl	8002e9c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f48:	2200      	movs	r2, #0
 8002f4a:	6823      	ldr	r3, [r4, #0]
 8002f4c:	7722      	strb	r2, [r4, #28]
 8002f4e:	e7be      	b.n	8002ece <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f50:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f54:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f56:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f58:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f5a:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f5e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002f62:	d13c      	bne.n	8002fde <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f64:	f7ff ff98 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f68:	4620      	mov	r0, r4
 8002f6a:	f7ff ff97 	bl	8002e9c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6e:	2200      	movs	r2, #0
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	7722      	strb	r2, [r4, #28]
 8002f74:	e7a5      	b.n	8002ec2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f76:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f7a:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f7c:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f7e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	079b      	lsls	r3, r3, #30
 8002f84:	d025      	beq.n	8002fd2 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002f86:	f003 f88f 	bl	80060a8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	6823      	ldr	r3, [r4, #0]
 8002f8e:	7722      	strb	r2, [r4, #28]
 8002f90:	e791      	b.n	8002eb6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f92:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002f96:	4620      	mov	r0, r4
}
 8002f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f9c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002f9e:	f000 b865 	b.w	800306c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fa2:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fa6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fa8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002faa:	f003 fb11 	bl	80065d0 <HAL_TIM_PeriodElapsedCallback>
 8002fae:	6823      	ldr	r3, [r4, #0]
 8002fb0:	e799      	b.n	8002ee6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fb2:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002fb6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fb8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002fba:	f000 f859 	bl	8003070 <HAL_TIMEx_BreakCallback>
 8002fbe:	6823      	ldr	r3, [r4, #0]
 8002fc0:	e797      	b.n	8002ef2 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002fc6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fc8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002fca:	f7ff ff69 	bl	8002ea0 <HAL_TIM_TriggerCallback>
 8002fce:	6823      	ldr	r3, [r4, #0]
 8002fd0:	e795      	b.n	8002efe <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd2:	f7ff ff61 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	f7ff ff60 	bl	8002e9c <HAL_TIM_PWM_PulseFinishedCallback>
 8002fdc:	e7d5      	b.n	8002f8a <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8002fde:	f003 f863 	bl	80060a8 <HAL_TIM_IC_CaptureCallback>
 8002fe2:	e7c4      	b.n	8002f6e <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe4:	f003 f860 	bl	80060a8 <HAL_TIM_IC_CaptureCallback>
 8002fe8:	e7ae      	b.n	8002f48 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fea:	f7ff ff55 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f7ff ff54 	bl	8002e9c <HAL_TIM_PWM_PulseFinishedCallback>
 8002ff4:	e796      	b.n	8002f24 <HAL_TIM_IRQHandler+0x80>
 8002ff6:	bf00      	nop

08002ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ff8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d02e      	beq.n	800305e <HAL_TIMEx_MasterConfigSynchronization+0x66>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003000:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003002:	6803      	ldr	r3, [r0, #0]
{
 8003004:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8003006:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800300a:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800300c:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800300e:	4d15      	ldr	r5, [pc, #84]	; (8003064 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8003010:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003014:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003016:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 8003018:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 800301a:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800301c:	d011      	beq.n	8003042 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 800301e:	4a12      	ldr	r2, [pc, #72]	; (8003068 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d00e      	beq.n	8003042 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8003024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003028:	d00b      	beq.n	8003042 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 800302a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800302e:	4293      	cmp	r3, r2
 8003030:	d007      	beq.n	8003042 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8003032:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003036:	4293      	cmp	r3, r2
 8003038:	d003      	beq.n	8003042 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 800303a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800303e:	4293      	cmp	r3, r2
 8003040:	d104      	bne.n	800304c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003042:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003044:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003048:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800304a:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800304c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800304e:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8003050:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8003054:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 8003058:	bc30      	pop	{r4, r5}
  return HAL_OK;
 800305a:	4618      	mov	r0, r3
}
 800305c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800305e:	2002      	movs	r0, #2
}
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40012c00 	.word	0x40012c00
 8003068:	40013400 	.word	0x40013400

0800306c <HAL_TIMEx_CommutCallback>:
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop

08003070 <HAL_TIMEx_BreakCallback>:
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop

08003074 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003074:	2800      	cmp	r0, #0
 8003076:	d061      	beq.n	800313c <HAL_UART_Init+0xc8>
{
 8003078:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800307a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800307e:	4604      	mov	r4, r0
 8003080:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003084:	2b00      	cmp	r3, #0
 8003086:	d051      	beq.n	800312c <HAL_UART_Init+0xb8>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003088:	2224      	movs	r2, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800308a:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800308c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8003090:	68da      	ldr	r2, [r3, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003092:	68e0      	ldr	r0, [r4, #12]
  __HAL_UART_DISABLE(huart);
 8003094:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003098:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800309a:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800309c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800309e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80030a2:	4301      	orrs	r1, r0
 80030a4:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 80030a6:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030a8:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 80030ac:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030b0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80030b2:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030b6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80030b8:	430a      	orrs	r2, r1
 80030ba:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	69a0      	ldr	r0, [r4, #24]


  if(huart->Instance == USART1)
 80030c0:	491f      	ldr	r1, [pc, #124]	; (8003140 <HAL_UART_Init+0xcc>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030c2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80030c6:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 80030c8:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030ca:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 80030cc:	d033      	beq.n	8003136 <HAL_UART_Init+0xc2>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030ce:	f7ff fa9d 	bl	800260c <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030d2:	6863      	ldr	r3, [r4, #4]
 80030d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80030d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e2:	2264      	movs	r2, #100	; 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e4:	2600      	movs	r6, #0
  huart->gState = HAL_UART_STATE_READY;
 80030e6:	2520      	movs	r5, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030e8:	4816      	ldr	r0, [pc, #88]	; (8003144 <HAL_UART_Init+0xd0>)
 80030ea:	fba0 c103 	umull	ip, r1, r0, r3
 80030ee:	0949      	lsrs	r1, r1, #5
 80030f0:	fb02 3311 	mls	r3, r2, r1, r3
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	3332      	adds	r3, #50	; 0x32
 80030f8:	fba0 2303 	umull	r2, r3, r0, r3
 80030fc:	0109      	lsls	r1, r1, #4
 80030fe:	6822      	ldr	r2, [r4, #0]
 8003100:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8003104:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003106:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 8003108:	4630      	mov	r0, r6
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800310a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800310e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003110:	6953      	ldr	r3, [r2, #20]
 8003112:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003116:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003118:	68d3      	ldr	r3, [r2, #12]
 800311a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800311e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003120:	6426      	str	r6, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003122:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003126:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 800312a:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800312c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8003130:	f003 fdf0 	bl	8006d14 <HAL_UART_MspInit>
 8003134:	e7a8      	b.n	8003088 <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 8003136:	f7ff fa79 	bl	800262c <HAL_RCC_GetPCLK2Freq>
 800313a:	e7ca      	b.n	80030d2 <HAL_UART_Init+0x5e>
    return HAL_ERROR;
 800313c:	2001      	movs	r0, #1
}
 800313e:	4770      	bx	lr
 8003140:	40013800 	.word	0x40013800
 8003144:	51eb851f 	.word	0x51eb851f

08003148 <HAL_UART_Transmit>:
{
 8003148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800314c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800314e:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8003152:	2820      	cmp	r0, #32
 8003154:	d168      	bne.n	8003228 <HAL_UART_Transmit+0xe0>
    if ((pData == NULL) || (Size == 0U))
 8003156:	4688      	mov	r8, r1
 8003158:	2900      	cmp	r1, #0
 800315a:	d040      	beq.n	80031de <HAL_UART_Transmit+0x96>
 800315c:	4617      	mov	r7, r2
 800315e:	2a00      	cmp	r2, #0
 8003160:	d03d      	beq.n	80031de <HAL_UART_Transmit+0x96>
 8003162:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 8003164:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003168:	2b01      	cmp	r3, #1
 800316a:	d05d      	beq.n	8003228 <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800316c:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 800316e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003170:	f04f 0900 	mov.w	r9, #0
    __HAL_LOCK(huart);
 8003174:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003178:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800317c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8003180:	f7fd fe30 	bl	8000de4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003184:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8003186:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 800318c:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800318e:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003190:	d04d      	beq.n	800322e <HAL_UART_Transmit+0xe6>
    __HAL_UNLOCK(huart);
 8003192:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8003194:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8003196:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 800319a:	b29b      	uxth	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d058      	beq.n	8003252 <HAL_UART_Transmit+0x10a>
 80031a0:	6822      	ldr	r2, [r4, #0]
 80031a2:	1c69      	adds	r1, r5, #1
 80031a4:	d11e      	bne.n	80031e4 <HAL_UART_Transmit+0x9c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031a6:	6813      	ldr	r3, [r2, #0]
 80031a8:	061b      	lsls	r3, r3, #24
 80031aa:	d5fc      	bpl.n	80031a6 <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 80031ac:	f1b8 0f00 	cmp.w	r8, #0
 80031b0:	d035      	beq.n	800321e <HAL_UART_Transmit+0xd6>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031b2:	f818 3b01 	ldrb.w	r3, [r8], #1
 80031b6:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80031b8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29b      	uxth	r3, r3
 80031be:	84e3      	strh	r3, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031c0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1ec      	bne.n	80031a2 <HAL_UART_Transmit+0x5a>
 80031c8:	1c68      	adds	r0, r5, #1
 80031ca:	d136      	bne.n	800323a <HAL_UART_Transmit+0xf2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031cc:	6813      	ldr	r3, [r2, #0]
 80031ce:	0659      	lsls	r1, r3, #25
 80031d0:	d5fc      	bpl.n	80031cc <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80031d2:	2320      	movs	r3, #32
 80031d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80031d8:	2000      	movs	r0, #0
}
 80031da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 80031de:	2001      	movs	r0, #1
}
 80031e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031e4:	6813      	ldr	r3, [r2, #0]
 80031e6:	061f      	lsls	r7, r3, #24
 80031e8:	d4e0      	bmi.n	80031ac <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031ea:	b12d      	cbz	r5, 80031f8 <HAL_UART_Transmit+0xb0>
 80031ec:	f7fd fdfa 	bl	8000de4 <HAL_GetTick>
 80031f0:	1b80      	subs	r0, r0, r6
 80031f2:	4285      	cmp	r5, r0
 80031f4:	6822      	ldr	r2, [r4, #0]
 80031f6:	d2d4      	bcs.n	80031a2 <HAL_UART_Transmit+0x5a>
        huart->gState  = HAL_UART_STATE_READY;
 80031f8:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 80031fa:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031fc:	68d3      	ldr	r3, [r2, #12]
      return HAL_TIMEOUT;
 80031fe:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003200:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003204:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003206:	6953      	ldr	r3, [r2, #20]
 8003208:	f023 0301 	bic.w	r3, r3, #1
 800320c:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800320e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8003212:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8003216:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
}
 800321a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800321e:	f839 3b02 	ldrh.w	r3, [r9], #2
 8003222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003226:	e7c6      	b.n	80031b6 <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 8003228:	2002      	movs	r0, #2
}
 800322a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800322e:	6923      	ldr	r3, [r4, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1ae      	bne.n	8003192 <HAL_UART_Transmit+0x4a>
 8003234:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8003236:	4698      	mov	r8, r3
 8003238:	e7ab      	b.n	8003192 <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800323a:	6813      	ldr	r3, [r2, #0]
 800323c:	065b      	lsls	r3, r3, #25
 800323e:	d4c8      	bmi.n	80031d2 <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003240:	2d00      	cmp	r5, #0
 8003242:	d0d9      	beq.n	80031f8 <HAL_UART_Transmit+0xb0>
 8003244:	f7fd fdce 	bl	8000de4 <HAL_GetTick>
 8003248:	1b80      	subs	r0, r0, r6
 800324a:	4285      	cmp	r5, r0
 800324c:	6822      	ldr	r2, [r4, #0]
 800324e:	d2bb      	bcs.n	80031c8 <HAL_UART_Transmit+0x80>
 8003250:	e7d2      	b.n	80031f8 <HAL_UART_Transmit+0xb0>
 8003252:	6822      	ldr	r2, [r4, #0]
 8003254:	e7b8      	b.n	80031c8 <HAL_UART_Transmit+0x80>
 8003256:	bf00      	nop

08003258 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003258:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800325c:	2b20      	cmp	r3, #32
 800325e:	d123      	bne.n	80032a8 <HAL_UART_Receive_IT+0x50>
    if ((pData == NULL) || (Size == 0U))
 8003260:	b301      	cbz	r1, 80032a4 <HAL_UART_Receive_IT+0x4c>
 8003262:	b1fa      	cbz	r2, 80032a4 <HAL_UART_Receive_IT+0x4c>
    __HAL_LOCK(huart);
 8003264:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003268:	2b01      	cmp	r3, #1
 800326a:	d01d      	beq.n	80032a8 <HAL_UART_Receive_IT+0x50>
{
 800326c:	b430      	push	{r4, r5}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800326e:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003270:	2522      	movs	r5, #34	; 0x22
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003272:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003274:	6303      	str	r3, [r0, #48]	; 0x30
  __HAL_UNLOCK(huart);
 8003276:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->RxXferCount = Size;
 800327a:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800327c:	6403      	str	r3, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800327e:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003282:	68e5      	ldr	r5, [r4, #12]
  huart->RxXferSize = Size;
 8003284:	8582      	strh	r2, [r0, #44]	; 0x2c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003286:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  huart->pRxBuffPtr = pData;
 800328a:	6281      	str	r1, [r0, #40]	; 0x28
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800328c:	60e5      	str	r5, [r4, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800328e:	6962      	ldr	r2, [r4, #20]
    return(UART_Start_Receive_IT(huart, pData, Size));
 8003290:	4618      	mov	r0, r3
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003292:	f042 0201 	orr.w	r2, r2, #1
 8003296:	6162      	str	r2, [r4, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003298:	68e3      	ldr	r3, [r4, #12]
 800329a:	f043 0320 	orr.w	r3, r3, #32
 800329e:	60e3      	str	r3, [r4, #12]
}
 80032a0:	bc30      	pop	{r4, r5}
 80032a2:	4770      	bx	lr
      return HAL_ERROR;
 80032a4:	2001      	movs	r0, #1
 80032a6:	4770      	bx	lr
    return HAL_BUSY;
 80032a8:	2002      	movs	r0, #2
}
 80032aa:	4770      	bx	lr

080032ac <HAL_UART_TxCpltCallback>:
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop

080032b0 <HAL_UART_RxCpltCallback>:
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop

080032b4 <HAL_UART_ErrorCallback>:
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop

080032b8 <UART_DMAAbortOnError>:
{
 80032b8:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80032ba:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032bc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80032be:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80032c0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80032c2:	f7ff fff7 	bl	80032b4 <HAL_UART_ErrorCallback>
}
 80032c6:	bd08      	pop	{r3, pc}

080032c8 <HAL_UARTEx_RxEventCallback>:
}
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop

080032cc <UART_Receive_IT.part.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032cc:	6883      	ldr	r3, [r0, #8]
 80032ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d2:	d03b      	beq.n	800334c <UART_Receive_IT.part.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032d4:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d02f      	beq.n	800333a <UART_Receive_IT.part.0+0x6e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032da:	6803      	ldr	r3, [r0, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032e2:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80032e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80032e6:	3301      	adds	r3, #1
 80032e8:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80032ea:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80032f2:	bb4b      	cbnz	r3, 8003348 <UART_Receive_IT.part.0+0x7c>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80032f4:	b510      	push	{r4, lr}
      huart->RxState = HAL_UART_STATE_READY;
 80032f6:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032f8:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80032fa:	b082      	sub	sp, #8
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032fc:	68d1      	ldr	r1, [r2, #12]
 80032fe:	f021 0120 	bic.w	r1, r1, #32
 8003302:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003304:	68d1      	ldr	r1, [r2, #12]
 8003306:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800330a:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800330c:	6951      	ldr	r1, [r2, #20]
 800330e:	f021 0101 	bic.w	r1, r1, #1
 8003312:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003314:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003318:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800331a:	2901      	cmp	r1, #1
 800331c:	d121      	bne.n	8003362 <UART_Receive_IT.part.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800331e:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003320:	68d1      	ldr	r1, [r2, #12]
 8003322:	f021 0110 	bic.w	r1, r1, #16
 8003326:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003328:	6811      	ldr	r1, [r2, #0]
 800332a:	06c9      	lsls	r1, r1, #27
 800332c:	d423      	bmi.n	8003376 <UART_Receive_IT.part.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800332e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003330:	f7ff ffca 	bl	80032c8 <HAL_UARTEx_RxEventCallback>
}
 8003334:	2000      	movs	r0, #0
 8003336:	b002      	add	sp, #8
 8003338:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800333a:	6903      	ldr	r3, [r0, #16]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1cc      	bne.n	80032da <UART_Receive_IT.part.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003340:	6803      	ldr	r3, [r0, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	7013      	strb	r3, [r2, #0]
 8003346:	e7cd      	b.n	80032e4 <UART_Receive_IT.part.0+0x18>
}
 8003348:	2000      	movs	r0, #0
 800334a:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800334c:	6903      	ldr	r3, [r0, #16]
 800334e:	b96b      	cbnz	r3, 800336c <UART_Receive_IT.part.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003350:	6802      	ldr	r2, [r0, #0]
 8003352:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003354:	6852      	ldr	r2, [r2, #4]
 8003356:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800335a:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 800335e:	6283      	str	r3, [r0, #40]	; 0x28
 8003360:	e7c3      	b.n	80032ea <UART_Receive_IT.part.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 8003362:	f7ff ffa5 	bl	80032b0 <HAL_UART_RxCpltCallback>
}
 8003366:	2000      	movs	r0, #0
 8003368:	b002      	add	sp, #8
 800336a:	bd10      	pop	{r4, pc}
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800336c:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800336e:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	7013      	strb	r3, [r2, #0]
 8003374:	e7b6      	b.n	80032e4 <UART_Receive_IT.part.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003376:	9301      	str	r3, [sp, #4]
 8003378:	6813      	ldr	r3, [r2, #0]
 800337a:	9301      	str	r3, [sp, #4]
 800337c:	6853      	ldr	r3, [r2, #4]
 800337e:	9301      	str	r3, [sp, #4]
 8003380:	9b01      	ldr	r3, [sp, #4]
 8003382:	e7d4      	b.n	800332e <UART_Receive_IT.part.0+0x62>

08003384 <HAL_UART_IRQHandler>:
{
 8003384:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003386:	6803      	ldr	r3, [r0, #0]
{
 8003388:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800338a:	681a      	ldr	r2, [r3, #0]
{
 800338c:	b082      	sub	sp, #8
  if (errorflags == RESET)
 800338e:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003390:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003392:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8003394:	d14e      	bne.n	8003434 <HAL_UART_IRQHandler+0xb0>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003396:	0696      	lsls	r6, r2, #26
 8003398:	d502      	bpl.n	80033a0 <HAL_UART_IRQHandler+0x1c>
 800339a:	068d      	lsls	r5, r1, #26
 800339c:	f100 8090 	bmi.w	80034c0 <HAL_UART_IRQHandler+0x13c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033a0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80033a2:	2801      	cmp	r0, #1
 80033a4:	d00b      	beq.n	80033be <HAL_UART_IRQHandler+0x3a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033a6:	0616      	lsls	r6, r2, #24
 80033a8:	d502      	bpl.n	80033b0 <HAL_UART_IRQHandler+0x2c>
 80033aa:	060d      	lsls	r5, r1, #24
 80033ac:	f100 8092 	bmi.w	80034d4 <HAL_UART_IRQHandler+0x150>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033b0:	0650      	lsls	r0, r2, #25
 80033b2:	d502      	bpl.n	80033ba <HAL_UART_IRQHandler+0x36>
 80033b4:	064a      	lsls	r2, r1, #25
 80033b6:	f100 80ab 	bmi.w	8003510 <HAL_UART_IRQHandler+0x18c>
}
 80033ba:	b002      	add	sp, #8
 80033bc:	bd70      	pop	{r4, r5, r6, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 80033be:	06d5      	lsls	r5, r2, #27
 80033c0:	d5f1      	bpl.n	80033a6 <HAL_UART_IRQHandler+0x22>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80033c2:	06c8      	lsls	r0, r1, #27
 80033c4:	d5ef      	bpl.n	80033a6 <HAL_UART_IRQHandler+0x22>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033c6:	2100      	movs	r1, #0
 80033c8:	9101      	str	r1, [sp, #4]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	9201      	str	r2, [sp, #4]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	9201      	str	r2, [sp, #4]
 80033d2:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d4:	695a      	ldr	r2, [r3, #20]
 80033d6:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 80033da:	f000 80d2 	beq.w	8003582 <HAL_UART_IRQHandler+0x1fe>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80033e0:	6802      	ldr	r2, [r0, #0]
 80033e2:	6852      	ldr	r2, [r2, #4]
 80033e4:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 80033e6:	2a00      	cmp	r2, #0
 80033e8:	d0e7      	beq.n	80033ba <HAL_UART_IRQHandler+0x36>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80033ea:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 80033ec:	4295      	cmp	r5, r2
 80033ee:	d9e4      	bls.n	80033ba <HAL_UART_IRQHandler+0x36>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033f0:	6986      	ldr	r6, [r0, #24]
        huart->RxXferCount = nb_remaining_rx_data;
 80033f2:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033f4:	2e20      	cmp	r6, #32
 80033f6:	d016      	beq.n	8003426 <HAL_UART_IRQHandler+0xa2>
          huart->RxState = HAL_UART_STATE_READY;
 80033f8:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003400:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003402:	695a      	ldr	r2, [r3, #20]
 8003404:	f022 0201 	bic.w	r2, r2, #1
 8003408:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800340a:	695a      	ldr	r2, [r3, #20]
 800340c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003410:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8003412:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003416:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	f022 0210 	bic.w	r2, r2, #16
 800341e:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003420:	f7fe f83a 	bl	8001498 <HAL_DMA_Abort>
 8003424:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003426:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8003428:	4620      	mov	r0, r4
 800342a:	1a69      	subs	r1, r5, r1
 800342c:	b289      	uxth	r1, r1
 800342e:	f7ff ff4b 	bl	80032c8 <HAL_UARTEx_RxEventCallback>
 8003432:	e7c2      	b.n	80033ba <HAL_UART_IRQHandler+0x36>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003434:	f005 0501 	and.w	r5, r5, #1
 8003438:	f401 7090 	and.w	r0, r1, #288	; 0x120
 800343c:	4328      	orrs	r0, r5
 800343e:	d0af      	beq.n	80033a0 <HAL_UART_IRQHandler+0x1c>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003440:	07d0      	lsls	r0, r2, #31
 8003442:	d505      	bpl.n	8003450 <HAL_UART_IRQHandler+0xcc>
 8003444:	05ce      	lsls	r6, r1, #23
 8003446:	d503      	bpl.n	8003450 <HAL_UART_IRQHandler+0xcc>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003448:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800344a:	f040 0001 	orr.w	r0, r0, #1
 800344e:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003450:	0750      	lsls	r0, r2, #29
 8003452:	d52c      	bpl.n	80034ae <HAL_UART_IRQHandler+0x12a>
 8003454:	b12d      	cbz	r5, 8003462 <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003456:	6c20      	ldr	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003458:	0796      	lsls	r6, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800345a:	f040 0002 	orr.w	r0, r0, #2
 800345e:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003460:	d429      	bmi.n	80034b6 <HAL_UART_IRQHandler+0x132>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003462:	0716      	lsls	r6, r2, #28
 8003464:	d507      	bpl.n	8003476 <HAL_UART_IRQHandler+0xf2>
 8003466:	f001 0020 	and.w	r0, r1, #32
 800346a:	4328      	orrs	r0, r5
 800346c:	d003      	beq.n	8003476 <HAL_UART_IRQHandler+0xf2>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800346e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003470:	f040 0008 	orr.w	r0, r0, #8
 8003474:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003476:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003478:	2800      	cmp	r0, #0
 800347a:	d09e      	beq.n	80033ba <HAL_UART_IRQHandler+0x36>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800347c:	0690      	lsls	r0, r2, #26
 800347e:	d509      	bpl.n	8003494 <HAL_UART_IRQHandler+0x110>
 8003480:	068a      	lsls	r2, r1, #26
 8003482:	d507      	bpl.n	8003494 <HAL_UART_IRQHandler+0x110>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003484:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003488:	2a22      	cmp	r2, #34	; 0x22
 800348a:	d103      	bne.n	8003494 <HAL_UART_IRQHandler+0x110>
 800348c:	4620      	mov	r0, r4
 800348e:	f7ff ff1d 	bl	80032cc <UART_Receive_IT.part.0>
 8003492:	6823      	ldr	r3, [r4, #0]
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003494:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003496:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003498:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800349c:	f005 0508 	and.w	r5, r5, #8
 80034a0:	4315      	orrs	r5, r2
 80034a2:	d140      	bne.n	8003526 <HAL_UART_IRQHandler+0x1a2>
        HAL_UART_ErrorCallback(huart);
 80034a4:	4620      	mov	r0, r4
 80034a6:	f7ff ff05 	bl	80032b4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034aa:	6425      	str	r5, [r4, #64]	; 0x40
 80034ac:	e785      	b.n	80033ba <HAL_UART_IRQHandler+0x36>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034ae:	0790      	lsls	r0, r2, #30
 80034b0:	d5d7      	bpl.n	8003462 <HAL_UART_IRQHandler+0xde>
 80034b2:	2d00      	cmp	r5, #0
 80034b4:	d0d5      	beq.n	8003462 <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034b6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80034b8:	f040 0004 	orr.w	r0, r0, #4
 80034bc:	6420      	str	r0, [r4, #64]	; 0x40
 80034be:	e7d0      	b.n	8003462 <HAL_UART_IRQHandler+0xde>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034c0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80034c4:	2b22      	cmp	r3, #34	; 0x22
 80034c6:	f47f af78 	bne.w	80033ba <HAL_UART_IRQHandler+0x36>
}
 80034ca:	b002      	add	sp, #8
 80034cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80034d0:	f7ff befc 	b.w	80032cc <UART_Receive_IT.part.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034d4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80034d8:	2a21      	cmp	r2, #33	; 0x21
 80034da:	f47f af6e 	bne.w	80033ba <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034de:	68a2      	ldr	r2, [r4, #8]
 80034e0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80034e4:	d06e      	beq.n	80035c4 <HAL_UART_IRQHandler+0x240>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034e6:	6a22      	ldr	r2, [r4, #32]
 80034e8:	1c51      	adds	r1, r2, #1
 80034ea:	6221      	str	r1, [r4, #32]
 80034ec:	7812      	ldrb	r2, [r2, #0]
 80034ee:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80034f0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80034f2:	3a01      	subs	r2, #1
 80034f4:	b292      	uxth	r2, r2
 80034f6:	84e2      	strh	r2, [r4, #38]	; 0x26
 80034f8:	2a00      	cmp	r2, #0
 80034fa:	f47f af5e 	bne.w	80033ba <HAL_UART_IRQHandler+0x36>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003504:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800350c:	60da      	str	r2, [r3, #12]
 800350e:	e754      	b.n	80033ba <HAL_UART_IRQHandler+0x36>
  huart->gState = HAL_UART_STATE_READY;
 8003510:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003512:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8003514:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800351a:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800351c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8003520:	f7ff fec4 	bl	80032ac <HAL_UART_TxCpltCallback>
    return;
 8003524:	e749      	b.n	80033ba <HAL_UART_IRQHandler+0x36>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800352c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800352e:	695a      	ldr	r2, [r3, #20]
 8003530:	f022 0201 	bic.w	r2, r2, #1
 8003534:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003536:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003538:	2a01      	cmp	r2, #1
 800353a:	d103      	bne.n	8003544 <HAL_UART_IRQHandler+0x1c0>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	f022 0210 	bic.w	r2, r2, #16
 8003542:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003544:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003546:	2120      	movs	r1, #32
 8003548:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354c:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800354e:	695a      	ldr	r2, [r3, #20]
 8003550:	0656      	lsls	r6, r2, #25
 8003552:	d512      	bpl.n	800357a <HAL_UART_IRQHandler+0x1f6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003554:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003556:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800355c:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800355e:	b160      	cbz	r0, 800357a <HAL_UART_IRQHandler+0x1f6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003560:	4b1e      	ldr	r3, [pc, #120]	; (80035dc <HAL_UART_IRQHandler+0x258>)
 8003562:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003564:	f7fd ffba 	bl	80014dc <HAL_DMA_Abort_IT>
 8003568:	2800      	cmp	r0, #0
 800356a:	f43f af26 	beq.w	80033ba <HAL_UART_IRQHandler+0x36>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800356e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003570:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8003572:	b002      	add	sp, #8
 8003574:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003578:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800357a:	4620      	mov	r0, r4
 800357c:	f7ff fe9a 	bl	80032b4 <HAL_UART_ErrorCallback>
 8003580:	e71b      	b.n	80033ba <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003582:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 8003584:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003586:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8003588:	b289      	uxth	r1, r1
 800358a:	2900      	cmp	r1, #0
 800358c:	f43f af15 	beq.w	80033ba <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003590:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003592:	1a08      	subs	r0, r1, r0
 8003594:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 8003596:	2900      	cmp	r1, #0
 8003598:	f43f af0f 	beq.w	80033ba <HAL_UART_IRQHandler+0x36>
        huart->RxState = HAL_UART_STATE_READY;
 800359c:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800359e:	68d8      	ldr	r0, [r3, #12]
 80035a0:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 80035a4:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	6958      	ldr	r0, [r3, #20]
 80035a8:	f020 0001 	bic.w	r0, r0, #1
 80035ac:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 80035ae:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b2:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b4:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035b6:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b8:	f022 0210 	bic.w	r2, r2, #16
 80035bc:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035be:	f7ff fe83 	bl	80032c8 <HAL_UARTEx_RxEventCallback>
 80035c2:	e6fa      	b.n	80033ba <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035c4:	6922      	ldr	r2, [r4, #16]
 80035c6:	2a00      	cmp	r2, #0
 80035c8:	d18d      	bne.n	80034e6 <HAL_UART_IRQHandler+0x162>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035ca:	6a22      	ldr	r2, [r4, #32]
 80035cc:	f832 1b02 	ldrh.w	r1, [r2], #2
 80035d0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80035d4:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035d6:	6222      	str	r2, [r4, #32]
 80035d8:	e78a      	b.n	80034f0 <HAL_UART_IRQHandler+0x16c>
 80035da:	bf00      	nop
 80035dc:	080032b9 	.word	0x080032b9

080035e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80035e0:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80035e2:	f000 ff53 	bl	800448c <vTaskStartScheduler>
  
  return osOK;
}
 80035e6:	2000      	movs	r0, #0
 80035e8:	bd08      	pop	{r3, pc}
 80035ea:	bf00      	nop

080035ec <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80035ec:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80035ee:	6944      	ldr	r4, [r0, #20]
{
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	b086      	sub	sp, #24
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80035f6:	b194      	cbz	r4, 800361e <osThreadCreate+0x32>
 80035f8:	6986      	ldr	r6, [r0, #24]
 80035fa:	b186      	cbz	r6, 800361e <osThreadCreate+0x32>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035fc:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8003600:	6912      	ldr	r2, [r2, #16]
  if (priority != osPriorityError) {
 8003602:	2d84      	cmp	r5, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003604:	bf08      	it	eq
 8003606:	2500      	moveq	r5, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003608:	e9d0 1000 	ldrd	r1, r0, [r0]
    fpriority += (priority - osPriorityIdle);
 800360c:	bf18      	it	ne
 800360e:	3503      	addne	r5, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003610:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8003614:	9500      	str	r5, [sp, #0]
 8003616:	f000 fddb 	bl	80041d0 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 800361a:	b006      	add	sp, #24
 800361c:	bd70      	pop	{r4, r5, r6, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800361e:	f9b2 4008 	ldrsh.w	r4, [r2, #8]
 8003622:	ad05      	add	r5, sp, #20
  if (priority != osPriorityError) {
 8003624:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003626:	bf08      	it	eq
 8003628:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800362a:	e9d2 1000 	ldrd	r1, r0, [r2]
    fpriority += (priority - osPriorityIdle);
 800362e:	bf18      	it	ne
 8003630:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003632:	8a12      	ldrh	r2, [r2, #16]
 8003634:	e9cd 4500 	strd	r4, r5, [sp]
 8003638:	f000 fe7a 	bl	8004330 <xTaskCreate>
 800363c:	2801      	cmp	r0, #1
      return NULL;
 800363e:	bf14      	ite	ne
 8003640:	2000      	movne	r0, #0
 8003642:	9805      	ldreq	r0, [sp, #20]
}
 8003644:	b006      	add	sp, #24
 8003646:	bd70      	pop	{r4, r5, r6, pc}

08003648 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003648:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800364a:	2801      	cmp	r0, #1
 800364c:	bf38      	it	cc
 800364e:	2001      	movcc	r0, #1
 8003650:	f001 f8ce 	bl	80047f0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003654:	2000      	movs	r0, #0
 8003656:	bd08      	pop	{r3, pc}

08003658 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8003658:	b510      	push	{r4, lr}
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800365a:	6844      	ldr	r4, [r0, #4]
{
 800365c:	4613      	mov	r3, r2
 800365e:	b082      	sub	sp, #8
    return xTimerCreateStatic((const char *)"",
 8003660:	6802      	ldr	r2, [r0, #0]
  if(timer_def->controlblock != NULL) {
 8003662:	b164      	cbz	r4, 800367e <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 8003664:	e9cd 2400 	strd	r2, r4, [sp]
 8003668:	f1a1 0201 	sub.w	r2, r1, #1
 800366c:	fab2 f282 	clz	r2, r2
 8003670:	2101      	movs	r1, #1
 8003672:	0952      	lsrs	r2, r2, #5
 8003674:	4808      	ldr	r0, [pc, #32]	; (8003698 <osTimerCreate+0x40>)
 8003676:	f001 fcad 	bl	8004fd4 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 800367a:	b002      	add	sp, #8
 800367c:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 800367e:	9200      	str	r2, [sp, #0]
 8003680:	f1a1 0201 	sub.w	r2, r1, #1
 8003684:	fab2 f282 	clz	r2, r2
 8003688:	2101      	movs	r1, #1
 800368a:	0952      	lsrs	r2, r2, #5
 800368c:	4802      	ldr	r0, [pc, #8]	; (8003698 <osTimerCreate+0x40>)
 800368e:	f001 fc4f 	bl	8004f30 <xTimerCreate>
}
 8003692:	b002      	add	sp, #8
 8003694:	bd10      	pop	{r4, pc}
 8003696:	bf00      	nop
 8003698:	08007c34 	.word	0x08007c34

0800369c <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800369c:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036a0:	2200      	movs	r2, #0
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036a2:	f100 0308 	add.w	r3, r0, #8
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036a6:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036aa:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036ac:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036ae:	6043      	str	r3, [r0, #4]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop

080036b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop

080036bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80036bc:	6843      	ldr	r3, [r0, #4]
{
 80036be:	b410      	push	{r4}

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036c0:	689c      	ldr	r4, [r3, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80036c2:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036c4:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036c6:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 80036c8:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 80036ca:	604b      	str	r3, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036cc:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036ce:	6099      	str	r1, [r3, #8]
}
 80036d0:	bc10      	pop	{r4}
	pxNewListItem->pvContainer = ( void * ) pxList;
 80036d2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80036d4:	6002      	str	r2, [r0, #0]
}
 80036d6:	4770      	bx	lr

080036d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036d8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036da:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036dc:	1c6b      	adds	r3, r5, #1
 80036de:	d010      	beq.n	8003702 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036e0:	f100 0308 	add.w	r3, r0, #8
 80036e4:	461c      	mov	r4, r3
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	42aa      	cmp	r2, r5
 80036ec:	d9fa      	bls.n	80036e4 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80036ee:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80036f0:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80036f2:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036f4:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036f6:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80036f8:	6061      	str	r1, [r4, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80036fa:	6108      	str	r0, [r1, #16]
}
 80036fc:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 80036fe:	6002      	str	r2, [r0, #0]
}
 8003700:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8003702:	6904      	ldr	r4, [r0, #16]
 8003704:	6863      	ldr	r3, [r4, #4]
 8003706:	e7f2      	b.n	80036ee <vListInsert+0x16>

08003708 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003708:	6903      	ldr	r3, [r0, #16]
{
 800370a:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800370c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003710:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003712:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003714:	6051      	str	r1, [r2, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003716:	2100      	movs	r1, #0
	if( pxList->pxIndex == pxItemToRemove )
 8003718:	4284      	cmp	r4, r0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800371a:	bf08      	it	eq
 800371c:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 800371e:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pvContainer = NULL;
 8003720:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003722:	3a01      	subs	r2, #1
 8003724:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003726:	6818      	ldr	r0, [r3, #0]
}
 8003728:	bc10      	pop	{r4}
 800372a:	4770      	bx	lr

0800372c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800372c:	b570      	push	{r4, r5, r6, lr}
 800372e:	4604      	mov	r4, r0

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003730:	6c00      	ldr	r0, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003732:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003734:	b928      	cbnz	r0, 8003742 <prvCopyDataToQueue+0x16>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003736:	6825      	ldr	r5, [r4, #0]
 8003738:	2d00      	cmp	r5, #0
 800373a:	d02e      	beq.n	800379a <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
				pxQueue->pxMutexHolder = NULL;
 800373c:	3601      	adds	r6, #1
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800373e:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8003740:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8003742:	4615      	mov	r5, r2
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003744:	4602      	mov	r2, r0
	else if( xPosition == queueSEND_TO_BACK )
 8003746:	b97d      	cbnz	r5, 8003768 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003748:	68a0      	ldr	r0, [r4, #8]
 800374a:	f003 fce9 	bl	8007120 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800374e:	68a3      	ldr	r3, [r4, #8]
 8003750:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003752:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003754:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003756:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003758:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800375a:	d31a      	bcc.n	8003792 <prvCopyDataToQueue+0x66>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800375c:	6822      	ldr	r2, [r4, #0]
 800375e:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8003760:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003762:	60a2      	str	r2, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003764:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8003766:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003768:	68e0      	ldr	r0, [r4, #12]
 800376a:	f003 fcd9 	bl	8007120 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800376e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003770:	68e3      	ldr	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003772:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003774:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003776:	428b      	cmp	r3, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003778:	60e3      	str	r3, [r4, #12]
 800377a:	f1c2 0200 	rsb	r2, r2, #0
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800377e:	d202      	bcs.n	8003786 <prvCopyDataToQueue+0x5a>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003780:	6863      	ldr	r3, [r4, #4]
 8003782:	441a      	add	r2, r3
 8003784:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003786:	2d02      	cmp	r5, #2
 8003788:	d00c      	beq.n	80037a4 <prvCopyDataToQueue+0x78>
 800378a:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 800378c:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800378e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8003790:	bd70      	pop	{r4, r5, r6, pc}
 8003792:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8003794:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003796:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8003798:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800379a:	6860      	ldr	r0, [r4, #4]
 800379c:	f001 f9c4 	bl	8004b28 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80037a0:	6065      	str	r5, [r4, #4]
 80037a2:	e7cb      	b.n	800373c <prvCopyDataToQueue+0x10>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037a4:	2e01      	cmp	r6, #1
 80037a6:	bf38      	it	cc
 80037a8:	2601      	movcc	r6, #1
BaseType_t xReturn = pdFALSE;
 80037aa:	2000      	movs	r0, #0
 80037ac:	e7c7      	b.n	800373e <prvCopyDataToQueue+0x12>
 80037ae:	bf00      	nop

080037b0 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037b0:	b940      	cbnz	r0, 80037c4 <xQueueGenericCreateStatic+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b6:	f383 8811 	msr	BASEPRI, r3
 80037ba:	f3bf 8f6f 	isb	sy
 80037be:	f3bf 8f4f 	dsb	sy
 80037c2:	e7fe      	b.n	80037c2 <xQueueGenericCreateStatic+0x12>
	{
 80037c4:	b530      	push	{r4, r5, lr}
 80037c6:	461c      	mov	r4, r3
 80037c8:	b083      	sub	sp, #12
		configASSERT( pxStaticQueue != NULL );
 80037ca:	b1e3      	cbz	r3, 8003806 <xQueueGenericCreateStatic+0x56>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80037cc:	4603      	mov	r3, r0
 80037ce:	b172      	cbz	r2, 80037ee <xQueueGenericCreateStatic+0x3e>
 80037d0:	b311      	cbz	r1, 8003818 <xQueueGenericCreateStatic+0x68>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80037d2:	2048      	movs	r0, #72	; 0x48
 80037d4:	9001      	str	r0, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80037d6:	9801      	ldr	r0, [sp, #4]
 80037d8:	2848      	cmp	r0, #72	; 0x48
 80037da:	d026      	beq.n	800382a <xQueueGenericCreateStatic+0x7a>
 80037dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	e7fe      	b.n	80037ec <xQueueGenericCreateStatic+0x3c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80037ee:	2900      	cmp	r1, #0
 80037f0:	d142      	bne.n	8003878 <xQueueGenericCreateStatic+0xc8>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80037f2:	2248      	movs	r2, #72	; 0x48
 80037f4:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80037f6:	9a01      	ldr	r2, [sp, #4]
 80037f8:	2a48      	cmp	r2, #72	; 0x48
 80037fa:	d1ef      	bne.n	80037dc <xQueueGenericCreateStatic+0x2c>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80037fc:	2001      	movs	r0, #1
 80037fe:	4622      	mov	r2, r4
 8003800:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003804:	e014      	b.n	8003830 <xQueueGenericCreateStatic+0x80>
 8003806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380a:	f383 8811 	msr	BASEPRI, r3
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8003816:	e7fe      	b.n	8003816 <xQueueGenericCreateStatic+0x66>
 8003818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381c:	f383 8811 	msr	BASEPRI, r3
 8003820:	f3bf 8f6f 	isb	sy
 8003824:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003828:	e7fe      	b.n	8003828 <xQueueGenericCreateStatic+0x78>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800382a:	2001      	movs	r0, #1
 800382c:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8003830:	e9c4 310f 	strd	r3, r1, [r4, #60]	; 0x3c
 8003834:	6022      	str	r2, [r4, #0]
	taskENTER_CRITICAL();
 8003836:	f001 fc8d 	bl	8005154 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800383a:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
		pxQueue->cRxLock = queueUNLOCKED;
 800383e:	25ff      	movs	r5, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003840:	2000      	movs	r0, #0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003842:	fb03 f302 	mul.w	r3, r3, r2
 8003846:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003848:	1a9a      	subs	r2, r3, r2
 800384a:	440a      	add	r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800384c:	440b      	add	r3, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800384e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003850:	e9c4 3101 	strd	r3, r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003854:	60e2      	str	r2, [r4, #12]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003856:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cRxLock = queueUNLOCKED;
 800385a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800385e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003862:	f7ff ff1b 	bl	800369c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003866:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800386a:	f7ff ff17 	bl	800369c <vListInitialise>
	taskEXIT_CRITICAL();
 800386e:	f001 fc93 	bl	8005198 <vPortExitCritical>
	}
 8003872:	4620      	mov	r0, r4
 8003874:	b003      	add	sp, #12
 8003876:	bd30      	pop	{r4, r5, pc}
 8003878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387c:	f383 8811 	msr	BASEPRI, r3
 8003880:	f3bf 8f6f 	isb	sy
 8003884:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003888:	e7fe      	b.n	8003888 <xQueueGenericCreateStatic+0xd8>
 800388a:	bf00      	nop

0800388c <xQueueGenericSend>:
{
 800388c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003890:	b084      	sub	sp, #16
 8003892:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8003894:	2800      	cmp	r0, #0
 8003896:	f000 80ac 	beq.w	80039f2 <xQueueGenericSend+0x166>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800389a:	4688      	mov	r8, r1
 800389c:	461f      	mov	r7, r3
 800389e:	4604      	mov	r4, r0
 80038a0:	2900      	cmp	r1, #0
 80038a2:	f000 8099 	beq.w	80039d8 <xQueueGenericSend+0x14c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038a6:	2f02      	cmp	r7, #2
 80038a8:	d10b      	bne.n	80038c2 <xQueueGenericSend+0x36>
 80038aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d008      	beq.n	80038c2 <xQueueGenericSend+0x36>
 80038b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b4:	f383 8811 	msr	BASEPRI, r3
 80038b8:	f3bf 8f6f 	isb	sy
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	e7fe      	b.n	80038c0 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038c2:	f001 f921 	bl	8004b08 <xTaskGetSchedulerState>
 80038c6:	4682      	mov	sl, r0
 80038c8:	2800      	cmp	r0, #0
 80038ca:	f000 809b 	beq.w	8003a04 <xQueueGenericSend+0x178>
 80038ce:	f04f 0a00 	mov.w	sl, #0
					portYIELD_WITHIN_API();
 80038d2:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 8003b94 <xQueueGenericSend+0x308>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038d6:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
 80038da:	f001 fc3b 	bl	8005154 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80038e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80038e2:	429a      	cmp	r2, r3
 80038e4:	f0c0 80f4 	bcc.w	8003ad0 <xQueueGenericSend+0x244>
 80038e8:	2f02      	cmp	r7, #2
 80038ea:	f000 80f1 	beq.w	8003ad0 <xQueueGenericSend+0x244>
				if( xTicksToWait == ( TickType_t ) 0 )
 80038ee:	9d01      	ldr	r5, [sp, #4]
 80038f0:	2d00      	cmp	r5, #0
 80038f2:	f000 814a 	beq.w	8003b8a <xQueueGenericSend+0x2fe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038f6:	ad02      	add	r5, sp, #8
				else if( xEntryTimeSet == pdFALSE )
 80038f8:	f1ba 0f00 	cmp.w	sl, #0
 80038fc:	f000 80e4 	beq.w	8003ac8 <xQueueGenericSend+0x23c>
		taskEXIT_CRITICAL();
 8003900:	f001 fc4a 	bl	8005198 <vPortExitCritical>
		vTaskSuspendAll();
 8003904:	f000 fe48 	bl	8004598 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003908:	f001 fc24 	bl	8005154 <vPortEnterCritical>
 800390c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003910:	2bff      	cmp	r3, #255	; 0xff
 8003912:	bf04      	itt	eq
 8003914:	2300      	moveq	r3, #0
 8003916:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 800391a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800391e:	2bff      	cmp	r3, #255	; 0xff
 8003920:	bf04      	itt	eq
 8003922:	2300      	moveq	r3, #0
 8003924:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8003928:	f001 fc36 	bl	8005198 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800392c:	4628      	mov	r0, r5
 800392e:	a901      	add	r1, sp, #4
 8003930:	f001 f89c 	bl	8004a6c <xTaskCheckForTimeOut>
 8003934:	2800      	cmp	r0, #0
 8003936:	f040 80e8 	bne.w	8003b0a <xQueueGenericSend+0x27e>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800393a:	f001 fc0b 	bl	8005154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800393e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003940:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003942:	429a      	cmp	r2, r3
 8003944:	d06b      	beq.n	8003a1e <xQueueGenericSend+0x192>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003946:	f001 fc27 	bl	8005198 <vPortExitCritical>
	taskENTER_CRITICAL();
 800394a:	f001 fc03 	bl	8005154 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800394e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8003952:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003954:	2d00      	cmp	r5, #0
 8003956:	dc05      	bgt.n	8003964 <xQueueGenericSend+0xd8>
 8003958:	e012      	b.n	8003980 <xQueueGenericSend+0xf4>
			--cTxLock;
 800395a:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800395c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003960:	b25d      	sxtb	r5, r3
 8003962:	d00d      	beq.n	8003980 <xQueueGenericSend+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003964:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003966:	b15b      	cbz	r3, 8003980 <xQueueGenericSend+0xf4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003968:	4630      	mov	r0, r6
 800396a:	f001 f837 	bl	80049dc <xTaskRemoveFromEventList>
 800396e:	2800      	cmp	r0, #0
 8003970:	d0f3      	beq.n	800395a <xQueueGenericSend+0xce>
						vTaskMissedYield();
 8003972:	f001 f8c1 	bl	8004af8 <vTaskMissedYield>
			--cTxLock;
 8003976:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003978:	f013 0fff 	tst.w	r3, #255	; 0xff
 800397c:	b25d      	sxtb	r5, r3
 800397e:	d1f1      	bne.n	8003964 <xQueueGenericSend+0xd8>
		pxQueue->cTxLock = queueUNLOCKED;
 8003980:	23ff      	movs	r3, #255	; 0xff
 8003982:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8003986:	f001 fc07 	bl	8005198 <vPortExitCritical>
	taskENTER_CRITICAL();
 800398a:	f001 fbe3 	bl	8005154 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800398e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8003992:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003994:	2d00      	cmp	r5, #0
 8003996:	dd15      	ble.n	80039c4 <xQueueGenericSend+0x138>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003998:	f104 0a10 	add.w	sl, r4, #16
 800399c:	e004      	b.n	80039a8 <xQueueGenericSend+0x11c>
				--cRxLock;
 800399e:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039a0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80039a4:	b25d      	sxtb	r5, r3
 80039a6:	d00d      	beq.n	80039c4 <xQueueGenericSend+0x138>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039a8:	6923      	ldr	r3, [r4, #16]
 80039aa:	b15b      	cbz	r3, 80039c4 <xQueueGenericSend+0x138>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039ac:	4650      	mov	r0, sl
 80039ae:	f001 f815 	bl	80049dc <xTaskRemoveFromEventList>
 80039b2:	2800      	cmp	r0, #0
 80039b4:	d0f3      	beq.n	800399e <xQueueGenericSend+0x112>
					vTaskMissedYield();
 80039b6:	f001 f89f 	bl	8004af8 <vTaskMissedYield>
				--cRxLock;
 80039ba:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039bc:	f013 0fff 	tst.w	r3, #255	; 0xff
 80039c0:	b25d      	sxtb	r5, r3
 80039c2:	d1f1      	bne.n	80039a8 <xQueueGenericSend+0x11c>
		pxQueue->cRxLock = queueUNLOCKED;
 80039c4:	23ff      	movs	r3, #255	; 0xff
 80039c6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80039ca:	f001 fbe5 	bl	8005198 <vPortExitCritical>
				( void ) xTaskResumeAll();
 80039ce:	f000 fe8d 	bl	80046ec <xTaskResumeAll>
 80039d2:	f04f 0a01 	mov.w	sl, #1
 80039d6:	e780      	b.n	80038da <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039d8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f43f af63 	beq.w	80038a6 <xQueueGenericSend+0x1a>
 80039e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e4:	f383 8811 	msr	BASEPRI, r3
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	e7fe      	b.n	80039f0 <xQueueGenericSend+0x164>
 80039f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f6:	f383 8811 	msr	BASEPRI, r3
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8003a02:	e7fe      	b.n	8003a02 <xQueueGenericSend+0x176>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a04:	9b01      	ldr	r3, [sp, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f43f af63 	beq.w	80038d2 <xQueueGenericSend+0x46>
 8003a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	e7fe      	b.n	8003a1c <xQueueGenericSend+0x190>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a1e:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
 8003a22:	f001 fbb9 	bl	8005198 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a26:	4650      	mov	r0, sl
 8003a28:	9901      	ldr	r1, [sp, #4]
 8003a2a:	f000 ff37 	bl	800489c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8003a2e:	f001 fb91 	bl	8005154 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003a32:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8003a36:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a38:	2d00      	cmp	r5, #0
 8003a3a:	dc05      	bgt.n	8003a48 <xQueueGenericSend+0x1bc>
 8003a3c:	e012      	b.n	8003a64 <xQueueGenericSend+0x1d8>
			--cTxLock;
 8003a3e:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a40:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003a44:	b25d      	sxtb	r5, r3
 8003a46:	d00d      	beq.n	8003a64 <xQueueGenericSend+0x1d8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a4a:	b15b      	cbz	r3, 8003a64 <xQueueGenericSend+0x1d8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a4c:	4630      	mov	r0, r6
 8003a4e:	f000 ffc5 	bl	80049dc <xTaskRemoveFromEventList>
 8003a52:	2800      	cmp	r0, #0
 8003a54:	d0f3      	beq.n	8003a3e <xQueueGenericSend+0x1b2>
						vTaskMissedYield();
 8003a56:	f001 f84f 	bl	8004af8 <vTaskMissedYield>
			--cTxLock;
 8003a5a:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a5c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003a60:	b25d      	sxtb	r5, r3
 8003a62:	d1f1      	bne.n	8003a48 <xQueueGenericSend+0x1bc>
		pxQueue->cTxLock = queueUNLOCKED;
 8003a64:	23ff      	movs	r3, #255	; 0xff
 8003a66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8003a6a:	f001 fb95 	bl	8005198 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003a6e:	f001 fb71 	bl	8005154 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003a72:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8003a76:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a78:	2d00      	cmp	r5, #0
 8003a7a:	dc05      	bgt.n	8003a88 <xQueueGenericSend+0x1fc>
 8003a7c:	e012      	b.n	8003aa4 <xQueueGenericSend+0x218>
				--cRxLock;
 8003a7e:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a80:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003a84:	b25d      	sxtb	r5, r3
 8003a86:	d00d      	beq.n	8003aa4 <xQueueGenericSend+0x218>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a88:	6923      	ldr	r3, [r4, #16]
 8003a8a:	b15b      	cbz	r3, 8003aa4 <xQueueGenericSend+0x218>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a8c:	4650      	mov	r0, sl
 8003a8e:	f000 ffa5 	bl	80049dc <xTaskRemoveFromEventList>
 8003a92:	2800      	cmp	r0, #0
 8003a94:	d0f3      	beq.n	8003a7e <xQueueGenericSend+0x1f2>
					vTaskMissedYield();
 8003a96:	f001 f82f 	bl	8004af8 <vTaskMissedYield>
				--cRxLock;
 8003a9a:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a9c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003aa0:	b25d      	sxtb	r5, r3
 8003aa2:	d1f1      	bne.n	8003a88 <xQueueGenericSend+0x1fc>
		pxQueue->cRxLock = queueUNLOCKED;
 8003aa4:	23ff      	movs	r3, #255	; 0xff
 8003aa6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8003aaa:	f001 fb75 	bl	8005198 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8003aae:	f000 fe1d 	bl	80046ec <xTaskResumeAll>
 8003ab2:	2800      	cmp	r0, #0
 8003ab4:	d18d      	bne.n	80039d2 <xQueueGenericSend+0x146>
					portYIELD_WITHIN_API();
 8003ab6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003aba:	f8c9 3000 	str.w	r3, [r9]
 8003abe:	f3bf 8f4f 	dsb	sy
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	e784      	b.n	80039d2 <xQueueGenericSend+0x146>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ac8:	4628      	mov	r0, r5
 8003aca:	f000 ffc5 	bl	8004a58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ace:	e717      	b.n	8003900 <xQueueGenericSend+0x74>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ad0:	463a      	mov	r2, r7
 8003ad2:	4641      	mov	r1, r8
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	f7ff fe29 	bl	800372c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ada:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003adc:	b972      	cbnz	r2, 8003afc <xQueueGenericSend+0x270>
					else if( xYieldRequired != pdFALSE )
 8003ade:	b138      	cbz	r0, 8003af0 <xQueueGenericSend+0x264>
						queueYIELD_IF_USING_PREEMPTION();
 8003ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ae4:	4b2b      	ldr	r3, [pc, #172]	; (8003b94 <xQueueGenericSend+0x308>)
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003af0:	f001 fb52 	bl	8005198 <vPortExitCritical>
				return pdPASS;
 8003af4:	2001      	movs	r0, #1
}
 8003af6:	b004      	add	sp, #16
 8003af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003afc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003b00:	f000 ff6c 	bl	80049dc <xTaskRemoveFromEventList>
 8003b04:	2800      	cmp	r0, #0
 8003b06:	d0f3      	beq.n	8003af0 <xQueueGenericSend+0x264>
 8003b08:	e7ea      	b.n	8003ae0 <xQueueGenericSend+0x254>
	taskENTER_CRITICAL();
 8003b0a:	f001 fb23 	bl	8005154 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003b0e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8003b12:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b14:	2d00      	cmp	r5, #0
 8003b16:	dd11      	ble.n	8003b3c <xQueueGenericSend+0x2b0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b18:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8003b1c:	e004      	b.n	8003b28 <xQueueGenericSend+0x29c>
			--cTxLock;
 8003b1e:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b20:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003b24:	b25d      	sxtb	r5, r3
 8003b26:	d009      	beq.n	8003b3c <xQueueGenericSend+0x2b0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b2a:	b13b      	cbz	r3, 8003b3c <xQueueGenericSend+0x2b0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b2c:	4630      	mov	r0, r6
 8003b2e:	f000 ff55 	bl	80049dc <xTaskRemoveFromEventList>
 8003b32:	2800      	cmp	r0, #0
 8003b34:	d0f3      	beq.n	8003b1e <xQueueGenericSend+0x292>
						vTaskMissedYield();
 8003b36:	f000 ffdf 	bl	8004af8 <vTaskMissedYield>
 8003b3a:	e7f0      	b.n	8003b1e <xQueueGenericSend+0x292>
		pxQueue->cTxLock = queueUNLOCKED;
 8003b3c:	23ff      	movs	r3, #255	; 0xff
 8003b3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8003b42:	f001 fb29 	bl	8005198 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003b46:	f001 fb05 	bl	8005154 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003b4a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8003b4e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b50:	2d00      	cmp	r5, #0
 8003b52:	dd11      	ble.n	8003b78 <xQueueGenericSend+0x2ec>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b54:	f104 0610 	add.w	r6, r4, #16
 8003b58:	e004      	b.n	8003b64 <xQueueGenericSend+0x2d8>
				--cRxLock;
 8003b5a:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b5c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003b60:	b25d      	sxtb	r5, r3
 8003b62:	d009      	beq.n	8003b78 <xQueueGenericSend+0x2ec>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b64:	6923      	ldr	r3, [r4, #16]
 8003b66:	b13b      	cbz	r3, 8003b78 <xQueueGenericSend+0x2ec>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b68:	4630      	mov	r0, r6
 8003b6a:	f000 ff37 	bl	80049dc <xTaskRemoveFromEventList>
 8003b6e:	2800      	cmp	r0, #0
 8003b70:	d0f3      	beq.n	8003b5a <xQueueGenericSend+0x2ce>
					vTaskMissedYield();
 8003b72:	f000 ffc1 	bl	8004af8 <vTaskMissedYield>
 8003b76:	e7f0      	b.n	8003b5a <xQueueGenericSend+0x2ce>
		pxQueue->cRxLock = queueUNLOCKED;
 8003b78:	23ff      	movs	r3, #255	; 0xff
 8003b7a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8003b7e:	f001 fb0b 	bl	8005198 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8003b82:	f000 fdb3 	bl	80046ec <xTaskResumeAll>
			return errQUEUE_FULL;
 8003b86:	2000      	movs	r0, #0
 8003b88:	e7b5      	b.n	8003af6 <xQueueGenericSend+0x26a>
					taskEXIT_CRITICAL();
 8003b8a:	f001 fb05 	bl	8005198 <vPortExitCritical>
					return errQUEUE_FULL;
 8003b8e:	4628      	mov	r0, r5
 8003b90:	e7b1      	b.n	8003af6 <xQueueGenericSend+0x26a>
 8003b92:	bf00      	nop
 8003b94:	e000ed04 	.word	0xe000ed04

08003b98 <xQueueReceive>:
{
 8003b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b9c:	b085      	sub	sp, #20
 8003b9e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	f000 80f5 	beq.w	8003d90 <xQueueReceive+0x1f8>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ba6:	460e      	mov	r6, r1
 8003ba8:	4604      	mov	r4, r0
 8003baa:	2900      	cmp	r1, #0
 8003bac:	f000 808a 	beq.w	8003cc4 <xQueueReceive+0x12c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bb0:	f000 ffaa 	bl	8004b08 <xTaskGetSchedulerState>
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	d079      	beq.n	8003cac <xQueueReceive+0x114>
		taskENTER_CRITICAL();
 8003bb8:	f001 facc 	bl	8005154 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bbc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bbe:	2d00      	cmp	r5, #0
 8003bc0:	f040 8148 	bne.w	8003e54 <xQueueReceive+0x2bc>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bc4:	9b01      	ldr	r3, [sp, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 80dc 	beq.w	8003d84 <xQueueReceive+0x1ec>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bcc:	a802      	add	r0, sp, #8
 8003bce:	f000 ff43 	bl	8004a58 <vTaskInternalSetTimeOutState>
					portYIELD_WITHIN_API();
 8003bd2:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 8003ea0 <xQueueReceive+0x308>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bd6:	f104 0724 	add.w	r7, r4, #36	; 0x24
		taskEXIT_CRITICAL();
 8003bda:	f001 fadd 	bl	8005198 <vPortExitCritical>
		vTaskSuspendAll();
 8003bde:	f000 fcdb 	bl	8004598 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003be2:	f001 fab7 	bl	8005154 <vPortEnterCritical>
 8003be6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003bea:	2bff      	cmp	r3, #255	; 0xff
 8003bec:	bf04      	itt	eq
 8003bee:	2300      	moveq	r3, #0
 8003bf0:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8003bf4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003bf8:	2bff      	cmp	r3, #255	; 0xff
 8003bfa:	bf04      	itt	eq
 8003bfc:	2300      	moveq	r3, #0
 8003bfe:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8003c02:	f001 fac9 	bl	8005198 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c06:	a901      	add	r1, sp, #4
 8003c08:	a802      	add	r0, sp, #8
 8003c0a:	f000 ff2f 	bl	8004a6c <xTaskCheckForTimeOut>
 8003c0e:	2800      	cmp	r0, #0
 8003c10:	d165      	bne.n	8003cde <xQueueReceive+0x146>
	taskENTER_CRITICAL();
 8003c12:	f001 fa9f 	bl	8005154 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 80c2 	beq.w	8003da2 <xQueueReceive+0x20a>
	taskEXIT_CRITICAL();
 8003c1e:	f001 fabb 	bl	8005198 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003c22:	f001 fa97 	bl	8005154 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003c26:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8003c2a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c2c:	2d00      	cmp	r5, #0
 8003c2e:	dc05      	bgt.n	8003c3c <xQueueReceive+0xa4>
 8003c30:	e012      	b.n	8003c58 <xQueueReceive+0xc0>
			--cTxLock;
 8003c32:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c34:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003c38:	b25d      	sxtb	r5, r3
 8003c3a:	d00d      	beq.n	8003c58 <xQueueReceive+0xc0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c3e:	b15b      	cbz	r3, 8003c58 <xQueueReceive+0xc0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c40:	4638      	mov	r0, r7
 8003c42:	f000 fecb 	bl	80049dc <xTaskRemoveFromEventList>
 8003c46:	2800      	cmp	r0, #0
 8003c48:	d0f3      	beq.n	8003c32 <xQueueReceive+0x9a>
						vTaskMissedYield();
 8003c4a:	f000 ff55 	bl	8004af8 <vTaskMissedYield>
			--cTxLock;
 8003c4e:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c50:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003c54:	b25d      	sxtb	r5, r3
 8003c56:	d1f1      	bne.n	8003c3c <xQueueReceive+0xa4>
		pxQueue->cTxLock = queueUNLOCKED;
 8003c58:	23ff      	movs	r3, #255	; 0xff
 8003c5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8003c5e:	f001 fa9b 	bl	8005198 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003c62:	f001 fa77 	bl	8005154 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003c66:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8003c6a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c6c:	2d00      	cmp	r5, #0
 8003c6e:	dd15      	ble.n	8003c9c <xQueueReceive+0x104>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c70:	f104 0910 	add.w	r9, r4, #16
 8003c74:	e004      	b.n	8003c80 <xQueueReceive+0xe8>
				--cRxLock;
 8003c76:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c78:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003c7c:	b25d      	sxtb	r5, r3
 8003c7e:	d00d      	beq.n	8003c9c <xQueueReceive+0x104>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c80:	6923      	ldr	r3, [r4, #16]
 8003c82:	b15b      	cbz	r3, 8003c9c <xQueueReceive+0x104>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c84:	4648      	mov	r0, r9
 8003c86:	f000 fea9 	bl	80049dc <xTaskRemoveFromEventList>
 8003c8a:	2800      	cmp	r0, #0
 8003c8c:	d0f3      	beq.n	8003c76 <xQueueReceive+0xde>
					vTaskMissedYield();
 8003c8e:	f000 ff33 	bl	8004af8 <vTaskMissedYield>
				--cRxLock;
 8003c92:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c94:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003c98:	b25d      	sxtb	r5, r3
 8003c9a:	d1f1      	bne.n	8003c80 <xQueueReceive+0xe8>
		pxQueue->cRxLock = queueUNLOCKED;
 8003c9c:	23ff      	movs	r3, #255	; 0xff
 8003c9e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8003ca2:	f001 fa79 	bl	8005198 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8003ca6:	f000 fd21 	bl	80046ec <xTaskResumeAll>
		taskENTER_CRITICAL();
 8003caa:	e062      	b.n	8003d72 <xQueueReceive+0x1da>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cac:	9b01      	ldr	r3, [sp, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d082      	beq.n	8003bb8 <xQueueReceive+0x20>
 8003cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	e7fe      	b.n	8003cc2 <xQueueReceive+0x12a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cc4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f43f af72 	beq.w	8003bb0 <xQueueReceive+0x18>
 8003ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	e7fe      	b.n	8003cdc <xQueueReceive+0x144>
	taskENTER_CRITICAL();
 8003cde:	f001 fa39 	bl	8005154 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003ce2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8003ce6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ce8:	2d00      	cmp	r5, #0
 8003cea:	dc05      	bgt.n	8003cf8 <xQueueReceive+0x160>
 8003cec:	e012      	b.n	8003d14 <xQueueReceive+0x17c>
			--cTxLock;
 8003cee:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cf0:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003cf4:	b25d      	sxtb	r5, r3
 8003cf6:	d00d      	beq.n	8003d14 <xQueueReceive+0x17c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cfa:	b15b      	cbz	r3, 8003d14 <xQueueReceive+0x17c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cfc:	4638      	mov	r0, r7
 8003cfe:	f000 fe6d 	bl	80049dc <xTaskRemoveFromEventList>
 8003d02:	2800      	cmp	r0, #0
 8003d04:	d0f3      	beq.n	8003cee <xQueueReceive+0x156>
						vTaskMissedYield();
 8003d06:	f000 fef7 	bl	8004af8 <vTaskMissedYield>
			--cTxLock;
 8003d0a:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d0c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003d10:	b25d      	sxtb	r5, r3
 8003d12:	d1f1      	bne.n	8003cf8 <xQueueReceive+0x160>
		pxQueue->cTxLock = queueUNLOCKED;
 8003d14:	23ff      	movs	r3, #255	; 0xff
 8003d16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8003d1a:	f001 fa3d 	bl	8005198 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003d1e:	f001 fa19 	bl	8005154 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003d22:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8003d26:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d28:	2d00      	cmp	r5, #0
 8003d2a:	dd15      	ble.n	8003d58 <xQueueReceive+0x1c0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d2c:	f104 0910 	add.w	r9, r4, #16
 8003d30:	e004      	b.n	8003d3c <xQueueReceive+0x1a4>
				--cRxLock;
 8003d32:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d34:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003d38:	b25d      	sxtb	r5, r3
 8003d3a:	d00d      	beq.n	8003d58 <xQueueReceive+0x1c0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d3c:	6923      	ldr	r3, [r4, #16]
 8003d3e:	b15b      	cbz	r3, 8003d58 <xQueueReceive+0x1c0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d40:	4648      	mov	r0, r9
 8003d42:	f000 fe4b 	bl	80049dc <xTaskRemoveFromEventList>
 8003d46:	2800      	cmp	r0, #0
 8003d48:	d0f3      	beq.n	8003d32 <xQueueReceive+0x19a>
					vTaskMissedYield();
 8003d4a:	f000 fed5 	bl	8004af8 <vTaskMissedYield>
				--cRxLock;
 8003d4e:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d50:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003d54:	b25d      	sxtb	r5, r3
 8003d56:	d1f1      	bne.n	8003d3c <xQueueReceive+0x1a4>
		pxQueue->cRxLock = queueUNLOCKED;
 8003d58:	23ff      	movs	r3, #255	; 0xff
 8003d5a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8003d5e:	f001 fa1b 	bl	8005198 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8003d62:	f000 fcc3 	bl	80046ec <xTaskResumeAll>
	taskENTER_CRITICAL();
 8003d66:	f001 f9f5 	bl	8005154 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d6c:	b153      	cbz	r3, 8003d84 <xQueueReceive+0x1ec>
	taskEXIT_CRITICAL();
 8003d6e:	f001 fa13 	bl	8005198 <vPortExitCritical>
		taskENTER_CRITICAL();
 8003d72:	f001 f9ef 	bl	8005154 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d76:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d78:	2d00      	cmp	r5, #0
 8003d7a:	d16b      	bne.n	8003e54 <xQueueReceive+0x2bc>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d7c:	9b01      	ldr	r3, [sp, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f47f af2b 	bne.w	8003bda <xQueueReceive+0x42>
					taskEXIT_CRITICAL();
 8003d84:	f001 fa08 	bl	8005198 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003d88:	2000      	movs	r0, #0
}
 8003d8a:	b005      	add	sp, #20
 8003d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8003da0:	e7fe      	b.n	8003da0 <xQueueReceive+0x208>
	taskEXIT_CRITICAL();
 8003da2:	f001 f9f9 	bl	8005198 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003da6:	4638      	mov	r0, r7
 8003da8:	9901      	ldr	r1, [sp, #4]
 8003daa:	f000 fd77 	bl	800489c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8003dae:	f001 f9d1 	bl	8005154 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003db2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8003db6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003db8:	2d00      	cmp	r5, #0
 8003dba:	dc05      	bgt.n	8003dc8 <xQueueReceive+0x230>
 8003dbc:	e012      	b.n	8003de4 <xQueueReceive+0x24c>
			--cTxLock;
 8003dbe:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003dc0:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003dc4:	b25d      	sxtb	r5, r3
 8003dc6:	d00d      	beq.n	8003de4 <xQueueReceive+0x24c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003dca:	b15b      	cbz	r3, 8003de4 <xQueueReceive+0x24c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dcc:	4638      	mov	r0, r7
 8003dce:	f000 fe05 	bl	80049dc <xTaskRemoveFromEventList>
 8003dd2:	2800      	cmp	r0, #0
 8003dd4:	d0f3      	beq.n	8003dbe <xQueueReceive+0x226>
						vTaskMissedYield();
 8003dd6:	f000 fe8f 	bl	8004af8 <vTaskMissedYield>
			--cTxLock;
 8003dda:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ddc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003de0:	b25d      	sxtb	r5, r3
 8003de2:	d1f1      	bne.n	8003dc8 <xQueueReceive+0x230>
		pxQueue->cTxLock = queueUNLOCKED;
 8003de4:	23ff      	movs	r3, #255	; 0xff
 8003de6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8003dea:	f001 f9d5 	bl	8005198 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003dee:	f001 f9b1 	bl	8005154 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003df2:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8003df6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003df8:	2d00      	cmp	r5, #0
 8003dfa:	dd15      	ble.n	8003e28 <xQueueReceive+0x290>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dfc:	f104 0910 	add.w	r9, r4, #16
 8003e00:	e004      	b.n	8003e0c <xQueueReceive+0x274>
				--cRxLock;
 8003e02:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e04:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003e08:	b25d      	sxtb	r5, r3
 8003e0a:	d00d      	beq.n	8003e28 <xQueueReceive+0x290>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e0c:	6923      	ldr	r3, [r4, #16]
 8003e0e:	b15b      	cbz	r3, 8003e28 <xQueueReceive+0x290>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e10:	4648      	mov	r0, r9
 8003e12:	f000 fde3 	bl	80049dc <xTaskRemoveFromEventList>
 8003e16:	2800      	cmp	r0, #0
 8003e18:	d0f3      	beq.n	8003e02 <xQueueReceive+0x26a>
					vTaskMissedYield();
 8003e1a:	f000 fe6d 	bl	8004af8 <vTaskMissedYield>
				--cRxLock;
 8003e1e:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e20:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003e24:	b25d      	sxtb	r5, r3
 8003e26:	d1f1      	bne.n	8003e0c <xQueueReceive+0x274>
		pxQueue->cRxLock = queueUNLOCKED;
 8003e28:	23ff      	movs	r3, #255	; 0xff
 8003e2a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8003e2e:	f001 f9b3 	bl	8005198 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8003e32:	f000 fc5b 	bl	80046ec <xTaskResumeAll>
 8003e36:	2800      	cmp	r0, #0
 8003e38:	d19b      	bne.n	8003d72 <xQueueReceive+0x1da>
					portYIELD_WITHIN_API();
 8003e3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003e3e:	f8c8 3000 	str.w	r3, [r8]
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8003e4a:	f001 f983 	bl	8005154 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e4e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e50:	2d00      	cmp	r5, #0
 8003e52:	d093      	beq.n	8003d7c <xQueueReceive+0x1e4>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e54:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003e56:	b15a      	cbz	r2, 8003e70 <xQueueReceive+0x2d8>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003e58:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e5a:	6863      	ldr	r3, [r4, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003e5c:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e5e:	4299      	cmp	r1, r3
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003e60:	60e1      	str	r1, [r4, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003e62:	bf28      	it	cs
 8003e64:	6821      	ldrcs	r1, [r4, #0]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003e66:	4630      	mov	r0, r6
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003e68:	bf28      	it	cs
 8003e6a:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003e6c:	f003 f958 	bl	8007120 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e70:	3d01      	subs	r5, #1
 8003e72:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e74:	6923      	ldr	r3, [r4, #16]
 8003e76:	b91b      	cbnz	r3, 8003e80 <xQueueReceive+0x2e8>
				taskEXIT_CRITICAL();
 8003e78:	f001 f98e 	bl	8005198 <vPortExitCritical>
				return pdPASS;
 8003e7c:	2001      	movs	r0, #1
 8003e7e:	e784      	b.n	8003d8a <xQueueReceive+0x1f2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e80:	f104 0010 	add.w	r0, r4, #16
 8003e84:	f000 fdaa 	bl	80049dc <xTaskRemoveFromEventList>
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	d0f5      	beq.n	8003e78 <xQueueReceive+0x2e0>
						queueYIELD_IF_USING_PREEMPTION();
 8003e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e90:	4b03      	ldr	r3, [pc, #12]	; (8003ea0 <xQueueReceive+0x308>)
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	f3bf 8f4f 	dsb	sy
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	e7ec      	b.n	8003e78 <xQueueReceive+0x2e0>
 8003e9e:	bf00      	nop
 8003ea0:	e000ed04 	.word	0xe000ed04

08003ea4 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003ea4:	4b13      	ldr	r3, [pc, #76]	; (8003ef4 <vQueueAddToRegistry+0x50>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	b17a      	cbz	r2, 8003eca <vQueueAddToRegistry+0x26>
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	b1aa      	cbz	r2, 8003eda <vQueueAddToRegistry+0x36>
 8003eae:	691a      	ldr	r2, [r3, #16]
 8003eb0:	b1aa      	cbz	r2, 8003ede <vQueueAddToRegistry+0x3a>
 8003eb2:	699a      	ldr	r2, [r3, #24]
 8003eb4:	b1aa      	cbz	r2, 8003ee2 <vQueueAddToRegistry+0x3e>
 8003eb6:	6a1a      	ldr	r2, [r3, #32]
 8003eb8:	b1aa      	cbz	r2, 8003ee6 <vQueueAddToRegistry+0x42>
 8003eba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ebc:	b1aa      	cbz	r2, 8003eea <vQueueAddToRegistry+0x46>
 8003ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ec0:	b112      	cbz	r2, 8003ec8 <vQueueAddToRegistry+0x24>
 8003ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ec4:	b19a      	cbz	r2, 8003eee <vQueueAddToRegistry+0x4a>
 8003ec6:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ec8:	2206      	movs	r2, #6
	{
 8003eca:	b410      	push	{r4}
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003ecc:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
 8003ed0:	6060      	str	r0, [r4, #4]
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ed2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ed6:	bc10      	pop	{r4}
 8003ed8:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003eda:	2201      	movs	r2, #1
 8003edc:	e7f5      	b.n	8003eca <vQueueAddToRegistry+0x26>
 8003ede:	2202      	movs	r2, #2
 8003ee0:	e7f3      	b.n	8003eca <vQueueAddToRegistry+0x26>
 8003ee2:	2203      	movs	r2, #3
 8003ee4:	e7f1      	b.n	8003eca <vQueueAddToRegistry+0x26>
 8003ee6:	2204      	movs	r2, #4
 8003ee8:	e7ef      	b.n	8003eca <vQueueAddToRegistry+0x26>
 8003eea:	2205      	movs	r2, #5
 8003eec:	e7ed      	b.n	8003eca <vQueueAddToRegistry+0x26>
 8003eee:	2207      	movs	r2, #7
 8003ef0:	e7eb      	b.n	8003eca <vQueueAddToRegistry+0x26>
 8003ef2:	bf00      	nop
 8003ef4:	200018a0 	.word	0x200018a0

08003ef8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ef8:	b570      	push	{r4, r5, r6, lr}
 8003efa:	4604      	mov	r4, r0
 8003efc:	460e      	mov	r6, r1
 8003efe:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003f00:	f001 f928 	bl	8005154 <vPortEnterCritical>
 8003f04:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003f08:	2bff      	cmp	r3, #255	; 0xff
 8003f0a:	bf04      	itt	eq
 8003f0c:	2300      	moveq	r3, #0
 8003f0e:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8003f12:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003f16:	2bff      	cmp	r3, #255	; 0xff
 8003f18:	bf04      	itt	eq
 8003f1a:	2300      	moveq	r3, #0
 8003f1c:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8003f20:	f001 f93a 	bl	8005198 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003f24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d045      	beq.n	8003fb6 <vQueueWaitForMessageRestricted+0xbe>
	taskENTER_CRITICAL();
 8003f2a:	f001 f913 	bl	8005154 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003f2e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8003f32:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f34:	2d00      	cmp	r5, #0
 8003f36:	dd15      	ble.n	8003f64 <vQueueWaitForMessageRestricted+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f38:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8003f3c:	e004      	b.n	8003f48 <vQueueWaitForMessageRestricted+0x50>
			--cTxLock;
 8003f3e:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f40:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003f44:	b25d      	sxtb	r5, r3
 8003f46:	d00d      	beq.n	8003f64 <vQueueWaitForMessageRestricted+0x6c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f4a:	b15b      	cbz	r3, 8003f64 <vQueueWaitForMessageRestricted+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	f000 fd45 	bl	80049dc <xTaskRemoveFromEventList>
 8003f52:	2800      	cmp	r0, #0
 8003f54:	d0f3      	beq.n	8003f3e <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 8003f56:	f000 fdcf 	bl	8004af8 <vTaskMissedYield>
			--cTxLock;
 8003f5a:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f5c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003f60:	b25d      	sxtb	r5, r3
 8003f62:	d1f1      	bne.n	8003f48 <vQueueWaitForMessageRestricted+0x50>
		pxQueue->cTxLock = queueUNLOCKED;
 8003f64:	23ff      	movs	r3, #255	; 0xff
 8003f66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8003f6a:	f001 f915 	bl	8005198 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003f6e:	f001 f8f1 	bl	8005154 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003f72:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8003f76:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f78:	2d00      	cmp	r5, #0
 8003f7a:	dd15      	ble.n	8003fa8 <vQueueWaitForMessageRestricted+0xb0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f7c:	f104 0610 	add.w	r6, r4, #16
 8003f80:	e004      	b.n	8003f8c <vQueueWaitForMessageRestricted+0x94>
				--cRxLock;
 8003f82:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f84:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003f88:	b25d      	sxtb	r5, r3
 8003f8a:	d00d      	beq.n	8003fa8 <vQueueWaitForMessageRestricted+0xb0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f8c:	6923      	ldr	r3, [r4, #16]
 8003f8e:	b15b      	cbz	r3, 8003fa8 <vQueueWaitForMessageRestricted+0xb0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f90:	4630      	mov	r0, r6
 8003f92:	f000 fd23 	bl	80049dc <xTaskRemoveFromEventList>
 8003f96:	2800      	cmp	r0, #0
 8003f98:	d0f3      	beq.n	8003f82 <vQueueWaitForMessageRestricted+0x8a>
					vTaskMissedYield();
 8003f9a:	f000 fdad 	bl	8004af8 <vTaskMissedYield>
				--cRxLock;
 8003f9e:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fa0:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003fa4:	b25d      	sxtb	r5, r3
 8003fa6:	d1f1      	bne.n	8003f8c <vQueueWaitForMessageRestricted+0x94>
		pxQueue->cRxLock = queueUNLOCKED;
 8003fa8:	23ff      	movs	r3, #255	; 0xff
 8003faa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 8003fae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8003fb2:	f001 b8f1 	b.w	8005198 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003fb6:	462a      	mov	r2, r5
 8003fb8:	4631      	mov	r1, r6
 8003fba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003fbe:	f000 fcb5 	bl	800492c <vTaskPlaceOnEventListRestricted>
 8003fc2:	e7b2      	b.n	8003f2a <vQueueWaitForMessageRestricted+0x32>

08003fc4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
	{
		uxCurrentNumberOfTasks++;
 8003fc8:	4c3d      	ldr	r4, [pc, #244]	; (80040c0 <prvAddNewTaskToReadyList+0xfc>)
{
 8003fca:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8003fcc:	f001 f8c2 	bl	8005154 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003fd0:	6823      	ldr	r3, [r4, #0]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	6023      	str	r3, [r4, #0]
		if( pxCurrentTCB == NULL )
 8003fd6:	6863      	ldr	r3, [r4, #4]
 8003fd8:	b3ab      	cbz	r3, 8004046 <prvAddNewTaskToReadyList+0x82>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003fda:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003fde:	b34b      	cbz	r3, 8004034 <prvAddNewTaskToReadyList+0x70>
 8003fe0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003fe2:	f104 0608 	add.w	r6, r4, #8
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003fe6:	2201      	movs	r2, #1
		uxTaskNumber++;
 8003fe8:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
		prvAddTaskToReadyList( pxNewTCB );
 8003fec:	f8d4 7108 	ldr.w	r7, [r4, #264]	; 0x108
 8003ff0:	409a      	lsls	r2, r3
 8003ff2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ff6:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 8003ffa:	4317      	orrs	r7, r2
		uxTaskNumber++;
 8003ffc:	1c4a      	adds	r2, r1, #1
		prvAddTaskToReadyList( pxNewTCB );
 8003ffe:	1d29      	adds	r1, r5, #4
		uxTaskNumber++;
 8004000:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
		prvAddTaskToReadyList( pxNewTCB );
 8004004:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
 8004008:	f7ff fb58 	bl	80036bc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800400c:	f001 f8c4 	bl	8005198 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004010:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004014:	b163      	cbz	r3, 8004030 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004016:	6862      	ldr	r2, [r4, #4]
 8004018:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800401a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800401c:	429a      	cmp	r2, r3
 800401e:	d207      	bcs.n	8004030 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004024:	4b27      	ldr	r3, [pc, #156]	; (80040c4 <prvAddNewTaskToReadyList+0x100>)
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004034:	6862      	ldr	r2, [r4, #4]
 8004036:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004038:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800403a:	f104 0608 	add.w	r6, r4, #8
 800403e:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8004040:	bf98      	it	ls
 8004042:	6065      	strls	r5, [r4, #4]
 8004044:	e7cf      	b.n	8003fe6 <prvAddNewTaskToReadyList+0x22>
			pxCurrentTCB = pxNewTCB;
 8004046:	6065      	str	r5, [r4, #4]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d1c8      	bne.n	8003fe0 <prvAddNewTaskToReadyList+0x1c>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800404e:	f104 0608 	add.w	r6, r4, #8
 8004052:	4630      	mov	r0, r6
 8004054:	f7ff fb22 	bl	800369c <vListInitialise>
 8004058:	f104 001c 	add.w	r0, r4, #28
 800405c:	f7ff fb1e 	bl	800369c <vListInitialise>
 8004060:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8004064:	f7ff fb1a 	bl	800369c <vListInitialise>
 8004068:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800406c:	f7ff fb16 	bl	800369c <vListInitialise>
 8004070:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004074:	f7ff fb12 	bl	800369c <vListInitialise>
 8004078:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 800407c:	f7ff fb0e 	bl	800369c <vListInitialise>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004080:	f104 0894 	add.w	r8, r4, #148	; 0x94
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004084:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8004088:	f7ff fb08 	bl	800369c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800408c:	f104 07a8 	add.w	r7, r4, #168	; 0xa8
	vListInitialise( &xDelayedTaskList1 );
 8004090:	4640      	mov	r0, r8
 8004092:	f7ff fb03 	bl	800369c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004096:	4638      	mov	r0, r7
 8004098:	f7ff fb00 	bl	800369c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800409c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80040a0:	f7ff fafc 	bl	800369c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80040a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80040a8:	f7ff faf8 	bl	800369c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80040ac:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 80040b0:	f7ff faf4 	bl	800369c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80040b4:	f8c4 80f8 	str.w	r8, [r4, #248]	; 0xf8
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80040b8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80040ba:	f8c4 70fc 	str.w	r7, [r4, #252]	; 0xfc
}
 80040be:	e792      	b.n	8003fe6 <prvAddNewTaskToReadyList+0x22>
 80040c0:	20000358 	.word	0x20000358
 80040c4:	e000ed04 	.word	0xe000ed04

080040c8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80040c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80040ca:	4c1c      	ldr	r4, [pc, #112]	; (800413c <prvAddCurrentTaskToDelayedList+0x74>)
{
 80040cc:	4605      	mov	r5, r0
const TickType_t xConstTickCount = xTickCount;
 80040ce:	f8d4 610c 	ldr.w	r6, [r4, #268]	; 0x10c
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040d2:	6860      	ldr	r0, [r4, #4]
{
 80040d4:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040d6:	3004      	adds	r0, #4
 80040d8:	f7ff fb16 	bl	8003708 <uxListRemove>
 80040dc:	b948      	cbnz	r0, 80040f2 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80040de:	2201      	movs	r2, #1
 80040e0:	6861      	ldr	r1, [r4, #4]
 80040e2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80040e6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80040e8:	408a      	lsls	r2, r1
 80040ea:	ea23 0302 	bic.w	r3, r3, r2
 80040ee:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80040f2:	1c6b      	adds	r3, r5, #1
 80040f4:	d018      	beq.n	8004128 <prvAddCurrentTaskToDelayedList+0x60>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80040f6:	6863      	ldr	r3, [r4, #4]
 80040f8:	1975      	adds	r5, r6, r5
 80040fa:	605d      	str	r5, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80040fc:	d307      	bcc.n	800410e <prvAddCurrentTaskToDelayedList+0x46>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040fe:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
 8004102:	6861      	ldr	r1, [r4, #4]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004104:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004108:	3104      	adds	r1, #4
 800410a:	f7ff bae5 	b.w	80036d8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800410e:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 8004112:	6861      	ldr	r1, [r4, #4]
 8004114:	3104      	adds	r1, #4
 8004116:	f7ff fadf 	bl	80036d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800411a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800411e:	42ab      	cmp	r3, r5
					xNextTaskUnblockTime = xTimeToWake;
 8004120:	bf88      	it	hi
 8004122:	f8c4 5110 	strhi.w	r5, [r4, #272]	; 0x110
}
 8004126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004128:	2f00      	cmp	r7, #0
 800412a:	d0e4      	beq.n	80040f6 <prvAddCurrentTaskToDelayedList+0x2e>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800412c:	6861      	ldr	r1, [r4, #4]
 800412e:	4804      	ldr	r0, [pc, #16]	; (8004140 <prvAddCurrentTaskToDelayedList+0x78>)
 8004130:	3104      	adds	r1, #4
}
 8004132:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004136:	f7ff bac1 	b.w	80036bc <vListInsertEnd>
 800413a:	bf00      	nop
 800413c:	20000358 	.word	0x20000358
 8004140:	2000043c 	.word	0x2000043c

08004144 <prvIdleTask>:
{
 8004144:	b580      	push	{r7, lr}
				taskYIELD();
 8004146:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 800414a:	4c1f      	ldr	r4, [pc, #124]	; (80041c8 <prvIdleTask+0x84>)
 800414c:	4e1f      	ldr	r6, [pc, #124]	; (80041cc <prvIdleTask+0x88>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800414e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8004152:	b35b      	cbz	r3, 80041ac <prvIdleTask+0x68>
			taskENTER_CRITICAL();
 8004154:	f000 fffe 	bl	8005154 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004158:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800415c:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800415e:	1d28      	adds	r0, r5, #4
 8004160:	f7ff fad2 	bl	8003708 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004164:	6823      	ldr	r3, [r4, #0]
 8004166:	3b01      	subs	r3, #1
 8004168:	6023      	str	r3, [r4, #0]
				--uxDeletedTasksWaitingCleanUp;
 800416a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800416e:	3b01      	subs	r3, #1
 8004170:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
			taskEXIT_CRITICAL();
 8004174:	f001 f810 	bl	8005198 <vPortExitCritical>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004178:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 800417c:	b163      	cbz	r3, 8004198 <prvIdleTask+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800417e:	2b01      	cmp	r3, #1
 8004180:	d01d      	beq.n	80041be <prvIdleTask+0x7a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004182:	2b02      	cmp	r3, #2
 8004184:	d0e3      	beq.n	800414e <prvIdleTask+0xa>
 8004186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	e7fe      	b.n	8004196 <prvIdleTask+0x52>
				vPortFree( pxTCB->pxStack );
 8004198:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800419a:	f001 f987 	bl	80054ac <vPortFree>
				vPortFree( pxTCB );
 800419e:	4628      	mov	r0, r5
 80041a0:	f001 f984 	bl	80054ac <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041a4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1d3      	bne.n	8004154 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041ac:	68a3      	ldr	r3, [r4, #8]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d9cd      	bls.n	800414e <prvIdleTask+0xa>
				taskYIELD();
 80041b2:	6037      	str	r7, [r6, #0]
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	e7c7      	b.n	800414e <prvIdleTask+0xa>
				vPortFree( pxTCB );
 80041be:	4628      	mov	r0, r5
 80041c0:	f001 f974 	bl	80054ac <vPortFree>
 80041c4:	e7c3      	b.n	800414e <prvIdleTask+0xa>
 80041c6:	bf00      	nop
 80041c8:	20000358 	.word	0x20000358
 80041cc:	e000ed04 	.word	0xe000ed04

080041d0 <xTaskCreateStatic>:
	{
 80041d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041d4:	b083      	sub	sp, #12
 80041d6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80041d8:	e9dd 570a 	ldrd	r5, r7, [sp, #40]	; 0x28
		configASSERT( puxStackBuffer != NULL );
 80041dc:	b1c7      	cbz	r7, 8004210 <xTaskCreateStatic+0x40>
		configASSERT( pxTaskBuffer != NULL );
 80041de:	b174      	cbz	r4, 80041fe <xTaskCreateStatic+0x2e>
 80041e0:	4699      	mov	r9, r3
			volatile size_t xSize = sizeof( StaticTask_t );
 80041e2:	2354      	movs	r3, #84	; 0x54
 80041e4:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041e6:	9b01      	ldr	r3, [sp, #4]
 80041e8:	2b54      	cmp	r3, #84	; 0x54
 80041ea:	d01a      	beq.n	8004222 <xTaskCreateStatic+0x52>
 80041ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	e7fe      	b.n	80041fc <xTaskCreateStatic+0x2c>
 80041fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800420e:	e7fe      	b.n	800420e <xTaskCreateStatic+0x3e>
 8004210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8004220:	e7fe      	b.n	8004220 <xTaskCreateStatic+0x50>
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004222:	2302      	movs	r3, #2
 8004224:	4616      	mov	r6, r2
 8004226:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800422a:	6327      	str	r7, [r4, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800422c:	780a      	ldrb	r2, [r1, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800422e:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004232:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004236:	3b01      	subs	r3, #1
		if( pcName[ x ] == 0x00 )
 8004238:	780a      	ldrb	r2, [r1, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800423a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800423e:	4680      	mov	r8, r0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004240:	f023 0607 	bic.w	r6, r3, #7
		if( pcName[ x ] == 0x00 )
 8004244:	2a00      	cmp	r2, #0
 8004246:	d04d      	beq.n	80042e4 <xTaskCreateStatic+0x114>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004248:	784b      	ldrb	r3, [r1, #1]
 800424a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 800424e:	784b      	ldrb	r3, [r1, #1]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d047      	beq.n	80042e4 <xTaskCreateStatic+0x114>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004254:	788b      	ldrb	r3, [r1, #2]
 8004256:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 800425a:	788b      	ldrb	r3, [r1, #2]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d041      	beq.n	80042e4 <xTaskCreateStatic+0x114>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004260:	78cb      	ldrb	r3, [r1, #3]
 8004262:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 8004266:	78cb      	ldrb	r3, [r1, #3]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d03b      	beq.n	80042e4 <xTaskCreateStatic+0x114>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800426c:	790b      	ldrb	r3, [r1, #4]
 800426e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 8004272:	790b      	ldrb	r3, [r1, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d035      	beq.n	80042e4 <xTaskCreateStatic+0x114>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004278:	794b      	ldrb	r3, [r1, #5]
 800427a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 800427e:	794b      	ldrb	r3, [r1, #5]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d02f      	beq.n	80042e4 <xTaskCreateStatic+0x114>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004284:	798b      	ldrb	r3, [r1, #6]
 8004286:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 800428a:	798b      	ldrb	r3, [r1, #6]
 800428c:	b353      	cbz	r3, 80042e4 <xTaskCreateStatic+0x114>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800428e:	79cb      	ldrb	r3, [r1, #7]
 8004290:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 8004294:	79cb      	ldrb	r3, [r1, #7]
 8004296:	b32b      	cbz	r3, 80042e4 <xTaskCreateStatic+0x114>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004298:	7a0b      	ldrb	r3, [r1, #8]
 800429a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 800429e:	7a0b      	ldrb	r3, [r1, #8]
 80042a0:	b303      	cbz	r3, 80042e4 <xTaskCreateStatic+0x114>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042a2:	7a4b      	ldrb	r3, [r1, #9]
 80042a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 80042a8:	7a4b      	ldrb	r3, [r1, #9]
 80042aa:	b1db      	cbz	r3, 80042e4 <xTaskCreateStatic+0x114>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042ac:	7a8b      	ldrb	r3, [r1, #10]
 80042ae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 80042b2:	7a8b      	ldrb	r3, [r1, #10]
 80042b4:	b1b3      	cbz	r3, 80042e4 <xTaskCreateStatic+0x114>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042b6:	7acb      	ldrb	r3, [r1, #11]
 80042b8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 80042bc:	7acb      	ldrb	r3, [r1, #11]
 80042be:	b18b      	cbz	r3, 80042e4 <xTaskCreateStatic+0x114>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042c0:	7b0b      	ldrb	r3, [r1, #12]
 80042c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 80042c6:	7b0b      	ldrb	r3, [r1, #12]
 80042c8:	b163      	cbz	r3, 80042e4 <xTaskCreateStatic+0x114>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042ca:	7b4b      	ldrb	r3, [r1, #13]
 80042cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 80042d0:	7b4b      	ldrb	r3, [r1, #13]
 80042d2:	b13b      	cbz	r3, 80042e4 <xTaskCreateStatic+0x114>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042d4:	7b8b      	ldrb	r3, [r1, #14]
 80042d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		if( pcName[ x ] == 0x00 )
 80042da:	7b8b      	ldrb	r3, [r1, #14]
 80042dc:	b113      	cbz	r3, 80042e4 <xTaskCreateStatic+0x114>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042de:	7bcb      	ldrb	r3, [r1, #15]
 80042e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042e4:	2d06      	cmp	r5, #6
 80042e6:	bf28      	it	cs
 80042e8:	2506      	movcs	r5, #6
 80042ea:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 80042ec:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80042ee:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042f0:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042f2:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80042f6:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042f8:	f7ff f9dc 	bl	80036b4 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042fc:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004300:	f104 0018 	add.w	r0, r4, #24
 8004304:	f7ff f9d6 	bl	80036b4 <vListInitialiseItem>
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004308:	464a      	mov	r2, r9
 800430a:	4641      	mov	r1, r8
		pxNewTCB->ulNotifiedValue = 0;
 800430c:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800430e:	4630      	mov	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004310:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004312:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004314:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004318:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800431a:	f000 fef1 	bl	8005100 <pxPortInitialiseStack>
 800431e:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
 8004320:	4620      	mov	r0, r4
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004322:	6023      	str	r3, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8004324:	f7ff fe4e 	bl	8003fc4 <prvAddNewTaskToReadyList>
	}
 8004328:	4620      	mov	r0, r4
 800432a:	b003      	add	sp, #12
 800432c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004330 <xTaskCreate>:
	{
 8004330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004334:	0097      	lsls	r7, r2, #2
	{
 8004336:	4605      	mov	r5, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004338:	4638      	mov	r0, r7
	{
 800433a:	460c      	mov	r4, r1
 800433c:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800433e:	f001 f803 	bl	8005348 <pvPortMalloc>
			if( pxStack != NULL )
 8004342:	2800      	cmp	r0, #0
 8004344:	f000 8097 	beq.w	8004476 <xTaskCreate+0x146>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004348:	4681      	mov	r9, r0
 800434a:	2054      	movs	r0, #84	; 0x54
 800434c:	f000 fffc 	bl	8005348 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004350:	4680      	mov	r8, r0
 8004352:	2800      	cmp	r0, #0
 8004354:	f000 8093 	beq.w	800447e <xTaskCreate+0x14e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004358:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800435a:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800435e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004362:	7823      	ldrb	r3, [r4, #0]
 8004364:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8004368:	7823      	ldrb	r3, [r4, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d04d      	beq.n	800440a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800436e:	7863      	ldrb	r3, [r4, #1]
 8004370:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 8004374:	7863      	ldrb	r3, [r4, #1]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d047      	beq.n	800440a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800437a:	78a3      	ldrb	r3, [r4, #2]
 800437c:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 8004380:	78a3      	ldrb	r3, [r4, #2]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d041      	beq.n	800440a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004386:	78e3      	ldrb	r3, [r4, #3]
 8004388:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 800438c:	78e3      	ldrb	r3, [r4, #3]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d03b      	beq.n	800440a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004392:	7923      	ldrb	r3, [r4, #4]
 8004394:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 8004398:	7923      	ldrb	r3, [r4, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d035      	beq.n	800440a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800439e:	7963      	ldrb	r3, [r4, #5]
 80043a0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 80043a4:	7963      	ldrb	r3, [r4, #5]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d02f      	beq.n	800440a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043aa:	79a3      	ldrb	r3, [r4, #6]
 80043ac:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 80043b0:	79a3      	ldrb	r3, [r4, #6]
 80043b2:	b353      	cbz	r3, 800440a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043b4:	79e3      	ldrb	r3, [r4, #7]
 80043b6:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 80043ba:	79e3      	ldrb	r3, [r4, #7]
 80043bc:	b32b      	cbz	r3, 800440a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043be:	7a23      	ldrb	r3, [r4, #8]
 80043c0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 80043c4:	7a23      	ldrb	r3, [r4, #8]
 80043c6:	b303      	cbz	r3, 800440a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043c8:	7a63      	ldrb	r3, [r4, #9]
 80043ca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 80043ce:	7a63      	ldrb	r3, [r4, #9]
 80043d0:	b1db      	cbz	r3, 800440a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043d2:	7aa3      	ldrb	r3, [r4, #10]
 80043d4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 80043d8:	7aa3      	ldrb	r3, [r4, #10]
 80043da:	b1b3      	cbz	r3, 800440a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043dc:	7ae3      	ldrb	r3, [r4, #11]
 80043de:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 80043e2:	7ae3      	ldrb	r3, [r4, #11]
 80043e4:	b18b      	cbz	r3, 800440a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043e6:	7b23      	ldrb	r3, [r4, #12]
 80043e8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 80043ec:	7b23      	ldrb	r3, [r4, #12]
 80043ee:	b163      	cbz	r3, 800440a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043f0:	7b63      	ldrb	r3, [r4, #13]
 80043f2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 80043f6:	7b63      	ldrb	r3, [r4, #13]
 80043f8:	b13b      	cbz	r3, 800440a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043fa:	7ba3      	ldrb	r3, [r4, #14]
 80043fc:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
		if( pcName[ x ] == 0x00 )
 8004400:	7ba3      	ldrb	r3, [r4, #14]
 8004402:	b113      	cbz	r3, 800440a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004404:	7be3      	ldrb	r3, [r4, #15]
 8004406:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800440a:	9c08      	ldr	r4, [sp, #32]
 800440c:	f04f 0a00 	mov.w	sl, #0
 8004410:	2c06      	cmp	r4, #6
 8004412:	bf28      	it	cs
 8004414:	2406      	movcs	r4, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004416:	f108 0004 	add.w	r0, r8, #4
	pxNewTCB->uxPriority = uxPriority;
 800441a:	f8c8 402c 	str.w	r4, [r8, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800441e:	f8c8 4044 	str.w	r4, [r8, #68]	; 0x44
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004422:	f888 a043 	strb.w	sl, [r8, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8004426:	f8c8 a048 	str.w	sl, [r8, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800442a:	f7ff f943 	bl	80036b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800442e:	f108 0018 	add.w	r0, r8, #24
 8004432:	f7ff f93f 	bl	80036b4 <vListInitialiseItem>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004436:	1f39      	subs	r1, r7, #4
 8004438:	4449      	add	r1, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800443a:	f1c4 0407 	rsb	r4, r4, #7
		pxNewTCB->ulNotifiedValue = 0;
 800443e:	f8c8 a04c 	str.w	sl, [r8, #76]	; 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004442:	f021 0007 	bic.w	r0, r1, #7
 8004446:	4632      	mov	r2, r6
 8004448:	4629      	mov	r1, r5
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800444a:	f8c8 4018 	str.w	r4, [r8, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800444e:	f888 a050 	strb.w	sl, [r8, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004452:	f8c8 8010 	str.w	r8, [r8, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004456:	f8c8 8024 	str.w	r8, [r8, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800445a:	f000 fe51 	bl	8005100 <pxPortInitialiseStack>
	if( ( void * ) pxCreatedTask != NULL )
 800445e:	9b09      	ldr	r3, [sp, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004460:	f8c8 0000 	str.w	r0, [r8]
	if( ( void * ) pxCreatedTask != NULL )
 8004464:	b10b      	cbz	r3, 800446a <xTaskCreate+0x13a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004466:	f8c3 8000 	str.w	r8, [r3]
			prvAddNewTaskToReadyList( pxNewTCB );
 800446a:	4640      	mov	r0, r8
 800446c:	f7ff fdaa 	bl	8003fc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004470:	2001      	movs	r0, #1
	}
 8004472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004476:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800447a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					vPortFree( pxStack );
 800447e:	4648      	mov	r0, r9
 8004480:	f001 f814 	bl	80054ac <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004484:	f04f 30ff 	mov.w	r0, #4294967295
 8004488:	e7f3      	b.n	8004472 <xTaskCreate+0x142>
 800448a:	bf00      	nop

0800448c <vTaskStartScheduler>:
{
 800448c:	b570      	push	{r4, r5, r6, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800448e:	2500      	movs	r5, #0
{
 8004490:	b084      	sub	sp, #16
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004492:	aa02      	add	r2, sp, #8
 8004494:	4668      	mov	r0, sp
 8004496:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004498:	e9cd 5500 	strd	r5, r5, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800449c:	f001 fd7a 	bl	8005f94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044a0:	9a01      	ldr	r2, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
 80044a2:	b1ca      	cbz	r2, 80044d8 <vTaskStartScheduler+0x4c>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044a4:	9c00      	ldr	r4, [sp, #0]
		configASSERT( pxTaskBuffer != NULL );
 80044a6:	b174      	cbz	r4, 80044c6 <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80044a8:	2354      	movs	r3, #84	; 0x54
 80044aa:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 80044ac:	9903      	ldr	r1, [sp, #12]
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044ae:	9b02      	ldr	r3, [sp, #8]
			configASSERT( xSize == sizeof( TCB_t ) );
 80044b0:	2954      	cmp	r1, #84	; 0x54
 80044b2:	d01a      	beq.n	80044ea <vTaskStartScheduler+0x5e>
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	e7fe      	b.n	80044c4 <vTaskStartScheduler+0x38>
 80044c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80044d6:	e7fe      	b.n	80044d6 <vTaskStartScheduler+0x4a>
 80044d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80044e8:	e7fe      	b.n	80044e8 <vTaskStartScheduler+0x5c>
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80044ea:	2002      	movs	r0, #2
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044ec:	4927      	ldr	r1, [pc, #156]	; (800458c <vTaskStartScheduler+0x100>)
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80044ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044f2:	3b01      	subs	r3, #1
 80044f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80044f8:	6322      	str	r2, [r4, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044fa:	6361      	str	r1, [r4, #52]	; 0x34
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80044fc:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
		pxNewTCB->uxMutexesHeld = 0;
 8004500:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004504:	1d20      	adds	r0, r4, #4
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004506:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800450a:	f884 5043 	strb.w	r5, [r4, #67]	; 0x43
	pxNewTCB->uxPriority = uxPriority;
 800450e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004510:	f023 0607 	bic.w	r6, r3, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004514:	f7ff f8ce 	bl	80036b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004518:	f104 0018 	add.w	r0, r4, #24
 800451c:	f7ff f8ca 	bl	80036b4 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004520:	2307      	movs	r3, #7
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004522:	462a      	mov	r2, r5
 8004524:	491a      	ldr	r1, [pc, #104]	; (8004590 <vTaskStartScheduler+0x104>)
		pxNewTCB->ulNotifiedValue = 0;
 8004526:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004528:	61a3      	str	r3, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800452a:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800452c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800452e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004530:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004534:	f000 fde4 	bl	8005100 <pxPortInitialiseStack>
 8004538:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
 800453a:	4620      	mov	r0, r4
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800453c:	6023      	str	r3, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 800453e:	f7ff fd41 	bl	8003fc4 <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
 8004542:	f000 fca3 	bl	8004e8c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8004546:	2801      	cmp	r0, #1
 8004548:	d003      	beq.n	8004552 <vTaskStartScheduler+0xc6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800454a:	3001      	adds	r0, #1
 800454c:	d015      	beq.n	800457a <vTaskStartScheduler+0xee>
}
 800454e:	b004      	add	sp, #16
 8004550:	bd70      	pop	{r4, r5, r6, pc}
 8004552:	f04f 0250 	mov.w	r2, #80	; 0x50
 8004556:	f382 8811 	msr	BASEPRI, r2
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8004562:	f04f 31ff 	mov.w	r1, #4294967295
 8004566:	4a0b      	ldr	r2, [pc, #44]	; (8004594 <vTaskStartScheduler+0x108>)
 8004568:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
		xSchedulerRunning = pdTRUE;
 800456c:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		xTickCount = ( TickType_t ) 0U;
 8004570:	f8c2 510c 	str.w	r5, [r2, #268]	; 0x10c
		if( xPortStartScheduler() != pdFALSE )
 8004574:	f000 fe7a 	bl	800526c <xPortStartScheduler>
 8004578:	e7e9      	b.n	800454e <vTaskStartScheduler+0xc2>
 800457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800458a:	e7fe      	b.n	800458a <vTaskStartScheduler+0xfe>
 800458c:	454c4449 	.word	0x454c4449
 8004590:	08004145 	.word	0x08004145
 8004594:	20000358 	.word	0x20000358

08004598 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004598:	4a03      	ldr	r2, [pc, #12]	; (80045a8 <vTaskSuspendAll+0x10>)
 800459a:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
 800459e:	3301      	adds	r3, #1
 80045a0:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
}
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	20000358 	.word	0x20000358

080045ac <xTaskGetTickCount>:
		xTicks = xTickCount;
 80045ac:	4b01      	ldr	r3, [pc, #4]	; (80045b4 <xTaskGetTickCount+0x8>)
 80045ae:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
 80045b2:	4770      	bx	lr
 80045b4:	20000358 	.word	0x20000358

080045b8 <xTaskIncrementTick>:
{
 80045b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045bc:	4c49      	ldr	r4, [pc, #292]	; (80046e4 <xTaskIncrementTick+0x12c>)
 80045be:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d15d      	bne.n	8004682 <xTaskIncrementTick+0xca>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80045c6:	f8d4 610c 	ldr.w	r6, [r4, #268]	; 0x10c
 80045ca:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 80045cc:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80045d0:	b9d6      	cbnz	r6, 8004608 <xTaskIncrementTick+0x50>
			taskSWITCH_DELAYED_LISTS();
 80045d2:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d16c      	bne.n	80046b6 <xTaskIncrementTick+0xfe>
 80045dc:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 80045e0:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
 80045e4:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8
 80045e8:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
 80045ec:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80045f0:	3301      	adds	r3, #1
 80045f2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045f6:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d168      	bne.n	80046d2 <xTaskIncrementTick+0x11a>
		xNextTaskUnblockTime = portMAX_DELAY;
 8004600:	f04f 33ff 	mov.w	r3, #4294967295
 8004604:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004608:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800460c:	42b3      	cmp	r3, r6
 800460e:	d846      	bhi.n	800469e <xTaskIncrementTick+0xe6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004610:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 8004614:	681d      	ldr	r5, [r3, #0]
 8004616:	2d00      	cmp	r5, #0
 8004618:	d056      	beq.n	80046c8 <xTaskIncrementTick+0x110>
BaseType_t xSwitchRequired = pdFALSE;
 800461a:	2500      	movs	r5, #0
					prvAddTaskToReadyList( pxTCB );
 800461c:	f04f 0901 	mov.w	r9, #1
 8004620:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80046e8 <xTaskIncrementTick+0x130>
 8004624:	e021      	b.n	800466a <xTaskIncrementTick+0xb2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004626:	4650      	mov	r0, sl
 8004628:	f7ff f86e 	bl	8003708 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800462c:	6abb      	ldr	r3, [r7, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800462e:	f107 0018 	add.w	r0, r7, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004632:	b10b      	cbz	r3, 8004638 <xTaskIncrementTick+0x80>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004634:	f7ff f868 	bl	8003708 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004638:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800463a:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
 800463e:	fa09 f300 	lsl.w	r3, r9, r0
 8004642:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004646:	4313      	orrs	r3, r2
 8004648:	4651      	mov	r1, sl
 800464a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800464e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 8004652:	f7ff f833 	bl	80036bc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004656:	6862      	ldr	r2, [r4, #4]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004658:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800465c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800465e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004660:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
 8004662:	4291      	cmp	r1, r2
 8004664:	bf28      	it	cs
 8004666:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004668:	b373      	cbz	r3, 80046c8 <xTaskIncrementTick+0x110>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800466a:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004672:	687b      	ldr	r3, [r7, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004674:	f107 0a04 	add.w	sl, r7, #4
					if( xConstTickCount < xItemValue )
 8004678:	429e      	cmp	r6, r3
 800467a:	d2d4      	bcs.n	8004626 <xTaskIncrementTick+0x6e>
						xNextTaskUnblockTime = xItemValue;
 800467c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
						break;
 8004680:	e00e      	b.n	80046a0 <xTaskIncrementTick+0xe8>
BaseType_t xSwitchRequired = pdFALSE;
 8004682:	2500      	movs	r5, #0
		++uxPendedTicks;
 8004684:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004688:	3301      	adds	r3, #1
 800468a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
		if( xYieldPending != pdFALSE )
 800468e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
			xSwitchRequired = pdTRUE;
 8004692:	2b00      	cmp	r3, #0
}
 8004694:	bf0c      	ite	eq
 8004696:	4628      	moveq	r0, r5
 8004698:	2001      	movne	r0, #1
 800469a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
BaseType_t xSwitchRequired = pdFALSE;
 800469e:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046a0:	6863      	ldr	r3, [r4, #4]
 80046a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80046a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80046ac:	689b      	ldr	r3, [r3, #8]
				xSwitchRequired = pdTRUE;
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	bf28      	it	cs
 80046b2:	2501      	movcs	r5, #1
 80046b4:	e7eb      	b.n	800468e <xTaskIncrementTick+0xd6>
 80046b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
			taskSWITCH_DELAYED_LISTS();
 80046c6:	e7fe      	b.n	80046c6 <xTaskIncrementTick+0x10e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046c8:	f04f 33ff 	mov.w	r3, #4294967295
 80046cc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
					break;
 80046d0:	e7e6      	b.n	80046a0 <xTaskIncrementTick+0xe8>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80046d2:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 80046d6:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
}
 80046e0:	e792      	b.n	8004608 <xTaskIncrementTick+0x50>
 80046e2:	bf00      	nop
 80046e4:	20000358 	.word	0x20000358
 80046e8:	20000360 	.word	0x20000360

080046ec <xTaskResumeAll>:
{
 80046ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 80046f0:	4c3d      	ldr	r4, [pc, #244]	; (80047e8 <xTaskResumeAll+0xfc>)
 80046f2:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 80046f6:	b943      	cbnz	r3, 800470a <xTaskResumeAll+0x1e>
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	e7fe      	b.n	8004708 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 800470a:	f000 fd23 	bl	8005154 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800470e:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8004712:	3b01      	subs	r3, #1
 8004714:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004718:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800471c:	2b00      	cmp	r3, #0
 800471e:	d146      	bne.n	80047ae <xTaskResumeAll+0xc2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d043      	beq.n	80047ae <xTaskResumeAll+0xc2>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004726:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800472a:	b383      	cbz	r3, 800478e <xTaskResumeAll+0xa2>
					prvAddTaskToReadyList( pxTCB );
 800472c:	2601      	movs	r6, #1
 800472e:	f104 0708 	add.w	r7, r4, #8
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004732:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8004736:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004738:	f105 0804 	add.w	r8, r5, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800473c:	f105 0018 	add.w	r0, r5, #24
 8004740:	f7fe ffe2 	bl	8003708 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004744:	4640      	mov	r0, r8
 8004746:	f7fe ffdf 	bl	8003708 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800474a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800474c:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
 8004750:	fa06 f300 	lsl.w	r3, r6, r0
 8004754:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004758:	4313      	orrs	r3, r2
 800475a:	4641      	mov	r1, r8
 800475c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8004760:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 8004764:	f7fe ffaa 	bl	80036bc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004768:	6863      	ldr	r3, [r4, #4]
 800476a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800476c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476e:	429a      	cmp	r2, r3
 8004770:	d323      	bcc.n	80047ba <xTaskResumeAll+0xce>
						xYieldPending = pdTRUE;
 8004772:	f8c4 611c 	str.w	r6, [r4, #284]	; 0x11c
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004776:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1d9      	bne.n	8004732 <xTaskResumeAll+0x46>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800477e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	bb43      	cbnz	r3, 80047d8 <xTaskResumeAll+0xec>
		xNextTaskUnblockTime = portMAX_DELAY;
 8004786:	f04f 33ff 	mov.w	r3, #4294967295
 800478a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800478e:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004792:	b14d      	cbz	r5, 80047a8 <xTaskResumeAll+0xbc>
								xYieldPending = pdTRUE;
 8004794:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 8004796:	f7ff ff0f 	bl	80045b8 <xTaskIncrementTick>
 800479a:	b108      	cbz	r0, 80047a0 <xTaskResumeAll+0xb4>
								xYieldPending = pdTRUE;
 800479c:	f8c4 611c 	str.w	r6, [r4, #284]	; 0x11c
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80047a0:	3d01      	subs	r5, #1
 80047a2:	d1f8      	bne.n	8004796 <xTaskResumeAll+0xaa>
						uxPendedTicks = 0;
 80047a4:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
				if( xYieldPending != pdFALSE )
 80047a8:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 80047ac:	b953      	cbnz	r3, 80047c4 <xTaskResumeAll+0xd8>
BaseType_t xAlreadyYielded = pdFALSE;
 80047ae:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80047b0:	f000 fcf2 	bl	8005198 <vPortExitCritical>
}
 80047b4:	4620      	mov	r0, r4
 80047b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047ba:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1b7      	bne.n	8004732 <xTaskResumeAll+0x46>
 80047c2:	e7dc      	b.n	800477e <xTaskResumeAll+0x92>
					taskYIELD_IF_USING_PREEMPTION();
 80047c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047c8:	4b08      	ldr	r3, [pc, #32]	; (80047ec <xTaskResumeAll+0x100>)
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80047d4:	2401      	movs	r4, #1
 80047d6:	e7eb      	b.n	80047b0 <xTaskResumeAll+0xc4>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80047d8:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 80047dc:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
}
 80047e6:	e7d2      	b.n	800478e <xTaskResumeAll+0xa2>
 80047e8:	20000358 	.word	0x20000358
 80047ec:	e000ed04 	.word	0xe000ed04

080047f0 <vTaskDelay>:
	{
 80047f0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80047f2:	b1b0      	cbz	r0, 8004822 <vTaskDelay+0x32>
			configASSERT( uxSchedulerSuspended == 0 );
 80047f4:	4b0f      	ldr	r3, [pc, #60]	; (8004834 <vTaskDelay+0x44>)
 80047f6:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
 80047fa:	b141      	cbz	r1, 800480e <vTaskDelay+0x1e>
 80047fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004800:	f383 8811 	msr	BASEPRI, r3
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	e7fe      	b.n	800480c <vTaskDelay+0x1c>
	++uxSchedulerSuspended;
 800480e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8004812:	3201      	adds	r2, #1
 8004814:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004818:	f7ff fc56 	bl	80040c8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800481c:	f7ff ff66 	bl	80046ec <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004820:	b938      	cbnz	r0, 8004832 <vTaskDelay+0x42>
			portYIELD_WITHIN_API();
 8004822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004826:	4b04      	ldr	r3, [pc, #16]	; (8004838 <vTaskDelay+0x48>)
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	f3bf 8f6f 	isb	sy
	}
 8004832:	bd08      	pop	{r3, pc}
 8004834:	20000358 	.word	0x20000358
 8004838:	e000ed04 	.word	0xe000ed04

0800483c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800483c:	4a16      	ldr	r2, [pc, #88]	; (8004898 <vTaskSwitchContext+0x5c>)
 800483e:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
 8004842:	b11b      	cbz	r3, 800484c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8004844:	2301      	movs	r3, #1
 8004846:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
 800484a:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800484c:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004850:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004854:	fab3 f383 	clz	r3, r3
 8004858:	b2db      	uxtb	r3, r3
 800485a:	f1c3 031f 	rsb	r3, r3, #31
 800485e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004862:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 8004866:	6881      	ldr	r1, [r0, #8]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	b941      	cbnz	r1, 800487e <vTaskSwitchContext+0x42>
	__asm volatile
 800486c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	e7fe      	b.n	800487c <vTaskSwitchContext+0x40>
 800487e:	68c1      	ldr	r1, [r0, #12]
 8004880:	4413      	add	r3, r2
 8004882:	6849      	ldr	r1, [r1, #4]
 8004884:	3310      	adds	r3, #16
 8004886:	4299      	cmp	r1, r3
 8004888:	60c1      	str	r1, [r0, #12]
 800488a:	bf08      	it	eq
 800488c:	6849      	ldreq	r1, [r1, #4]
 800488e:	68cb      	ldr	r3, [r1, #12]
 8004890:	bf08      	it	eq
 8004892:	60c1      	streq	r1, [r0, #12]
 8004894:	6053      	str	r3, [r2, #4]
}
 8004896:	4770      	bx	lr
 8004898:	20000358 	.word	0x20000358

0800489c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800489c:	b328      	cbz	r0, 80048ea <vTaskPlaceOnEventList+0x4e>
{
 800489e:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048a0:	4c20      	ldr	r4, [pc, #128]	; (8004924 <vTaskPlaceOnEventList+0x88>)
 80048a2:	460d      	mov	r5, r1
 80048a4:	6861      	ldr	r1, [r4, #4]
 80048a6:	3118      	adds	r1, #24
 80048a8:	f7fe ff16 	bl	80036d8 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 80048ac:	f8d4 610c 	ldr.w	r6, [r4, #268]	; 0x10c
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048b0:	6860      	ldr	r0, [r4, #4]
 80048b2:	3004      	adds	r0, #4
 80048b4:	f7fe ff28 	bl	8003708 <uxListRemove>
 80048b8:	b948      	cbnz	r0, 80048ce <vTaskPlaceOnEventList+0x32>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80048ba:	2201      	movs	r2, #1
 80048bc:	6861      	ldr	r1, [r4, #4]
 80048be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80048c2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80048c4:	408a      	lsls	r2, r1
 80048c6:	ea23 0302 	bic.w	r3, r3, r2
 80048ca:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048ce:	1c6b      	adds	r3, r5, #1
 80048d0:	d014      	beq.n	80048fc <vTaskPlaceOnEventList+0x60>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048d2:	6863      	ldr	r3, [r4, #4]
 80048d4:	19ad      	adds	r5, r5, r6
 80048d6:	605d      	str	r5, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048d8:	d317      	bcc.n	800490a <vTaskPlaceOnEventList+0x6e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048da:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
 80048de:	6861      	ldr	r1, [r4, #4]
}
 80048e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048e4:	3104      	adds	r1, #4
 80048e6:	f7fe bef7 	b.w	80036d8 <vListInsert>
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80048fa:	e7fe      	b.n	80048fa <vTaskPlaceOnEventList+0x5e>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048fc:	6861      	ldr	r1, [r4, #4]
 80048fe:	480a      	ldr	r0, [pc, #40]	; (8004928 <vTaskPlaceOnEventList+0x8c>)
 8004900:	3104      	adds	r1, #4
}
 8004902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004906:	f7fe bed9 	b.w	80036bc <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800490a:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 800490e:	6861      	ldr	r1, [r4, #4]
 8004910:	3104      	adds	r1, #4
 8004912:	f7fe fee1 	bl	80036d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004916:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800491a:	429d      	cmp	r5, r3
					xNextTaskUnblockTime = xTimeToWake;
 800491c:	bf38      	it	cc
 800491e:	f8c4 5110 	strcc.w	r5, [r4, #272]	; 0x110
}
 8004922:	bd70      	pop	{r4, r5, r6, pc}
 8004924:	20000358 	.word	0x20000358
 8004928:	2000043c 	.word	0x2000043c

0800492c <vTaskPlaceOnEventListRestricted>:
	{
 800492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxEventList );
 800492e:	2800      	cmp	r0, #0
 8004930:	d03e      	beq.n	80049b0 <vTaskPlaceOnEventListRestricted+0x84>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004932:	4617      	mov	r7, r2
 8004934:	4c27      	ldr	r4, [pc, #156]	; (80049d4 <vTaskPlaceOnEventListRestricted+0xa8>)
 8004936:	460d      	mov	r5, r1
 8004938:	6861      	ldr	r1, [r4, #4]
 800493a:	3118      	adds	r1, #24
 800493c:	f7fe febe 	bl	80036bc <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 8004940:	f8d4 610c 	ldr.w	r6, [r4, #268]	; 0x10c
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004944:	6860      	ldr	r0, [r4, #4]
 8004946:	3004      	adds	r0, #4
		if( xWaitIndefinitely != pdFALSE )
 8004948:	b1ef      	cbz	r7, 8004986 <vTaskPlaceOnEventListRestricted+0x5a>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800494a:	f7fe fedd 	bl	8003708 <uxListRemove>
 800494e:	2800      	cmp	r0, #0
 8004950:	d139      	bne.n	80049c6 <vTaskPlaceOnEventListRestricted+0x9a>
			xTicksToWait = portMAX_DELAY;
 8004952:	f04f 35ff 	mov.w	r5, #4294967295
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004956:	2201      	movs	r2, #1
 8004958:	6861      	ldr	r1, [r4, #4]
 800495a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800495e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004960:	408a      	lsls	r2, r1
 8004962:	ea23 0302 	bic.w	r3, r3, r2
 8004966:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800496a:	1c6b      	adds	r3, r5, #1
 800496c:	d029      	beq.n	80049c2 <vTaskPlaceOnEventListRestricted+0x96>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800496e:	6863      	ldr	r3, [r4, #4]
 8004970:	1975      	adds	r5, r6, r5
 8004972:	605d      	str	r5, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004974:	d30f      	bcc.n	8004996 <vTaskPlaceOnEventListRestricted+0x6a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004976:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
 800497a:	6861      	ldr	r1, [r4, #4]
	}
 800497c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004980:	3104      	adds	r1, #4
 8004982:	f7fe bea9 	b.w	80036d8 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004986:	f7fe febf 	bl	8003708 <uxListRemove>
 800498a:	2800      	cmp	r0, #0
 800498c:	d0e3      	beq.n	8004956 <vTaskPlaceOnEventListRestricted+0x2a>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800498e:	6863      	ldr	r3, [r4, #4]
 8004990:	1975      	adds	r5, r6, r5
 8004992:	605d      	str	r5, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004994:	d2ef      	bcs.n	8004976 <vTaskPlaceOnEventListRestricted+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004996:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 800499a:	6861      	ldr	r1, [r4, #4]
 800499c:	3104      	adds	r1, #4
 800499e:	f7fe fe9b 	bl	80036d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049a2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80049a6:	429d      	cmp	r5, r3
 80049a8:	d201      	bcs.n	80049ae <vTaskPlaceOnEventListRestricted+0x82>
					xNextTaskUnblockTime = xTimeToWake;
 80049aa:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
	}
 80049ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80049c0:	e7fe      	b.n	80049c0 <vTaskPlaceOnEventListRestricted+0x94>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80049c2:	2f00      	cmp	r7, #0
 80049c4:	d0d3      	beq.n	800496e <vTaskPlaceOnEventListRestricted+0x42>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049c6:	6861      	ldr	r1, [r4, #4]
 80049c8:	4803      	ldr	r0, [pc, #12]	; (80049d8 <vTaskPlaceOnEventListRestricted+0xac>)
 80049ca:	3104      	adds	r1, #4
	}
 80049cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049d0:	f7fe be74 	b.w	80036bc <vListInsertEnd>
 80049d4:	20000358 	.word	0x20000358
 80049d8:	2000043c 	.word	0x2000043c

080049dc <xTaskRemoveFromEventList>:
{
 80049dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80049de:	68c3      	ldr	r3, [r0, #12]
 80049e0:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80049e2:	b36d      	cbz	r5, 8004a40 <xTaskRemoveFromEventList+0x64>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049e4:	4c1b      	ldr	r4, [pc, #108]	; (8004a54 <xTaskRemoveFromEventList+0x78>)
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049e6:	f105 0618 	add.w	r6, r5, #24
 80049ea:	4630      	mov	r0, r6
 80049ec:	f7fe fe8c 	bl	8003708 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049f0:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 80049f4:	b173      	cbz	r3, 8004a14 <xTaskRemoveFromEventList+0x38>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049f6:	4631      	mov	r1, r6
 80049f8:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80049fc:	f7fe fe5e 	bl	80036bc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a00:	6863      	ldr	r3, [r4, #4]
 8004a02:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a06:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8004a08:	bf8a      	itet	hi
 8004a0a:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
 8004a0c:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8004a0e:	f8c4 011c 	strhi.w	r0, [r4, #284]	; 0x11c
}
 8004a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a14:	1d2e      	adds	r6, r5, #4
 8004a16:	4630      	mov	r0, r6
 8004a18:	f7fe fe76 	bl	8003708 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004a20:	f8d4 7108 	ldr.w	r7, [r4, #264]	; 0x108
 8004a24:	4083      	lsls	r3, r0
 8004a26:	f104 0208 	add.w	r2, r4, #8
 8004a2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a2e:	433b      	orrs	r3, r7
 8004a30:	4631      	mov	r1, r6
 8004a32:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8004a36:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 8004a3a:	f7fe fe3f 	bl	80036bc <vListInsertEnd>
 8004a3e:	e7df      	b.n	8004a00 <xTaskRemoveFromEventList+0x24>
 8004a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8004a50:	e7fe      	b.n	8004a50 <xTaskRemoveFromEventList+0x74>
 8004a52:	bf00      	nop
 8004a54:	20000358 	.word	0x20000358

08004a58 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a58:	4b03      	ldr	r3, [pc, #12]	; (8004a68 <vTaskInternalSetTimeOutState+0x10>)
 8004a5a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a5e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004a62:	e9c0 2300 	strd	r2, r3, [r0]
}
 8004a66:	4770      	bx	lr
 8004a68:	20000358 	.word	0x20000358

08004a6c <xTaskCheckForTimeOut>:
{
 8004a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8004a6e:	b300      	cbz	r0, 8004ab2 <xTaskCheckForTimeOut+0x46>
	configASSERT( pxTicksToWait );
 8004a70:	460d      	mov	r5, r1
 8004a72:	b1a9      	cbz	r1, 8004aa0 <xTaskCheckForTimeOut+0x34>
 8004a74:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004a76:	f000 fb6d 	bl	8005154 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8004a7a:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8004a7c:	4a1d      	ldr	r2, [pc, #116]	; (8004af4 <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
 8004a7e:	1c59      	adds	r1, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8004a80:	f8d2 010c 	ldr.w	r0, [r2, #268]	; 0x10c
			if( *pxTicksToWait == portMAX_DELAY )
 8004a84:	d02c      	beq.n	8004ae0 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a86:	e9d4 7100 	ldrd	r7, r1, [r4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a8a:	f8d2 6120 	ldr.w	r6, [r2, #288]	; 0x120
 8004a8e:	42b7      	cmp	r7, r6
 8004a90:	d018      	beq.n	8004ac4 <xTaskCheckForTimeOut+0x58>
 8004a92:	4281      	cmp	r1, r0
 8004a94:	d816      	bhi.n	8004ac4 <xTaskCheckForTimeOut+0x58>
			xReturn = pdTRUE;
 8004a96:	2601      	movs	r6, #1
	taskEXIT_CRITICAL();
 8004a98:	f000 fb7e 	bl	8005198 <vPortExitCritical>
}
 8004a9c:	4630      	mov	r0, r6
 8004a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8004ab0:	e7fe      	b.n	8004ab0 <xTaskCheckForTimeOut+0x44>
 8004ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8004ac2:	e7fe      	b.n	8004ac2 <xTaskCheckForTimeOut+0x56>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ac4:	1a46      	subs	r6, r0, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ac6:	42b3      	cmp	r3, r6
 8004ac8:	d90f      	bls.n	8004aea <xTaskCheckForTimeOut+0x7e>
			*pxTicksToWait -= xElapsedTime;
 8004aca:	1a1b      	subs	r3, r3, r0
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004acc:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ad0:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
			*pxTicksToWait -= xElapsedTime;
 8004ad4:	440b      	add	r3, r1
 8004ad6:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
 8004ad8:	2600      	movs	r6, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ada:	e9c4 0200 	strd	r0, r2, [r4]
			xReturn = pdFALSE;
 8004ade:	e7db      	b.n	8004a98 <xTaskCheckForTimeOut+0x2c>
				xReturn = pdFALSE;
 8004ae0:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 8004ae2:	f000 fb59 	bl	8005198 <vPortExitCritical>
}
 8004ae6:	4630      	mov	r0, r6
 8004ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 8004aea:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8004aec:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 8004aee:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8004af0:	e7d2      	b.n	8004a98 <xTaskCheckForTimeOut+0x2c>
 8004af2:	bf00      	nop
 8004af4:	20000358 	.word	0x20000358

08004af8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8004af8:	2201      	movs	r2, #1
 8004afa:	4b02      	ldr	r3, [pc, #8]	; (8004b04 <vTaskMissedYield+0xc>)
 8004afc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	20000358 	.word	0x20000358

08004b08 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004b08:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <xTaskGetSchedulerState+0x1c>)
 8004b0a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004b0e:	b132      	cbz	r2, 8004b1e <xTaskGetSchedulerState+0x16>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b10:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004b14:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b16:	bf0c      	ite	eq
 8004b18:	2002      	moveq	r0, #2
 8004b1a:	2000      	movne	r0, #0
 8004b1c:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b1e:	2001      	movs	r0, #1
	}
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	20000358 	.word	0x20000358

08004b28 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8004b28:	b1c8      	cbz	r0, 8004b5e <xTaskPriorityDisinherit+0x36>
	{
 8004b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8004b2c:	4d27      	ldr	r5, [pc, #156]	; (8004bcc <xTaskPriorityDisinherit+0xa4>)
 8004b2e:	4604      	mov	r4, r0
 8004b30:	686b      	ldr	r3, [r5, #4]
 8004b32:	4283      	cmp	r3, r0
 8004b34:	d008      	beq.n	8004b48 <xTaskPriorityDisinherit+0x20>
 8004b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3a:	f383 8811 	msr	BASEPRI, r3
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	f3bf 8f4f 	dsb	sy
 8004b46:	e7fe      	b.n	8004b46 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b4a:	b153      	cbz	r3, 8004b62 <xTaskPriorityDisinherit+0x3a>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b4c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004b4e:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8004b50:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b52:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8004b54:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b56:	d000      	beq.n	8004b5a <xTaskPriorityDisinherit+0x32>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b58:	b163      	cbz	r3, 8004b74 <xTaskPriorityDisinherit+0x4c>
	BaseType_t xReturn = pdFALSE;
 8004b5a:	2000      	movs	r0, #0
	}
 8004b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
 8004b5e:	2000      	movs	r0, #0
	}
 8004b60:	4770      	bx	lr
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8004b72:	e7fe      	b.n	8004b72 <xTaskPriorityDisinherit+0x4a>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b74:	1d07      	adds	r7, r0, #4
 8004b76:	4638      	mov	r0, r7
 8004b78:	f7fe fdc6 	bl	8003708 <uxListRemove>
 8004b7c:	b970      	cbnz	r0, 8004b9c <xTaskPriorityDisinherit+0x74>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004b7e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004b80:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8004b84:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	b93b      	cbnz	r3, 8004b9c <xTaskPriorityDisinherit+0x74>
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8004b92:	4082      	lsls	r2, r0
 8004b94:	ea23 0302 	bic.w	r3, r3, r2
 8004b98:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
					prvAddTaskToReadyList( pxTCB );
 8004b9c:	2601      	movs	r6, #1
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 8004ba0:	f8d5 c108 	ldr.w	ip, [r5, #264]	; 0x108
 8004ba4:	480a      	ldr	r0, [pc, #40]	; (8004bd0 <xTaskPriorityDisinherit+0xa8>)
 8004ba6:	4639      	mov	r1, r7
 8004ba8:	fa06 f203 	lsl.w	r2, r6, r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004bac:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bae:	f1c3 0707 	rsb	r7, r3, #7
					prvAddTaskToReadyList( pxTCB );
 8004bb2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004bb6:	ea42 020c 	orr.w	r2, r2, ip
 8004bba:	eb00 0083 	add.w	r0, r0, r3, lsl #2
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bbe:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004bc0:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
 8004bc4:	f7fe fd7a 	bl	80036bc <vListInsertEnd>
					xReturn = pdTRUE;
 8004bc8:	4630      	mov	r0, r6
	}
 8004bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bcc:	20000358 	.word	0x20000358
 8004bd0:	20000360 	.word	0x20000360

08004bd4 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		xMessage.xMessageID = xCommandID;
 8004bd8:	f04f 0800 	mov.w	r8, #0
 8004bdc:	4e1e      	ldr	r6, [pc, #120]	; (8004c58 <prvSwitchTimerLists+0x84>)
{
 8004bde:	b084      	sub	sp, #16

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004be0:	e00c      	b.n	8004bfc <prvSwitchTimerLists+0x28>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004be2:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004be4:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004be6:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004be8:	1d25      	adds	r5, r4, #4
 8004bea:	4628      	mov	r0, r5
 8004bec:	f7fe fd8c 	bl	8003708 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004bf6:	69e3      	ldr	r3, [r4, #28]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d009      	beq.n	8004c10 <prvSwitchTimerLists+0x3c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bfc:	6833      	ldr	r3, [r6, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	2a00      	cmp	r2, #0
 8004c02:	d1ee      	bne.n	8004be2 <prvSwitchTimerLists+0xe>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8004c04:	68b2      	ldr	r2, [r6, #8]
	pxOverflowTimerList = pxTemp;
 8004c06:	60b3      	str	r3, [r6, #8]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c08:	6032      	str	r2, [r6, #0]
}
 8004c0a:	b004      	add	sp, #16
 8004c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004c10:	69a3      	ldr	r3, [r4, #24]
 8004c12:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8004c14:	429f      	cmp	r7, r3
 8004c16:	d206      	bcs.n	8004c26 <prvSwitchTimerLists+0x52>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c18:	4629      	mov	r1, r5
 8004c1a:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004c1c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c1e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c20:	f7fe fd5a 	bl	80036d8 <vListInsert>
 8004c24:	e7ea      	b.n	8004bfc <prvSwitchTimerLists+0x28>
	if( xTimerQueue != NULL )
 8004c26:	6873      	ldr	r3, [r6, #4]
 8004c28:	b163      	cbz	r3, 8004c44 <prvSwitchTimerLists+0x70>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c2a:	e9cd 8701 	strd	r8, r7, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004c2e:	9403      	str	r4, [sp, #12]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c30:	f7ff ff6a 	bl	8004b08 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c34:	2300      	movs	r3, #0
 8004c36:	6870      	ldr	r0, [r6, #4]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	a901      	add	r1, sp, #4
 8004c3c:	f7fe fe26 	bl	800388c <xQueueGenericSend>
				configASSERT( xResult );
 8004c40:	2800      	cmp	r0, #0
 8004c42:	d1db      	bne.n	8004bfc <prvSwitchTimerLists+0x28>
 8004c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	e7fe      	b.n	8004c54 <prvSwitchTimerLists+0x80>
 8004c56:	bf00      	nop
 8004c58:	20000480 	.word	0x20000480

08004c5c <prvTimerTask>:
{
 8004c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
					portYIELD_WITHIN_API();
 8004c60:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
 8004c64:	2600      	movs	r6, #0
 8004c66:	4c87      	ldr	r4, [pc, #540]	; (8004e84 <prvTimerTask+0x228>)
 8004c68:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8004e88 <prvTimerTask+0x22c>
{
 8004c6c:	b087      	sub	sp, #28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	681f      	ldr	r7, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c72:	2f00      	cmp	r7, #0
 8004c74:	f000 8093 	beq.w	8004d9e <prvTimerTask+0x142>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 8004c7c:	f7ff fc8c 	bl	8004598 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8004c80:	f7ff fc94 	bl	80045ac <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8004c84:	68e3      	ldr	r3, [r4, #12]
	xTimeNow = xTaskGetTickCount();
 8004c86:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8004c88:	4283      	cmp	r3, r0
 8004c8a:	f200 8097 	bhi.w	8004dbc <prvTimerTask+0x160>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c8e:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 8004c90:	60e0      	str	r0, [r4, #12]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c92:	f240 80a5 	bls.w	8004de0 <prvTimerTask+0x184>
 8004c96:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c98:	6860      	ldr	r0, [r4, #4]
 8004c9a:	1b79      	subs	r1, r7, r5
 8004c9c:	f7ff f92c 	bl	8003ef8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004ca0:	f7ff fd24 	bl	80046ec <xTaskResumeAll>
 8004ca4:	b928      	cbnz	r0, 8004cb2 <prvTimerTask+0x56>
					portYIELD_WITHIN_API();
 8004ca6:	f8c9 8000 	str.w	r8, [r9]
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	4669      	mov	r1, sp
 8004cb6:	6860      	ldr	r0, [r4, #4]
 8004cb8:	f7fe ff6e 	bl	8003b98 <xQueueReceive>
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	d0d6      	beq.n	8004c6e <prvTimerTask+0x12>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004cc0:	9b00      	ldr	r3, [sp, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	dbf5      	blt.n	8004cb2 <prvTimerTask+0x56>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004cc6:	9d02      	ldr	r5, [sp, #8]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004cc8:	696b      	ldr	r3, [r5, #20]
 8004cca:	b113      	cbz	r3, 8004cd2 <prvTimerTask+0x76>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ccc:	1d28      	adds	r0, r5, #4
 8004cce:	f7fe fd1b 	bl	8003708 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8004cd2:	f7ff fc6b 	bl	80045ac <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8004cd6:	68e3      	ldr	r3, [r4, #12]
	xTimeNow = xTaskGetTickCount();
 8004cd8:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
 8004cda:	4298      	cmp	r0, r3
 8004cdc:	d374      	bcc.n	8004dc8 <prvTimerTask+0x16c>
	xLastTime = xTimeNow;
 8004cde:	9b00      	ldr	r3, [sp, #0]
 8004ce0:	60e7      	str	r7, [r4, #12]
			switch( xMessage.xMessageID )
 8004ce2:	2b09      	cmp	r3, #9
 8004ce4:	d8e5      	bhi.n	8004cb2 <prvTimerTask+0x56>
 8004ce6:	a201      	add	r2, pc, #4	; (adr r2, 8004cec <prvTimerTask+0x90>)
 8004ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cec:	08004d15 	.word	0x08004d15
 8004cf0:	08004d15 	.word	0x08004d15
 8004cf4:	08004d15 	.word	0x08004d15
 8004cf8:	08004cb3 	.word	0x08004cb3
 8004cfc:	08004d71 	.word	0x08004d71
 8004d00:	08004d8f 	.word	0x08004d8f
 8004d04:	08004d15 	.word	0x08004d15
 8004d08:	08004d15 	.word	0x08004d15
 8004d0c:	08004cb3 	.word	0x08004cb3
 8004d10:	08004d71 	.word	0x08004d71
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d14:	9b01      	ldr	r3, [sp, #4]
 8004d16:	69aa      	ldr	r2, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d18:	612d      	str	r5, [r5, #16]
 8004d1a:	1899      	adds	r1, r3, r2
 8004d1c:	bf2c      	ite	cs
 8004d1e:	2001      	movcs	r0, #1
 8004d20:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8004d22:	42b9      	cmp	r1, r7
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d24:	6069      	str	r1, [r5, #4]
	if( xNextExpiryTime <= xTimeNow )
 8004d26:	d852      	bhi.n	8004dce <prvTimerTask+0x172>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d28:	1afb      	subs	r3, r7, r3
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d86c      	bhi.n	8004e08 <prvTimerTask+0x1ac>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d30:	4628      	mov	r0, r5
 8004d32:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004d34:	69eb      	ldr	r3, [r5, #28]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d1bb      	bne.n	8004cb2 <prvTimerTask+0x56>
	if( xTimerQueue != NULL )
 8004d3a:	6863      	ldr	r3, [r4, #4]
 8004d3c:	b17b      	cbz	r3, 8004d5e <prvTimerTask+0x102>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d3e:	69ab      	ldr	r3, [r5, #24]
 8004d40:	9a01      	ldr	r2, [sp, #4]
		xMessage.xMessageID = xCommandID;
 8004d42:	9603      	str	r6, [sp, #12]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d44:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004d46:	e9cd 3504 	strd	r3, r5, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004d4a:	f7ff fedd 	bl	8004b08 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004d4e:	2300      	movs	r3, #0
 8004d50:	6860      	ldr	r0, [r4, #4]
 8004d52:	461a      	mov	r2, r3
 8004d54:	a903      	add	r1, sp, #12
 8004d56:	f7fe fd99 	bl	800388c <xQueueGenericSend>
							configASSERT( xResult );
 8004d5a:	2800      	cmp	r0, #0
 8004d5c:	d1a9      	bne.n	8004cb2 <prvTimerTask+0x56>
 8004d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	e7fe      	b.n	8004d6e <prvTimerTask+0x112>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d70:	9b01      	ldr	r3, [sp, #4]
 8004d72:	61ab      	str	r3, [r5, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d076      	beq.n	8004e66 <prvTimerTask+0x20a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d78:	443b      	add	r3, r7
	if( xNextExpiryTime <= xTimeNow )
 8004d7a:	42bb      	cmp	r3, r7
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d7c:	bf94      	ite	ls
 8004d7e:	68a0      	ldrls	r0, [r4, #8]
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d80:	6820      	ldrhi	r0, [r4, #0]
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d82:	606b      	str	r3, [r5, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d84:	612d      	str	r5, [r5, #16]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d86:	1d29      	adds	r1, r5, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d88:	f7fe fca6 	bl	80036d8 <vListInsert>
 8004d8c:	e791      	b.n	8004cb2 <prvTimerTask+0x56>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004d8e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d18d      	bne.n	8004cb2 <prvTimerTask+0x56>
							vPortFree( pxTimer );
 8004d96:	4628      	mov	r0, r5
 8004d98:	f000 fb88 	bl	80054ac <vPortFree>
 8004d9c:	e789      	b.n	8004cb2 <prvTimerTask+0x56>
	vTaskSuspendAll();
 8004d9e:	f7ff fbfb 	bl	8004598 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8004da2:	f7ff fc03 	bl	80045ac <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8004da6:	68e3      	ldr	r3, [r4, #12]
	xTimeNow = xTaskGetTickCount();
 8004da8:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8004daa:	4283      	cmp	r3, r0
 8004dac:	d806      	bhi.n	8004dbc <prvTimerTask+0x160>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004dae:	68a3      	ldr	r3, [r4, #8]
	xLastTime = xTimeNow;
 8004db0:	60e5      	str	r5, [r4, #12]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	fab2 f282 	clz	r2, r2
 8004db8:	0952      	lsrs	r2, r2, #5
 8004dba:	e76d      	b.n	8004c98 <prvTimerTask+0x3c>
		prvSwitchTimerLists();
 8004dbc:	f7ff ff0a 	bl	8004bd4 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8004dc0:	60e5      	str	r5, [r4, #12]
			( void ) xTaskResumeAll();
 8004dc2:	f7ff fc93 	bl	80046ec <xTaskResumeAll>
 8004dc6:	e774      	b.n	8004cb2 <prvTimerTask+0x56>
		prvSwitchTimerLists();
 8004dc8:	f7ff ff04 	bl	8004bd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004dcc:	e787      	b.n	8004cde <prvTimerTask+0x82>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004dce:	42bb      	cmp	r3, r7
 8004dd0:	d901      	bls.n	8004dd6 <prvTimerTask+0x17a>
 8004dd2:	2800      	cmp	r0, #0
 8004dd4:	d0ab      	beq.n	8004d2e <prvTimerTask+0xd2>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004dd6:	6820      	ldr	r0, [r4, #0]
 8004dd8:	1d29      	adds	r1, r5, #4
 8004dda:	f7fe fc7d 	bl	80036d8 <vListInsert>
	return xProcessTimerNow;
 8004dde:	e768      	b.n	8004cb2 <prvTimerTask+0x56>
				( void ) xTaskResumeAll();
 8004de0:	f7ff fc84 	bl	80046ec <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004de4:	6823      	ldr	r3, [r4, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dec:	f10a 0b04 	add.w	fp, sl, #4
 8004df0:	4658      	mov	r0, fp
 8004df2:	f7fe fc89 	bl	8003708 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004df6:	f8da 301c 	ldr.w	r3, [sl, #28]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d009      	beq.n	8004e12 <prvTimerTask+0x1b6>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dfe:	4650      	mov	r0, sl
 8004e00:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8004e04:	4798      	blx	r3
}
 8004e06:	e754      	b.n	8004cb2 <prvTimerTask+0x56>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e08:	68a0      	ldr	r0, [r4, #8]
 8004e0a:	1d29      	adds	r1, r5, #4
 8004e0c:	f7fe fc64 	bl	80036d8 <vListInsert>
	return xProcessTimerNow;
 8004e10:	e74f      	b.n	8004cb2 <prvTimerTask+0x56>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e12:	f8da 3018 	ldr.w	r3, [sl, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e16:	f8ca a010 	str.w	sl, [sl, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e1a:	18fa      	adds	r2, r7, r3
	if( xNextExpiryTime <= xTimeNow )
 8004e1c:	42aa      	cmp	r2, r5
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e1e:	f8ca 2004 	str.w	r2, [sl, #4]
	if( xNextExpiryTime <= xTimeNow )
 8004e22:	d904      	bls.n	8004e2e <prvTimerTask+0x1d2>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e24:	4659      	mov	r1, fp
 8004e26:	6820      	ldr	r0, [r4, #0]
 8004e28:	f7fe fc56 	bl	80036d8 <vListInsert>
	return xProcessTimerNow;
 8004e2c:	e7e7      	b.n	8004dfe <prvTimerTask+0x1a2>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e2e:	1bed      	subs	r5, r5, r7
 8004e30:	42ab      	cmp	r3, r5
 8004e32:	d821      	bhi.n	8004e78 <prvTimerTask+0x21c>
	if( xTimerQueue != NULL )
 8004e34:	6863      	ldr	r3, [r4, #4]
 8004e36:	b16b      	cbz	r3, 8004e54 <prvTimerTask+0x1f8>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e38:	e9cd 6703 	strd	r6, r7, [sp, #12]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004e3c:	f8cd a014 	str.w	sl, [sp, #20]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e40:	f7ff fe62 	bl	8004b08 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e44:	2300      	movs	r3, #0
 8004e46:	6860      	ldr	r0, [r4, #4]
 8004e48:	461a      	mov	r2, r3
 8004e4a:	a903      	add	r1, sp, #12
 8004e4c:	f7fe fd1e 	bl	800388c <xQueueGenericSend>
			configASSERT( xResult );
 8004e50:	2800      	cmp	r0, #0
 8004e52:	d1d4      	bne.n	8004dfe <prvTimerTask+0x1a2>
 8004e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	e7fe      	b.n	8004e64 <prvTimerTask+0x208>
 8004e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e76:	e7fe      	b.n	8004e76 <prvTimerTask+0x21a>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e78:	4659      	mov	r1, fp
 8004e7a:	68a0      	ldr	r0, [r4, #8]
 8004e7c:	f7fe fc2c 	bl	80036d8 <vListInsert>
	return xProcessTimerNow;
 8004e80:	e7bd      	b.n	8004dfe <prvTimerTask+0x1a2>
 8004e82:	bf00      	nop
 8004e84:	20000480 	.word	0x20000480
 8004e88:	e000ed04 	.word	0xe000ed04

08004e8c <xTimerCreateTimerTask>:
{
 8004e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8004e8e:	4c24      	ldr	r4, [pc, #144]	; (8004f20 <xTimerCreateTimerTask+0x94>)
{
 8004e90:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
 8004e92:	f000 f95f 	bl	8005154 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8004e96:	6867      	ldr	r7, [r4, #4]
 8004e98:	b337      	cbz	r7, 8004ee8 <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e9a:	f000 f97d 	bl	8005198 <vPortExitCritical>
	if( xTimerQueue != NULL )
 8004e9e:	6863      	ldr	r3, [r4, #4]
 8004ea0:	b1cb      	cbz	r3, 8004ed6 <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004ea2:	2500      	movs	r5, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004ea4:	aa07      	add	r2, sp, #28
 8004ea6:	a906      	add	r1, sp, #24
 8004ea8:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004eaa:	e9cd 5505 	strd	r5, r5, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004eae:	f001 f87d 	bl	8005fac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004eb2:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8004eb6:	2002      	movs	r0, #2
 8004eb8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004ebc:	9000      	str	r0, [sp, #0]
 8004ebe:	462b      	mov	r3, r5
 8004ec0:	9a07      	ldr	r2, [sp, #28]
 8004ec2:	4918      	ldr	r1, [pc, #96]	; (8004f24 <xTimerCreateTimerTask+0x98>)
 8004ec4:	4818      	ldr	r0, [pc, #96]	; (8004f28 <xTimerCreateTimerTask+0x9c>)
 8004ec6:	f7ff f983 	bl	80041d0 <xTaskCreateStatic>
 8004eca:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
			if( xTimerTaskHandle != NULL )
 8004ece:	b110      	cbz	r0, 8004ed6 <xTimerCreateTimerTask+0x4a>
}
 8004ed0:	2001      	movs	r0, #1
 8004ed2:	b009      	add	sp, #36	; 0x24
 8004ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8004ee6:	e7fe      	b.n	8004ee6 <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
 8004ee8:	f104 0610 	add.w	r6, r4, #16
 8004eec:	4630      	mov	r0, r6
			vListInitialise( &xActiveTimerList2 );
 8004eee:	f104 0524 	add.w	r5, r4, #36	; 0x24
			vListInitialise( &xActiveTimerList1 );
 8004ef2:	f7fe fbd3 	bl	800369c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	f7fe fbd0 	bl	800369c <vListInitialise>
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004efc:	210c      	movs	r1, #12
 8004efe:	200a      	movs	r0, #10
 8004f00:	9700      	str	r7, [sp, #0]
 8004f02:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8004f06:	f104 0280 	add.w	r2, r4, #128	; 0x80
			pxCurrentTimerList = &xActiveTimerList1;
 8004f0a:	6026      	str	r6, [r4, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004f0c:	60a5      	str	r5, [r4, #8]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004f0e:	f7fe fc4f 	bl	80037b0 <xQueueGenericCreateStatic>
 8004f12:	6060      	str	r0, [r4, #4]
				if( xTimerQueue != NULL )
 8004f14:	2800      	cmp	r0, #0
 8004f16:	d0c0      	beq.n	8004e9a <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f18:	4904      	ldr	r1, [pc, #16]	; (8004f2c <xTimerCreateTimerTask+0xa0>)
 8004f1a:	f7fe ffc3 	bl	8003ea4 <vQueueAddToRegistry>
 8004f1e:	e7bc      	b.n	8004e9a <xTimerCreateTimerTask+0xe>
 8004f20:	20000480 	.word	0x20000480
 8004f24:	08007ad4 	.word	0x08007ad4
 8004f28:	08004c5d 	.word	0x08004c5d
 8004f2c:	08007acc 	.word	0x08007acc

08004f30 <xTimerCreate>:
	{
 8004f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f34:	4681      	mov	r9, r0
 8004f36:	b085      	sub	sp, #20
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8004f38:	202c      	movs	r0, #44	; 0x2c
	{
 8004f3a:	460e      	mov	r6, r1
 8004f3c:	4690      	mov	r8, r2
 8004f3e:	461f      	mov	r7, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8004f40:	f000 fa02 	bl	8005348 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8004f44:	4604      	mov	r4, r0
 8004f46:	b1a0      	cbz	r0, 8004f72 <xTimerCreate+0x42>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004f48:	b1be      	cbz	r6, 8004f7a <xTimerCreate+0x4a>
		if( xTimerQueue == NULL )
 8004f4a:	4d20      	ldr	r5, [pc, #128]	; (8004fcc <xTimerCreate+0x9c>)
	taskENTER_CRITICAL();
 8004f4c:	f000 f902 	bl	8005154 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8004f50:	686b      	ldr	r3, [r5, #4]
 8004f52:	b1db      	cbz	r3, 8004f8c <xTimerCreate+0x5c>
	taskEXIT_CRITICAL();
 8004f54:	f000 f920 	bl	8005198 <vPortExitCritical>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		pxNewTimer->uxAutoReload = uxAutoReload;
 8004f5a:	e9c4 6806 	strd	r6, r8, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004f5e:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->pcTimerName = pcTimerName;
 8004f60:	f8c4 9000 	str.w	r9, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 8004f64:	6227      	str	r7, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004f66:	1d20      	adds	r0, r4, #4
 8004f68:	f7fe fba4 	bl	80036b4 <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
 8004f72:	4620      	mov	r0, r4
 8004f74:	b005      	add	sp, #20
 8004f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004f8a:	e7fe      	b.n	8004f8a <xTimerCreate+0x5a>
			vListInitialise( &xActiveTimerList1 );
 8004f8c:	f105 0b10 	add.w	fp, r5, #16
 8004f90:	4658      	mov	r0, fp
			vListInitialise( &xActiveTimerList2 );
 8004f92:	f105 0a24 	add.w	sl, r5, #36	; 0x24
 8004f96:	9303      	str	r3, [sp, #12]
			vListInitialise( &xActiveTimerList1 );
 8004f98:	f7fe fb80 	bl	800369c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004f9c:	4650      	mov	r0, sl
 8004f9e:	f7fe fb7d 	bl	800369c <vListInitialise>
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004fa2:	9b03      	ldr	r3, [sp, #12]
 8004fa4:	210c      	movs	r1, #12
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	200a      	movs	r0, #10
 8004faa:	f105 0338 	add.w	r3, r5, #56	; 0x38
 8004fae:	f105 0280 	add.w	r2, r5, #128	; 0x80
			pxCurrentTimerList = &xActiveTimerList1;
 8004fb2:	f8c5 b000 	str.w	fp, [r5]
			pxOverflowTimerList = &xActiveTimerList2;
 8004fb6:	f8c5 a008 	str.w	sl, [r5, #8]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004fba:	f7fe fbf9 	bl	80037b0 <xQueueGenericCreateStatic>
 8004fbe:	6068      	str	r0, [r5, #4]
				if( xTimerQueue != NULL )
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	d0c7      	beq.n	8004f54 <xTimerCreate+0x24>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004fc4:	4902      	ldr	r1, [pc, #8]	; (8004fd0 <xTimerCreate+0xa0>)
 8004fc6:	f7fe ff6d 	bl	8003ea4 <vQueueAddToRegistry>
 8004fca:	e7c3      	b.n	8004f54 <xTimerCreate+0x24>
 8004fcc:	20000480 	.word	0x20000480
 8004fd0:	08007acc 	.word	0x08007acc

08004fd4 <xTimerCreateStatic>:
	{
 8004fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			volatile size_t xSize = sizeof( StaticTimer_t );
 8004fd8:	242c      	movs	r4, #44	; 0x2c
	{
 8004fda:	b087      	sub	sp, #28
			volatile size_t xSize = sizeof( StaticTimer_t );
 8004fdc:	9405      	str	r4, [sp, #20]
			configASSERT( xSize == sizeof( Timer_t ) );
 8004fde:	9d05      	ldr	r5, [sp, #20]
	{
 8004fe0:	9c11      	ldr	r4, [sp, #68]	; 0x44
			configASSERT( xSize == sizeof( Timer_t ) );
 8004fe2:	2d2c      	cmp	r5, #44	; 0x2c
 8004fe4:	d008      	beq.n	8004ff8 <xTimerCreateStatic+0x24>
 8004fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	e7fe      	b.n	8004ff6 <xTimerCreateStatic+0x22>
		configASSERT( pxTimerBuffer );
 8004ff8:	b1e4      	cbz	r4, 8005034 <xTimerCreateStatic+0x60>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004ffa:	460e      	mov	r6, r1
 8004ffc:	b319      	cbz	r1, 8005046 <xTimerCreateStatic+0x72>
		if( xTimerQueue == NULL )
 8004ffe:	4d26      	ldr	r5, [pc, #152]	; (8005098 <xTimerCreateStatic+0xc4>)
 8005000:	461f      	mov	r7, r3
 8005002:	4681      	mov	r9, r0
 8005004:	4690      	mov	r8, r2
	taskENTER_CRITICAL();
 8005006:	f000 f8a5 	bl	8005154 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800500a:	686b      	ldr	r3, [r5, #4]
 800500c:	b323      	cbz	r3, 8005058 <xTimerCreateStatic+0x84>
	taskEXIT_CRITICAL();
 800500e:	f000 f8c3 	bl	8005198 <vPortExitCritical>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005012:	9b10      	ldr	r3, [sp, #64]	; 0x40
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005014:	1d20      	adds	r0, r4, #4
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005016:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->uxAutoReload = uxAutoReload;
 8005018:	e9c4 6806 	strd	r6, r8, [r4, #24]
		pxNewTimer->pcTimerName = pcTimerName;
 800501c:	f8c4 9000 	str.w	r9, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 8005020:	6227      	str	r7, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005022:	f7fe fb47 	bl	80036b4 <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8005026:	2301      	movs	r3, #1
	}
 8005028:	4620      	mov	r0, r4
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800502a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
 800502e:	b007      	add	sp, #28
 8005030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTimerBuffer );
 8005044:	e7fe      	b.n	8005044 <xTimerCreateStatic+0x70>
 8005046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504a:	f383 8811 	msr	BASEPRI, r3
 800504e:	f3bf 8f6f 	isb	sy
 8005052:	f3bf 8f4f 	dsb	sy
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005056:	e7fe      	b.n	8005056 <xTimerCreateStatic+0x82>
			vListInitialise( &xActiveTimerList1 );
 8005058:	f105 0b10 	add.w	fp, r5, #16
 800505c:	4658      	mov	r0, fp
			vListInitialise( &xActiveTimerList2 );
 800505e:	f105 0a24 	add.w	sl, r5, #36	; 0x24
 8005062:	9303      	str	r3, [sp, #12]
			vListInitialise( &xActiveTimerList1 );
 8005064:	f7fe fb1a 	bl	800369c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005068:	4650      	mov	r0, sl
 800506a:	f7fe fb17 	bl	800369c <vListInitialise>
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800506e:	9b03      	ldr	r3, [sp, #12]
 8005070:	210c      	movs	r1, #12
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	200a      	movs	r0, #10
 8005076:	f105 0338 	add.w	r3, r5, #56	; 0x38
 800507a:	f105 0280 	add.w	r2, r5, #128	; 0x80
			pxCurrentTimerList = &xActiveTimerList1;
 800507e:	f8c5 b000 	str.w	fp, [r5]
			pxOverflowTimerList = &xActiveTimerList2;
 8005082:	f8c5 a008 	str.w	sl, [r5, #8]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005086:	f7fe fb93 	bl	80037b0 <xQueueGenericCreateStatic>
 800508a:	6068      	str	r0, [r5, #4]
				if( xTimerQueue != NULL )
 800508c:	2800      	cmp	r0, #0
 800508e:	d0be      	beq.n	800500e <xTimerCreateStatic+0x3a>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005090:	4902      	ldr	r1, [pc, #8]	; (800509c <xTimerCreateStatic+0xc8>)
 8005092:	f7fe ff07 	bl	8003ea4 <vQueueAddToRegistry>
 8005096:	e7ba      	b.n	800500e <xTimerCreateStatic+0x3a>
 8005098:	20000480 	.word	0x20000480
 800509c:	08007acc 	.word	0x08007acc

080050a0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80050a0:	4806      	ldr	r0, [pc, #24]	; (80050bc <prvPortStartFirstTask+0x1c>)
 80050a2:	6800      	ldr	r0, [r0, #0]
 80050a4:	6800      	ldr	r0, [r0, #0]
 80050a6:	f380 8808 	msr	MSP, r0
 80050aa:	b662      	cpsie	i
 80050ac:	b661      	cpsie	f
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	df00      	svc	0
 80050b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050ba:	0000      	.short	0x0000
 80050bc:	e000ed08 	.word	0xe000ed08

080050c0 <prvTaskExitError>:
volatile uint32_t ulDummy = 0UL;
 80050c0:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 80050c2:	4b0e      	ldr	r3, [pc, #56]	; (80050fc <prvTaskExitError+0x3c>)
{
 80050c4:	b082      	sub	sp, #8
	configASSERT( uxCriticalNesting == ~0UL );
 80050c6:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0UL;
 80050c8:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80050ca:	3301      	adds	r3, #1
 80050cc:	d008      	beq.n	80050e0 <prvTaskExitError+0x20>
 80050ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	e7fe      	b.n	80050de <prvTaskExitError+0x1e>
 80050e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80050f0:	9b01      	ldr	r3, [sp, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d0fc      	beq.n	80050f0 <prvTaskExitError+0x30>
}
 80050f6:	b002      	add	sp, #8
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	20000008 	.word	0x20000008

08005100 <pxPortInitialiseStack>:
{
 8005100:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005102:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005106:	4b07      	ldr	r3, [pc, #28]	; (8005124 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005108:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800510c:	f840 4c04 	str.w	r4, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005110:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005114:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005118:	f840 3c0c 	str.w	r3, [r0, #-12]
}
 800511c:	bc10      	pop	{r4}
 800511e:	3840      	subs	r0, #64	; 0x40
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	080050c1 	.word	0x080050c1
	...

08005130 <SVC_Handler>:
	__asm volatile (
 8005130:	4b07      	ldr	r3, [pc, #28]	; (8005150 <pxCurrentTCBConst2>)
 8005132:	6819      	ldr	r1, [r3, #0]
 8005134:	6808      	ldr	r0, [r1, #0]
 8005136:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800513a:	f380 8809 	msr	PSP, r0
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f04f 0000 	mov.w	r0, #0
 8005146:	f380 8811 	msr	BASEPRI, r0
 800514a:	f04e 0e0d 	orr.w	lr, lr, #13
 800514e:	4770      	bx	lr

08005150 <pxCurrentTCBConst2>:
 8005150:	2000035c 	.word	0x2000035c

08005154 <vPortEnterCritical>:
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005164:	4a0a      	ldr	r2, [pc, #40]	; (8005190 <vPortEnterCritical+0x3c>)
 8005166:	6813      	ldr	r3, [r2, #0]
 8005168:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800516a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800516c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800516e:	d000      	beq.n	8005172 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8005170:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005172:	4b08      	ldr	r3, [pc, #32]	; (8005194 <vPortEnterCritical+0x40>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f013 0fff 	tst.w	r3, #255	; 0xff
 800517a:	d0f9      	beq.n	8005170 <vPortEnterCritical+0x1c>
 800517c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005180:	f383 8811 	msr	BASEPRI, r3
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	e7fe      	b.n	800518c <vPortEnterCritical+0x38>
 800518e:	bf00      	nop
 8005190:	20000008 	.word	0x20000008
 8005194:	e000ed04 	.word	0xe000ed04

08005198 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8005198:	4a08      	ldr	r2, [pc, #32]	; (80051bc <vPortExitCritical+0x24>)
 800519a:	6813      	ldr	r3, [r2, #0]
 800519c:	b943      	cbnz	r3, 80051b0 <vPortExitCritical+0x18>
 800519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	e7fe      	b.n	80051ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80051b0:	3b01      	subs	r3, #1
 80051b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051b4:	b90b      	cbnz	r3, 80051ba <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051b6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80051ba:	4770      	bx	lr
 80051bc:	20000008 	.word	0x20000008

080051c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051c0:	f3ef 8009 	mrs	r0, PSP
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	4b0d      	ldr	r3, [pc, #52]	; (8005200 <pxCurrentTCBConst>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051d0:	6010      	str	r0, [r2, #0]
 80051d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80051d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051da:	f380 8811 	msr	BASEPRI, r0
 80051de:	f7ff fb2d 	bl	800483c <vTaskSwitchContext>
 80051e2:	f04f 0000 	mov.w	r0, #0
 80051e6:	f380 8811 	msr	BASEPRI, r0
 80051ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80051ee:	6819      	ldr	r1, [r3, #0]
 80051f0:	6808      	ldr	r0, [r1, #0]
 80051f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051f6:	f380 8809 	msr	PSP, r0
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	4770      	bx	lr

08005200 <pxCurrentTCBConst>:
 8005200:	2000035c 	.word	0x2000035c

08005204 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005204:	b508      	push	{r3, lr}
	__asm volatile
 8005206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005216:	f7ff f9cf 	bl	80045b8 <xTaskIncrementTick>
 800521a:	b118      	cbz	r0, 8005224 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800521c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005220:	4b02      	ldr	r3, [pc, #8]	; (800522c <SysTick_Handler+0x28>)
 8005222:	601a      	str	r2, [r3, #0]
	__asm volatile
 8005224:	2300      	movs	r3, #0
 8005226:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800522a:	bd08      	pop	{r3, pc}
 800522c:	e000ed04 	.word	0xe000ed04

08005230 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005230:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005232:	2107      	movs	r1, #7
{
 8005234:	b410      	push	{r4}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005236:	4a08      	ldr	r2, [pc, #32]	; (8005258 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005238:	4c08      	ldr	r4, [pc, #32]	; (800525c <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800523a:	4809      	ldr	r0, [pc, #36]	; (8005260 <vPortSetupTimerInterrupt+0x30>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800523c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800523e:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005240:	6803      	ldr	r3, [r0, #0]
 8005242:	4c08      	ldr	r4, [pc, #32]	; (8005264 <vPortSetupTimerInterrupt+0x34>)
 8005244:	4808      	ldr	r0, [pc, #32]	; (8005268 <vPortSetupTimerInterrupt+0x38>)
 8005246:	fba4 4303 	umull	r4, r3, r4, r3
 800524a:	099b      	lsrs	r3, r3, #6
 800524c:	3b01      	subs	r3, #1
 800524e:	6003      	str	r3, [r0, #0]
}
 8005250:	bc10      	pop	{r4}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005252:	6011      	str	r1, [r2, #0]
}
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	e000e010 	.word	0xe000e010
 800525c:	e000e018 	.word	0xe000e018
 8005260:	200002d4 	.word	0x200002d4
 8005264:	10624dd3 	.word	0x10624dd3
 8005268:	e000e014 	.word	0xe000e014

0800526c <xPortStartScheduler>:
{
 800526c:	b530      	push	{r4, r5, lr}
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800526e:	20ff      	movs	r0, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005270:	2407      	movs	r4, #7
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005272:	4b31      	ldr	r3, [pc, #196]	; (8005338 <xPortStartScheduler+0xcc>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005274:	4a31      	ldr	r2, [pc, #196]	; (800533c <xPortStartScheduler+0xd0>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005276:	7819      	ldrb	r1, [r3, #0]
{
 8005278:	b085      	sub	sp, #20
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800527a:	b2c9      	uxtb	r1, r1
 800527c:	9102      	str	r1, [sp, #8]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800527e:	6054      	str	r4, [r2, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005280:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800528a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800528e:	f89d 1007 	ldrb.w	r1, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005292:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005296:	0609      	lsls	r1, r1, #24
 8005298:	bf48      	it	mi
 800529a:	2106      	movmi	r1, #6
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800529c:	7013      	strb	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800529e:	d50e      	bpl.n	80052be <xPortStartScheduler+0x52>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80052a4:	4608      	mov	r0, r1
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80052b2:	3901      	subs	r1, #1
 80052b4:	061b      	lsls	r3, r3, #24
 80052b6:	d4f3      	bmi.n	80052a0 <xPortStartScheduler+0x34>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052b8:	2803      	cmp	r0, #3
 80052ba:	d009      	beq.n	80052d0 <xPortStartScheduler+0x64>
 80052bc:	6050      	str	r0, [r2, #4]
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	e7fe      	b.n	80052ce <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052d0:	f44f 7040 	mov.w	r0, #768	; 0x300
	uxCriticalNesting = 0;
 80052d4:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052d6:	9902      	ldr	r1, [sp, #8]
 80052d8:	4d17      	ldr	r5, [pc, #92]	; (8005338 <xPortStartScheduler+0xcc>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052da:	4b19      	ldr	r3, [pc, #100]	; (8005340 <xPortStartScheduler+0xd4>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052dc:	b2c9      	uxtb	r1, r1
 80052de:	7029      	strb	r1, [r5, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052e0:	6819      	ldr	r1, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052e2:	6050      	str	r0, [r2, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80052e8:	6019      	str	r1, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80052ea:	681a      	ldr	r2, [r3, #0]
	uxCriticalNesting = 0;
 80052ec:	4d15      	ldr	r5, [pc, #84]	; (8005344 <xPortStartScheduler+0xd8>)
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80052ee:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80052f2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80052f4:	f7ff ff9c 	bl	8005230 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80052f8:	602c      	str	r4, [r5, #0]
	prvPortStartFirstTask();
 80052fa:	f7ff fed1 	bl	80050a0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80052fe:	f7ff fa9d 	bl	800483c <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8005302:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0UL;
 8005304:	9403      	str	r4, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 8005306:	3301      	adds	r3, #1
 8005308:	d008      	beq.n	800531c <xPortStartScheduler+0xb0>
 800530a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	e7fe      	b.n	800531a <xPortStartScheduler+0xae>
 800531c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800532c:	9b03      	ldr	r3, [sp, #12]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0fc      	beq.n	800532c <xPortStartScheduler+0xc0>
}
 8005332:	2000      	movs	r0, #0
 8005334:	b005      	add	sp, #20
 8005336:	bd30      	pop	{r4, r5, pc}
 8005338:	e000e400 	.word	0xe000e400
 800533c:	2000057c 	.word	0x2000057c
 8005340:	e000ed20 	.word	0xe000ed20
 8005344:	20000008 	.word	0x20000008

08005348 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800534c:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 800534e:	f7ff f923 	bl	8004598 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005352:	4b54      	ldr	r3, [pc, #336]	; (80054a4 <pvPortMalloc+0x15c>)
 8005354:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8005358:	2900      	cmp	r1, #0
 800535a:	d039      	beq.n	80053d0 <pvPortMalloc+0x88>
 800535c:	f8d3 7c0c 	ldr.w	r7, [r3, #3084]	; 0xc0c

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005360:	423c      	tst	r4, r7
 8005362:	d12f      	bne.n	80053c4 <pvPortMalloc+0x7c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005364:	b374      	cbz	r4, 80053c4 <pvPortMalloc+0x7c>
			{
				xWantedSize += xHeapStructSize;
 8005366:	f104 0508 	add.w	r5, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800536a:	0766      	lsls	r6, r4, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800536c:	bf1c      	itt	ne
 800536e:	f025 0507 	bicne.w	r5, r5, #7
 8005372:	3508      	addne	r5, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005374:	b335      	cbz	r5, 80053c4 <pvPortMalloc+0x7c>
 8005376:	f8d3 cc14 	ldr.w	ip, [r3, #3092]	; 0xc14
 800537a:	45ac      	cmp	ip, r5
 800537c:	d322      	bcc.n	80053c4 <pvPortMalloc+0x7c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 800537e:	f8d3 0c00 	ldr.w	r0, [r3, #3072]	; 0xc00
				pxPreviousBlock = &xStart;
 8005382:	4a49      	ldr	r2, [pc, #292]	; (80054a8 <pvPortMalloc+0x160>)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005384:	e003      	b.n	800538e <pvPortMalloc+0x46>
 8005386:	6806      	ldr	r6, [r0, #0]
 8005388:	b126      	cbz	r6, 8005394 <pvPortMalloc+0x4c>
 800538a:	4602      	mov	r2, r0
 800538c:	4630      	mov	r0, r6
 800538e:	6844      	ldr	r4, [r0, #4]
 8005390:	42ac      	cmp	r4, r5
 8005392:	d3f8      	bcc.n	8005386 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005394:	4288      	cmp	r0, r1
 8005396:	d015      	beq.n	80053c4 <pvPortMalloc+0x7c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005398:	4606      	mov	r6, r0
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800539a:	eba4 0e05 	sub.w	lr, r4, r5
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800539e:	f856 8b08 	ldr.w	r8, [r6], #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053a2:	f1be 0f10 	cmp.w	lr, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053a6:	f8c2 8000 	str.w	r8, [r2]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053aa:	d950      	bls.n	800544e <pvPortMalloc+0x106>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053ac:	1942      	adds	r2, r0, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053ae:	0754      	lsls	r4, r2, #29
 80053b0:	d02f      	beq.n	8005412 <pvPortMalloc+0xca>
 80053b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b6:	f383 8811 	msr	BASEPRI, r3
 80053ba:	f3bf 8f6f 	isb	sy
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	e7fe      	b.n	80053c2 <pvPortMalloc+0x7a>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053c4:	f7ff f992 	bl	80046ec <xTaskResumeAll>
 80053c8:	2600      	movs	r6, #0
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 80053ca:	4630      	mov	r0, r6
 80053cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053d0:	075f      	lsls	r7, r3, #29
 80053d2:	d057      	beq.n	8005484 <pvPortMalloc+0x13c>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053d4:	1dda      	adds	r2, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053d6:	f022 0207 	bic.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053da:	4610      	mov	r0, r2
 80053dc:	f503 6140 	add.w	r1, r3, #3072	; 0xc00
	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053e0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 80053e4:	2500      	movs	r5, #0
	uxAddress -= xHeapStructSize;
 80053e6:	3908      	subs	r1, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053e8:	f021 0107 	bic.w	r1, r1, #7
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80053ec:	1a8a      	subs	r2, r1, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053ee:	f8c3 0c00 	str.w	r0, [r3, #3072]	; 0xc00
	xStart.xBlockSize = ( size_t ) 0;
 80053f2:	f8c3 5c04 	str.w	r5, [r3, #3076]	; 0xc04
}
 80053f6:	4637      	mov	r7, r6
	pxEnd->pxNextFreeBlock = NULL;
 80053f8:	e9c1 5500 	strd	r5, r5, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053fc:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005400:	e9c0 1200 	strd	r1, r2, [r0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005404:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
	pxEnd = ( void * ) uxAddress;
 8005408:	f8c3 1c08 	str.w	r1, [r3, #3080]	; 0xc08
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800540c:	f8c3 6c0c 	str.w	r6, [r3, #3084]	; 0xc0c
}
 8005410:	e7a6      	b.n	8005360 <pvPortMalloc+0x18>
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005412:	4c25      	ldr	r4, [pc, #148]	; (80054a8 <pvPortMalloc+0x160>)
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005414:	f8c2 e004 	str.w	lr, [r2, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005418:	6045      	str	r5, [r0, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800541a:	46a6      	mov	lr, r4
 800541c:	6824      	ldr	r4, [r4, #0]
 800541e:	42a2      	cmp	r2, r4
 8005420:	d8fb      	bhi.n	800541a <pvPortMalloc+0xd2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005422:	f8de 5004 	ldr.w	r5, [lr, #4]
 8005426:	eb0e 0805 	add.w	r8, lr, r5
 800542a:	4542      	cmp	r2, r8
 800542c:	d12f      	bne.n	800548e <pvPortMalloc+0x146>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800542e:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8005432:	4672      	mov	r2, lr
 8005434:	4445      	add	r5, r8
 8005436:	f8ce 5004 	str.w	r5, [lr, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800543a:	eb02 0805 	add.w	r8, r2, r5
 800543e:	4544      	cmp	r4, r8
 8005440:	d027      	beq.n	8005492 <pvPortMalloc+0x14a>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005442:	6014      	str	r4, [r2, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005444:	4596      	cmp	lr, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005446:	6844      	ldr	r4, [r0, #4]
 8005448:	bf18      	it	ne
 800544a:	f8ce 2000 	strne.w	r2, [lr]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800544e:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005452:	ebac 0204 	sub.w	r2, ip, r4
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005456:	428a      	cmp	r2, r1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005458:	bf38      	it	cc
 800545a:	f8c3 2c10 	strcc.w	r2, [r3, #3088]	; 0xc10
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800545e:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
					pxBlock->pxNextFreeBlock = NULL;
 8005462:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005464:	433c      	orrs	r4, r7
					pxBlock->pxNextFreeBlock = NULL;
 8005466:	e9c0 3400 	strd	r3, r4, [r0]
	( void ) xTaskResumeAll();
 800546a:	f7ff f93f 	bl	80046ec <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800546e:	0773      	lsls	r3, r6, #29
 8005470:	d0ab      	beq.n	80053ca <pvPortMalloc+0x82>
 8005472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	e7fe      	b.n	8005482 <pvPortMalloc+0x13a>
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005484:	461a      	mov	r2, r3
 8005486:	4618      	mov	r0, r3
 8005488:	f503 6140 	add.w	r1, r3, #3072	; 0xc00
 800548c:	e7a8      	b.n	80053e0 <pvPortMalloc+0x98>
 800548e:	6855      	ldr	r5, [r2, #4]
 8005490:	e7d3      	b.n	800543a <pvPortMalloc+0xf2>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005492:	428c      	cmp	r4, r1
 8005494:	d0d5      	beq.n	8005442 <pvPortMalloc+0xfa>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005496:	6861      	ldr	r1, [r4, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005498:	6824      	ldr	r4, [r4, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800549a:	440d      	add	r5, r1
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800549c:	e9c2 4500 	strd	r4, r5, [r2]
 80054a0:	e7d0      	b.n	8005444 <pvPortMalloc+0xfc>
 80054a2:	bf00      	nop
 80054a4:	20000584 	.word	0x20000584
 80054a8:	20001184 	.word	0x20001184

080054ac <vPortFree>:
	if( pv != NULL )
 80054ac:	b1e8      	cbz	r0, 80054ea <vPortFree+0x3e>
{
 80054ae:	b570      	push	{r4, r5, r6, lr}
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054b0:	4d27      	ldr	r5, [pc, #156]	; (8005550 <vPortFree+0xa4>)
 80054b2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80054b6:	f8d5 2c0c 	ldr.w	r2, [r5, #3084]	; 0xc0c
 80054ba:	4604      	mov	r4, r0
 80054bc:	4213      	tst	r3, r2
 80054be:	d00b      	beq.n	80054d8 <vPortFree+0x2c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054c0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80054c4:	b191      	cbz	r1, 80054ec <vPortFree+0x40>
 80054c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	e7fe      	b.n	80054d6 <vPortFree+0x2a>
 80054d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054dc:	f383 8811 	msr	BASEPRI, r3
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054e8:	e7fe      	b.n	80054e8 <vPortFree+0x3c>
 80054ea:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054ec:	ea23 0302 	bic.w	r3, r3, r2
 80054f0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80054f4:	f7ff f850 	bl	8004598 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054f8:	f8d5 2c14 	ldr.w	r2, [r5, #3092]	; 0xc14
 80054fc:	f854 0c04 	ldr.w	r0, [r4, #-4]
		puc -= xHeapStructSize;
 8005500:	f1a4 0308 	sub.w	r3, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005504:	4402      	add	r2, r0
 8005506:	f8c5 2c14 	str.w	r2, [r5, #3092]	; 0xc14
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800550a:	f505 6240 	add.w	r2, r5, #3072	; 0xc00
 800550e:	4611      	mov	r1, r2
 8005510:	6812      	ldr	r2, [r2, #0]
 8005512:	4293      	cmp	r3, r2
 8005514:	d8fb      	bhi.n	800550e <vPortFree+0x62>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005516:	684c      	ldr	r4, [r1, #4]
 8005518:	190e      	adds	r6, r1, r4
 800551a:	42b3      	cmp	r3, r6
 800551c:	d00a      	beq.n	8005534 <vPortFree+0x88>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800551e:	181c      	adds	r4, r3, r0
 8005520:	42a2      	cmp	r2, r4
 8005522:	d00b      	beq.n	800553c <vPortFree+0x90>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005524:	601a      	str	r2, [r3, #0]
	if( pxIterator != pxBlockToInsert )
 8005526:	4299      	cmp	r1, r3
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005528:	bf18      	it	ne
 800552a:	600b      	strne	r3, [r1, #0]
}
 800552c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				( void ) xTaskResumeAll();
 8005530:	f7ff b8dc 	b.w	80046ec <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005534:	4420      	add	r0, r4
 8005536:	460b      	mov	r3, r1
 8005538:	6048      	str	r0, [r1, #4]
		pxBlockToInsert = pxIterator;
 800553a:	e7f0      	b.n	800551e <vPortFree+0x72>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800553c:	f8d5 4c08 	ldr.w	r4, [r5, #3080]	; 0xc08
 8005540:	42a2      	cmp	r2, r4
 8005542:	d0ef      	beq.n	8005524 <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005544:	ca14      	ldmia	r2, {r2, r4}
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005546:	4420      	add	r0, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005548:	e9c3 2000 	strd	r2, r0, [r3]
 800554c:	e7eb      	b.n	8005526 <vPortFree+0x7a>
 800554e:	bf00      	nop
 8005550:	20000584 	.word	0x20000584
 8005554:	00000000 	.word	0x00000000

08005558 <ADC_Service>:
uint32_t V_min = 17000;
uint32_t V_thresh;
int diff;
char dbounce;

void ADC_Service(){
 8005558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//Debug_Send("ADCR start\r\n");
	HAL_ADC_Start_DMA(&hadc1, adc, 4);
 800555c:	4dac      	ldr	r5, [pc, #688]	; (8005810 <ADC_Service+0x2b8>)
void ADC_Service(){
 800555e:	b09b      	sub	sp, #108	; 0x6c
	HAL_ADC_Start_DMA(&hadc1, adc, 4);
 8005560:	2204      	movs	r2, #4
 8005562:	4629      	mov	r1, r5
 8005564:	48ab      	ldr	r0, [pc, #684]	; (8005814 <ADC_Service+0x2bc>)
 8005566:	f7fb fe29 	bl	80011bc <HAL_ADC_Start_DMA>
	//HAL_DMA_PollForTransfer(&hadc.DMA_Handle, 1, 100);
	char temp[90];
	char temp1[10];
	//sprintf(temp, "1:%i  2:%i  3:%i  4:%i  5:%i  6:%i  7:%i  8:%i  9:%i\r\n",adc[0],adc[1],adc[2],adc[3],adc[4],adc[5],adc[6],adc[7],adc[8]);

	Main_V = GetVolt(adc[0]);	//10
 800556a:	682c      	ldr	r4, [r5, #0]
	//Main_V *= 2;
	System_V = GetVolt(adc[1]);	//11 missing
	Main_I = GetVolt(adc[2]);	//13
	Batt_V = GetVolt(adc[3]);	//1

	if (Batt_V > V_max){
 800556c:	4eaa      	ldr	r6, [pc, #680]	; (8005818 <ADC_Service+0x2c0>)
}

uint32_t GetVolt(uint32_t in){
	float temp;
	uint32_t val;
	temp = in;
 800556e:	4620      	mov	r0, r4
 8005570:	f7fb fa52 	bl	8000a18 <__aeabi_ui2f>
	//temp *= 0.8057;		//3.3v
	//temp *= 0.791;			//3.24v
	temp *= 0.798;			//3.27v
 8005574:	f7fb f8f2 	bl	800075c <__aeabi_f2d>
 8005578:	a3a3      	add	r3, pc, #652	; (adr r3, 8005808 <ADC_Service+0x2b0>)
 800557a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557e:	f7fa fe5f 	bl	8000240 <__aeabi_dmul>
 8005582:	f7fb f943 	bl	800080c <__aeabi_d2f>
	temp *= 11;				//4.7kohm || 47kohm
 8005586:	49a5      	ldr	r1, [pc, #660]	; (800581c <ADC_Service+0x2c4>)
 8005588:	f7fb fa9e 	bl	8000ac8 <__aeabi_fmul>
	val = temp;
 800558c:	f7fb fbec 	bl	8000d68 <__aeabi_f2uiz>
	Main_V = GetVolt(adc[0]);	//10
 8005590:	4ba3      	ldr	r3, [pc, #652]	; (8005820 <ADC_Service+0x2c8>)
	val += 400;	//compensation
 8005592:	f500 70c8 	add.w	r0, r0, #400	; 0x190
	Main_V = GetVolt(adc[0]);	//10
 8005596:	6018      	str	r0, [r3, #0]
	temp = in;
 8005598:	6868      	ldr	r0, [r5, #4]
 800559a:	f7fb fa3d 	bl	8000a18 <__aeabi_ui2f>
	temp *= 0.798;			//3.27v
 800559e:	f7fb f8dd 	bl	800075c <__aeabi_f2d>
 80055a2:	a399      	add	r3, pc, #612	; (adr r3, 8005808 <ADC_Service+0x2b0>)
 80055a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a8:	f7fa fe4a 	bl	8000240 <__aeabi_dmul>
 80055ac:	f7fb f92e 	bl	800080c <__aeabi_d2f>
	temp *= 11;				//4.7kohm || 47kohm
 80055b0:	499a      	ldr	r1, [pc, #616]	; (800581c <ADC_Service+0x2c4>)
 80055b2:	f7fb fa89 	bl	8000ac8 <__aeabi_fmul>
	val = temp;
 80055b6:	f7fb fbd7 	bl	8000d68 <__aeabi_f2uiz>
	System_V = GetVolt(adc[1]);	//11 missing
 80055ba:	4b9a      	ldr	r3, [pc, #616]	; (8005824 <ADC_Service+0x2cc>)
	val += 400;	//compensation
 80055bc:	f500 70c8 	add.w	r0, r0, #400	; 0x190
	System_V = GetVolt(adc[1]);	//11 missing
 80055c0:	6018      	str	r0, [r3, #0]
	temp = in;
 80055c2:	68a8      	ldr	r0, [r5, #8]
 80055c4:	f7fb fa28 	bl	8000a18 <__aeabi_ui2f>
	temp *= 0.798;			//3.27v
 80055c8:	f7fb f8c8 	bl	800075c <__aeabi_f2d>
 80055cc:	a38e      	add	r3, pc, #568	; (adr r3, 8005808 <ADC_Service+0x2b0>)
 80055ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d2:	f7fa fe35 	bl	8000240 <__aeabi_dmul>
 80055d6:	f7fb f919 	bl	800080c <__aeabi_d2f>
	temp *= 11;				//4.7kohm || 47kohm
 80055da:	4990      	ldr	r1, [pc, #576]	; (800581c <ADC_Service+0x2c4>)
 80055dc:	f7fb fa74 	bl	8000ac8 <__aeabi_fmul>
	val = temp;
 80055e0:	f7fb fbc2 	bl	8000d68 <__aeabi_f2uiz>
	Main_I = GetVolt(adc[2]);	//13
 80055e4:	4b90      	ldr	r3, [pc, #576]	; (8005828 <ADC_Service+0x2d0>)
	val += 400;	//compensation
 80055e6:	f500 70c8 	add.w	r0, r0, #400	; 0x190
	Main_I = GetVolt(adc[2]);	//13
 80055ea:	6018      	str	r0, [r3, #0]
	temp = in;
 80055ec:	68e8      	ldr	r0, [r5, #12]
 80055ee:	f7fb fa13 	bl	8000a18 <__aeabi_ui2f>
	temp *= 0.798;			//3.27v
 80055f2:	f7fb f8b3 	bl	800075c <__aeabi_f2d>
 80055f6:	a384      	add	r3, pc, #528	; (adr r3, 8005808 <ADC_Service+0x2b0>)
 80055f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fc:	f7fa fe20 	bl	8000240 <__aeabi_dmul>
 8005600:	f7fb f904 	bl	800080c <__aeabi_d2f>
	temp *= 11;				//4.7kohm || 47kohm
 8005604:	4985      	ldr	r1, [pc, #532]	; (800581c <ADC_Service+0x2c4>)
 8005606:	f7fb fa5f 	bl	8000ac8 <__aeabi_fmul>
	val = temp;
 800560a:	f7fb fbad 	bl	8000d68 <__aeabi_f2uiz>
	if (Batt_V > V_max){
 800560e:	6833      	ldr	r3, [r6, #0]
	val += 400;	//compensation
 8005610:	f500 70c8 	add.w	r0, r0, #400	; 0x190
	Batt_V = GetVolt(adc[3]);	//1
 8005614:	4f85      	ldr	r7, [pc, #532]	; (800582c <ADC_Service+0x2d4>)
	if (Batt_V > V_max){
 8005616:	4283      	cmp	r3, r0
	Batt_V = GetVolt(adc[3]);	//1
 8005618:	6038      	str	r0, [r7, #0]
	if (Batt_V > V_max){
 800561a:	d327      	bcc.n	800566c <ADC_Service+0x114>
 800561c:	f8df c244 	ldr.w	ip, [pc, #580]	; 8005864 <ADC_Service+0x30c>
	if (Batt_V < V_min) V_min = Batt_V;
 8005620:	f8df 9244 	ldr.w	r9, [pc, #580]	; 8005868 <ADC_Service+0x310>
	V_thresh = V_max - 50;
 8005624:	3b32      	subs	r3, #50	; 0x32
	if (Batt_V < V_min) V_min = Batt_V;
 8005626:	f8d9 2000 	ldr.w	r2, [r9]
	V_thresh = V_max - 50;
 800562a:	f8df 8240 	ldr.w	r8, [pc, #576]	; 800586c <ADC_Service+0x314>
	if (Batt_V < V_min) V_min = Batt_V;
 800562e:	4282      	cmp	r2, r0
 8005630:	bf88      	it	hi
 8005632:	f8c9 0000 	strhi.w	r0, [r9]
	if (Batt_V < V_thresh){
 8005636:	4283      	cmp	r3, r0
	V_thresh = V_max - 50;
 8005638:	f8c8 3000 	str.w	r3, [r8]
	if (Batt_V < V_thresh){
 800563c:	d92b      	bls.n	8005696 <ADC_Service+0x13e>
		dbounce++;
 800563e:	f89c 3000 	ldrb.w	r3, [ip]
 8005642:	3301      	adds	r3, #1
 8005644:	b2db      	uxtb	r3, r3
		if (dbounce > 2){
 8005646:	2b02      	cmp	r3, #2
		dbounce++;
 8005648:	f88c 3000 	strb.w	r3, [ip]
		if (dbounce > 2){
 800564c:	f240 80d2 	bls.w	80057f4 <ADC_Service+0x29c>
			dbounce = 0;
 8005650:	2300      	movs	r3, #0
			HAL_GPIO_WritePin(SOL_CNTRL_GPIO_Port, SOL_CNTRL_Pin, GPIO_PIN_SET);
 8005652:	2201      	movs	r2, #1
 8005654:	2180      	movs	r1, #128	; 0x80
			V_max = Batt_V;
 8005656:	6030      	str	r0, [r6, #0]
			HAL_GPIO_WritePin(SOL_CNTRL_GPIO_Port, SOL_CNTRL_Pin, GPIO_PIN_SET);
 8005658:	4875      	ldr	r0, [pc, #468]	; (8005830 <ADC_Service+0x2d8>)
			dbounce = 0;
 800565a:	f88c 3000 	strb.w	r3, [ip]
			HAL_GPIO_WritePin(SOL_CNTRL_GPIO_Port, SOL_CNTRL_Pin, GPIO_PIN_SET);
 800565e:	f7fc fa5d 	bl	8001b1c <HAL_GPIO_WritePin>
			GSM_Send("Charging done\r\n");
 8005662:	4874      	ldr	r0, [pc, #464]	; (8005834 <ADC_Service+0x2dc>)
 8005664:	f000 f904 	bl	8005870 <GSM_Send>
 8005668:	682c      	ldr	r4, [r5, #0]
 800566a:	e017      	b.n	800569c <ADC_Service+0x144>
		if(diff > 100) dbounce++;
 800566c:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8005864 <ADC_Service+0x30c>
		diff = Batt_V - V_max;
 8005670:	4971      	ldr	r1, [pc, #452]	; (8005838 <ADC_Service+0x2e0>)
 8005672:	1ac2      	subs	r2, r0, r3
		if(diff > 100) dbounce++;
 8005674:	2a64      	cmp	r2, #100	; 0x64
		diff = Batt_V - V_max;
 8005676:	600a      	str	r2, [r1, #0]
		if(diff > 100) dbounce++;
 8005678:	f89c 2000 	ldrb.w	r2, [ip]
 800567c:	bfc2      	ittt	gt
 800567e:	3201      	addgt	r2, #1
 8005680:	b2d2      	uxtbgt	r2, r2
 8005682:	f88c 2000 	strbgt.w	r2, [ip]
		if (dbounce > 2){
 8005686:	2a02      	cmp	r2, #2
 8005688:	d9ca      	bls.n	8005620 <ADC_Service+0xc8>
			dbounce = 0;
 800568a:	2200      	movs	r2, #0
 800568c:	4603      	mov	r3, r0
			V_max = Batt_V;
 800568e:	6030      	str	r0, [r6, #0]
			dbounce = 0;
 8005690:	f88c 2000 	strb.w	r2, [ip]
 8005694:	e7c4      	b.n	8005620 <ADC_Service+0xc8>
	else dbounce = 0;
 8005696:	2300      	movs	r3, #0
 8005698:	f88c 3000 	strb.w	r3, [ip]
	strcpy(temp, "1:");
 800569c:	4b67      	ldr	r3, [pc, #412]	; (800583c <ADC_Service+0x2e4>)
	itoa(adc[0],temp1,10);
 800569e:	220a      	movs	r2, #10
	strcpy(temp, "1:");
 80056a0:	681b      	ldr	r3, [r3, #0]
	itoa(adc[0],temp1,10);
 80056a2:	4669      	mov	r1, sp
	strcpy(temp, "1:");
 80056a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
	itoa(adc[0],temp1,10);
 80056a8:	4620      	mov	r0, r4
	strcpy(temp, "1:");
 80056aa:	ac03      	add	r4, sp, #12
 80056ac:	f88d c00e 	strb.w	ip, [sp, #14]
 80056b0:	f8ad 300c 	strh.w	r3, [sp, #12]
	itoa(adc[0],temp1,10);
 80056b4:	f001 fd32 	bl	800711c <itoa>
	strcat(temp,temp1);
 80056b8:	4620      	mov	r0, r4
 80056ba:	f7fa fdb9 	bl	8000230 <strlen>
 80056be:	4669      	mov	r1, sp
 80056c0:	4420      	add	r0, r4
 80056c2:	f001 fd5b 	bl	800717c <stpcpy>
 80056c6:	4603      	mov	r3, r0
	strcat(temp,"  2:");
 80056c8:	4a5d      	ldr	r2, [pc, #372]	; (8005840 <ADC_Service+0x2e8>)
	itoa(adc[1],temp1,10);
 80056ca:	4669      	mov	r1, sp
	strcat(temp,"  2:");
 80056cc:	6810      	ldr	r0, [r2, #0]
 80056ce:	7912      	ldrb	r2, [r2, #4]
 80056d0:	6018      	str	r0, [r3, #0]
 80056d2:	711a      	strb	r2, [r3, #4]
	itoa(adc[1],temp1,10);
 80056d4:	6868      	ldr	r0, [r5, #4]
 80056d6:	220a      	movs	r2, #10
 80056d8:	f001 fd20 	bl	800711c <itoa>
	strcat(temp,temp1);
 80056dc:	4620      	mov	r0, r4
 80056de:	f7fa fda7 	bl	8000230 <strlen>
 80056e2:	4669      	mov	r1, sp
 80056e4:	4420      	add	r0, r4
 80056e6:	f001 fd49 	bl	800717c <stpcpy>
 80056ea:	4603      	mov	r3, r0
	strcat(temp,"  3:");
 80056ec:	4a55      	ldr	r2, [pc, #340]	; (8005844 <ADC_Service+0x2ec>)
	itoa(adc[2],temp1,10);
 80056ee:	4669      	mov	r1, sp
	strcat(temp,"  3:");
 80056f0:	6810      	ldr	r0, [r2, #0]
 80056f2:	7912      	ldrb	r2, [r2, #4]
 80056f4:	6018      	str	r0, [r3, #0]
 80056f6:	711a      	strb	r2, [r3, #4]
	itoa(adc[2],temp1,10);
 80056f8:	68a8      	ldr	r0, [r5, #8]
 80056fa:	220a      	movs	r2, #10
 80056fc:	f001 fd0e 	bl	800711c <itoa>
	strcat(temp,temp1);
 8005700:	4620      	mov	r0, r4
 8005702:	f7fa fd95 	bl	8000230 <strlen>
 8005706:	4669      	mov	r1, sp
 8005708:	4420      	add	r0, r4
 800570a:	f001 fd37 	bl	800717c <stpcpy>
 800570e:	4603      	mov	r3, r0
	strcat(temp,"  4:");
 8005710:	4a4d      	ldr	r2, [pc, #308]	; (8005848 <ADC_Service+0x2f0>)
	itoa(adc[3],temp1,10);
 8005712:	4669      	mov	r1, sp
	strcat(temp,"  4:");
 8005714:	6810      	ldr	r0, [r2, #0]
 8005716:	7912      	ldrb	r2, [r2, #4]
 8005718:	6018      	str	r0, [r3, #0]
 800571a:	711a      	strb	r2, [r3, #4]
	itoa(adc[3],temp1,10);
 800571c:	68e8      	ldr	r0, [r5, #12]
 800571e:	220a      	movs	r2, #10
 8005720:	f001 fcfc 	bl	800711c <itoa>
	strcat(temp,temp1);
 8005724:	4620      	mov	r0, r4
 8005726:	f7fa fd83 	bl	8000230 <strlen>
 800572a:	4669      	mov	r1, sp
 800572c:	4420      	add	r0, r4
 800572e:	f001 fd25 	bl	800717c <stpcpy>
	strcat(temp,"\r\n");
 8005732:	4b46      	ldr	r3, [pc, #280]	; (800584c <ADC_Service+0x2f4>)
	strcpy(temp, "B:");
 8005734:	4a46      	ldr	r2, [pc, #280]	; (8005850 <ADC_Service+0x2f8>)
	strcat(temp,"\r\n");
 8005736:	f8b3 b000 	ldrh.w	fp, [r3]
 800573a:	f893 a002 	ldrb.w	sl, [r3, #2]
	strcpy(temp, "B:");
 800573e:	6813      	ldr	r3, [r2, #0]
	strcat(temp,"\r\n");
 8005740:	f8a0 b000 	strh.w	fp, [r0]
 8005744:	f880 a002 	strb.w	sl, [r0, #2]
	strcpy(temp, "B:");
 8005748:	0c1d      	lsrs	r5, r3, #16
	itoa(Batt_V,temp1,10);
 800574a:	220a      	movs	r2, #10
 800574c:	4669      	mov	r1, sp
 800574e:	6838      	ldr	r0, [r7, #0]
	strcpy(temp, "B:");
 8005750:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005754:	f88d 500e 	strb.w	r5, [sp, #14]
	itoa(Batt_V,temp1,10);
 8005758:	f001 fce0 	bl	800711c <itoa>
	strcat(temp,temp1);
 800575c:	4620      	mov	r0, r4
 800575e:	f7fa fd67 	bl	8000230 <strlen>
 8005762:	4669      	mov	r1, sp
 8005764:	4420      	add	r0, r4
 8005766:	f001 fd09 	bl	800717c <stpcpy>
 800576a:	4603      	mov	r3, r0
	strcat(temp,"  T:");
 800576c:	4a39      	ldr	r2, [pc, #228]	; (8005854 <ADC_Service+0x2fc>)
	itoa(V_thresh,temp1,10);
 800576e:	4669      	mov	r1, sp
	strcat(temp,"  T:");
 8005770:	6810      	ldr	r0, [r2, #0]
 8005772:	7912      	ldrb	r2, [r2, #4]
 8005774:	6018      	str	r0, [r3, #0]
 8005776:	711a      	strb	r2, [r3, #4]
	itoa(V_thresh,temp1,10);
 8005778:	f8d8 0000 	ldr.w	r0, [r8]
 800577c:	220a      	movs	r2, #10
 800577e:	f001 fccd 	bl	800711c <itoa>
	strcat(temp,temp1);
 8005782:	4620      	mov	r0, r4
 8005784:	f7fa fd54 	bl	8000230 <strlen>
 8005788:	4669      	mov	r1, sp
 800578a:	4420      	add	r0, r4
 800578c:	f001 fcf6 	bl	800717c <stpcpy>
 8005790:	4603      	mov	r3, r0
	strcat(temp," M:");
 8005792:	4a31      	ldr	r2, [pc, #196]	; (8005858 <ADC_Service+0x300>)
	itoa(counter,temp1,10);
 8005794:	4d31      	ldr	r5, [pc, #196]	; (800585c <ADC_Service+0x304>)
	strcat(temp," M:");
 8005796:	6810      	ldr	r0, [r2, #0]
	itoa(V_max,temp1,10);
 8005798:	4669      	mov	r1, sp
	strcat(temp," M:");
 800579a:	6018      	str	r0, [r3, #0]
	itoa(V_max,temp1,10);
 800579c:	220a      	movs	r2, #10
 800579e:	6830      	ldr	r0, [r6, #0]
 80057a0:	f001 fcbc 	bl	800711c <itoa>
	strcat(temp,temp1);
 80057a4:	4669      	mov	r1, sp
 80057a6:	4620      	mov	r0, r4
 80057a8:	f001 fcf1 	bl	800718e <strcat>
	itoa(counter,temp1,10);
 80057ac:	4669      	mov	r1, sp
 80057ae:	220a      	movs	r2, #10
 80057b0:	6828      	ldr	r0, [r5, #0]
 80057b2:	f001 fcb3 	bl	800711c <itoa>
	strcat(temp,"  C:");
 80057b6:	4620      	mov	r0, r4
 80057b8:	f7fa fd3a 	bl	8000230 <strlen>
 80057bc:	4603      	mov	r3, r0
 80057be:	4928      	ldr	r1, [pc, #160]	; (8005860 <ADC_Service+0x308>)
 80057c0:	1d02      	adds	r2, r0, #4
 80057c2:	6808      	ldr	r0, [r1, #0]
	strcat(temp,temp1);
 80057c4:	4669      	mov	r1, sp
	strcat(temp,"  C:");
 80057c6:	50e0      	str	r0, [r4, r3]
	strcat(temp,temp1);
 80057c8:	18a0      	adds	r0, r4, r2
 80057ca:	f001 fcd7 	bl	800717c <stpcpy>
	strcat(temp,"\r\n");
 80057ce:	f8a0 b000 	strh.w	fp, [r0]
 80057d2:	f880 a002 	strb.w	sl, [r0, #2]
	counter++;
 80057d6:	682b      	ldr	r3, [r5, #0]
 80057d8:	3301      	adds	r3, #1
	if (counter == 4){
 80057da:	2b04      	cmp	r3, #4
	counter++;
 80057dc:	602b      	str	r3, [r5, #0]
	if (counter == 4){
 80057de:	d103      	bne.n	80057e8 <ADC_Service+0x290>
		V_max = Batt_V;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	6033      	str	r3, [r6, #0]
		V_min = Batt_V;
 80057e4:	f8c9 3000 	str.w	r3, [r9]
	GSM_Send(temp);
 80057e8:	4620      	mov	r0, r4
 80057ea:	f000 f841 	bl	8005870 <GSM_Send>
}
 80057ee:	b01b      	add	sp, #108	; 0x6c
 80057f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			HAL_GPIO_WritePin(SOL_CNTRL_GPIO_Port, SOL_CNTRL_Pin, GPIO_PIN_RESET);
 80057f4:	2200      	movs	r2, #0
 80057f6:	2180      	movs	r1, #128	; 0x80
 80057f8:	480d      	ldr	r0, [pc, #52]	; (8005830 <ADC_Service+0x2d8>)
 80057fa:	f7fc f98f 	bl	8001b1c <HAL_GPIO_WritePin>
 80057fe:	682c      	ldr	r4, [r5, #0]
 8005800:	e74c      	b.n	800569c <ADC_Service+0x144>
 8005802:	bf00      	nop
 8005804:	f3af 8000 	nop.w
 8005808:	4bc6a7f0 	.word	0x4bc6a7f0
 800580c:	3fe98937 	.word	0x3fe98937
 8005810:	200018ec 	.word	0x200018ec
 8005814:	20002a94 	.word	0x20002a94
 8005818:	20001940 	.word	0x20001940
 800581c:	41300000 	.word	0x41300000
 8005820:	20001944 	.word	0x20001944
 8005824:	2000193c 	.word	0x2000193c
 8005828:	2000194c 	.word	0x2000194c
 800582c:	200018e4 	.word	0x200018e4
 8005830:	40011000 	.word	0x40011000
 8005834:	08007adc 	.word	0x08007adc
 8005838:	20001948 	.word	0x20001948
 800583c:	08007aec 	.word	0x08007aec
 8005840:	08007af0 	.word	0x08007af0
 8005844:	08007af8 	.word	0x08007af8
 8005848:	08007b00 	.word	0x08007b00
 800584c:	08007cb4 	.word	0x08007cb4
 8005850:	08007b08 	.word	0x08007b08
 8005854:	08007b0c 	.word	0x08007b0c
 8005858:	08007b14 	.word	0x08007b14
 800585c:	2000119c 	.word	0x2000119c
 8005860:	08007b18 	.word	0x08007b18
 8005864:	200018e0 	.word	0x200018e0
 8005868:	2000000c 	.word	0x2000000c
 800586c:	200018e8 	.word	0x200018e8

08005870 <GSM_Send>:
	//}


}

void GSM_Send(char* data){
 8005870:	b538      	push	{r3, r4, r5, lr}
 8005872:	4604      	mov	r4, r0
	int size;
	int timeout = 5;
	size = strlen(data);
 8005874:	f7fa fcdc 	bl	8000230 <strlen>
	//HAL_UART_Abort_IT(&huart1);
	HAL_UART_Transmit(&huart1, data, size, timeout);
 8005878:	4d06      	ldr	r5, [pc, #24]	; (8005894 <GSM_Send+0x24>)
 800587a:	4621      	mov	r1, r4
 800587c:	b282      	uxth	r2, r0
 800587e:	2305      	movs	r3, #5
 8005880:	4628      	mov	r0, r5
 8005882:	f7fd fc61 	bl	8003148 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart1, (uint8_t *) dummy, 150);
 8005886:	4628      	mov	r0, r5
	//HAL_UART_Transmit_IT(&huart1, data, size);

}
 8005888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_UART_Receive_IT(&huart1, (uint8_t *) dummy, 150);
 800588c:	2296      	movs	r2, #150	; 0x96
 800588e:	4902      	ldr	r1, [pc, #8]	; (8005898 <GSM_Send+0x28>)
 8005890:	f7fd bce2 	b.w	8003258 <HAL_UART_Receive_IT>
 8005894:	20002ac4 	.word	0x20002ac4
 8005898:	20001f80 	.word	0x20001f80

0800589c <LCD_Init>:
I_D Control;
LCD_State lcdState = Initalize;
char LCD[15];
extern I2C_HandleTypeDef hi2c1;

void LCD_Init(){
 800589c:	b570      	push	{r4, r5, r6, lr}
	LCD[3] = 0x39;			//Function
	LCD[4] = 0x14;			//Oscillator
	LCD[5] = 0x74;
	LCD[6] = 0x54;
	LCD[7] = 0x6F;
	LCD[8] = 0x0C;
 800589e:	230c      	movs	r3, #12
	LCD[9] = 0x01;
	LCD[10] = 0x00;
 80058a0:	2400      	movs	r4, #0
	LCD[9] = 0x01;
 80058a2:	2001      	movs	r0, #1
		data++;
		index++;
		lenc--;
	}
	//HAL_I2C_Master_Transmit(&hi2c1, 0x7C, temp, len1, 10);
	HAL_I2C_Master_Transmit(&hi2c1, 0x7C, temp, len1, 10);		//debug
 80058a4:	260a      	movs	r6, #10
	LCD[0] = 0x00;
 80058a6:	4a12      	ldr	r2, [pc, #72]	; (80058f0 <LCD_Init+0x54>)
 80058a8:	4912      	ldr	r1, [pc, #72]	; (80058f4 <LCD_Init+0x58>)
	LCD[8] = 0x0C;
 80058aa:	7213      	strb	r3, [r2, #8]
	LCD[0] = 0x00;
 80058ac:	6011      	str	r1, [r2, #0]
 80058ae:	f101 5159 	add.w	r1, r1, #910163968	; 0x36400000
 80058b2:	f101 1114 	add.w	r1, r1, #1310740	; 0x140014
 80058b6:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80058ba:	6051      	str	r1, [r2, #4]
	LCD[9] = 0x01;
 80058bc:	7250      	strb	r0, [r2, #9]
 80058be:	6811      	ldr	r1, [r2, #0]
 80058c0:	6850      	ldr	r0, [r2, #4]
	LCD[10] = 0x00;
 80058c2:	7294      	strb	r4, [r2, #10]
void LCD_Init(){
 80058c4:	b088      	sub	sp, #32
 80058c6:	6895      	ldr	r5, [r2, #8]
 80058c8:	f8cd 100d 	str.w	r1, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, 0x7C, temp, len1, 10);		//debug
 80058cc:	eb0d 0203 	add.w	r2, sp, r3
 80058d0:	217c      	movs	r1, #124	; 0x7c
 80058d2:	f8cd 0011 	str.w	r0, [sp, #17]
 80058d6:	9600      	str	r6, [sp, #0]
 80058d8:	4807      	ldr	r0, [pc, #28]	; (80058f8 <LCD_Init+0x5c>)
 80058da:	f8cd 5015 	str.w	r5, [sp, #21]
	if (control == Instruction) temp[0] = 0x00;		//instruction
 80058de:	f88d 400c 	strb.w	r4, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, 0x7C, temp, len1, 10);		//debug
 80058e2:	f7fc fa79 	bl	8001dd8 <HAL_I2C_Master_Transmit>
	Debug_Send("LCD initialize\r\n");
 80058e6:	4805      	ldr	r0, [pc, #20]	; (80058fc <LCD_Init+0x60>)
 80058e8:	f000 f856 	bl	8005998 <Debug_Send>
}
 80058ec:	b008      	add	sp, #32
 80058ee:	bd70      	pop	{r4, r5, r6, pc}
 80058f0:	20001fb8 	.word	0x20001fb8
 80058f4:	39003800 	.word	0x39003800
 80058f8:	200029a0 	.word	0x200029a0
 80058fc:	08007b20 	.word	0x08007b20

08005900 <LCD_Print>:
}

void LCD_Print(char* data){
 8005900:	b530      	push	{r4, r5, lr}
 8005902:	b089      	sub	sp, #36	; 0x24
 8005904:	4605      	mov	r5, r0
	int len;
	len = strlen(data);
 8005906:	f7fa fc93 	bl	8000230 <strlen>
	else temp[0] = 0x40;							//data
 800590a:	2340      	movs	r3, #64	; 0x40
		temp[index] = *data;
 800590c:	1c44      	adds	r4, r0, #1
 800590e:	4629      	mov	r1, r5
 8005910:	4622      	mov	r2, r4
 8005912:	f10d 000d 	add.w	r0, sp, #13
	else temp[0] = 0x40;							//data
 8005916:	f88d 300c 	strb.w	r3, [sp, #12]
	while (lenc){
 800591a:	f001 fc01 	bl	8007120 <memcpy>
	HAL_I2C_Master_Transmit(&hi2c1, 0x7C, temp, len1, 10);		//debug
 800591e:	220a      	movs	r2, #10
 8005920:	217c      	movs	r1, #124	; 0x7c
 8005922:	9200      	str	r2, [sp, #0]
 8005924:	b2a3      	uxth	r3, r4
 8005926:	aa03      	add	r2, sp, #12
 8005928:	4802      	ldr	r0, [pc, #8]	; (8005934 <LCD_Print+0x34>)
 800592a:	f7fc fa55 	bl	8001dd8 <HAL_I2C_Master_Transmit>
	LCD_Send(Data, data, len);
}
 800592e:	b009      	add	sp, #36	; 0x24
 8005930:	bd30      	pop	{r4, r5, pc}
 8005932:	bf00      	nop
 8005934:	200029a0 	.word	0x200029a0

08005938 <ClearScreenF>:

void ClearScreenF(){
 8005938:	b510      	push	{r4, lr}
	LCD[0] = 0x00;		//instruction
	LCD[1] = 0x01;
	HAL_I2C_Master_Transmit(&hi2c1, 0x7C, LCD, 2, 10);
 800593a:	230a      	movs	r3, #10
	LCD[0] = 0x00;		//instruction
 800593c:	2000      	movs	r0, #0
	LCD[1] = 0x01;
 800593e:	2401      	movs	r4, #1
	LCD[0] = 0x00;		//instruction
 8005940:	4a07      	ldr	r2, [pc, #28]	; (8005960 <ClearScreenF+0x28>)
void ClearScreenF(){
 8005942:	b082      	sub	sp, #8
	HAL_I2C_Master_Transmit(&hi2c1, 0x7C, LCD, 2, 10);
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	217c      	movs	r1, #124	; 0x7c
	LCD[0] = 0x00;		//instruction
 8005948:	7010      	strb	r0, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, 0x7C, LCD, 2, 10);
 800594a:	2302      	movs	r3, #2
	LCD[1] = 0x01;
 800594c:	7054      	strb	r4, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, 0x7C, LCD, 2, 10);
 800594e:	4805      	ldr	r0, [pc, #20]	; (8005964 <ClearScreenF+0x2c>)
 8005950:	f7fc fa42 	bl	8001dd8 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, 0x7C, LCD, 1, 20);
		if (LCD[0]&0x80) busy = 1;
		else busy = 0;

	}
	HAL_Delay(5);
 8005954:	2005      	movs	r0, #5

}
 8005956:	b002      	add	sp, #8
 8005958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(5);
 800595c:	f7fb ba48 	b.w	8000df0 <HAL_Delay>
 8005960:	20001fb8 	.word	0x20001fb8
 8005964:	200029a0 	.word	0x200029a0

08005968 <LineSelect>:

void LineSelect(int in){
 8005968:	b510      	push	{r4, lr}
	LCD[0] = 0x00;		//instruction
	LCD[1] = in;
	HAL_I2C_Master_Transmit(&hi2c1, 0x7C, LCD, 2, 10);
 800596a:	230a      	movs	r3, #10
	LCD[0] = 0x00;		//instruction
 800596c:	2400      	movs	r4, #0
 800596e:	4a08      	ldr	r2, [pc, #32]	; (8005990 <LineSelect+0x28>)
void LineSelect(int in){
 8005970:	b082      	sub	sp, #8
	HAL_I2C_Master_Transmit(&hi2c1, 0x7C, LCD, 2, 10);
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	217c      	movs	r1, #124	; 0x7c
	LCD[1] = in;
 8005976:	7050      	strb	r0, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, 0x7C, LCD, 2, 10);
 8005978:	2302      	movs	r3, #2
	LCD[0] = 0x00;		//instruction
 800597a:	7014      	strb	r4, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, 0x7C, LCD, 2, 10);
 800597c:	4805      	ldr	r0, [pc, #20]	; (8005994 <LineSelect+0x2c>)
 800597e:	f7fc fa2b 	bl	8001dd8 <HAL_I2C_Master_Transmit>
	HAL_Delay(15);
 8005982:	200f      	movs	r0, #15
}
 8005984:	b002      	add	sp, #8
 8005986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(15);
 800598a:	f7fb ba31 	b.w	8000df0 <HAL_Delay>
 800598e:	bf00      	nop
 8005990:	20001fb8 	.word	0x20001fb8
 8005994:	200029a0 	.word	0x200029a0

08005998 <Debug_Send>:
#include "stm32f1xx_hal.h"
#include "cmsis_os.h"
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart3;

void Debug_Send(char* data){
 8005998:	b510      	push	{r4, lr}
 800599a:	4604      	mov	r4, r0
	int size;
	int timeout = 5;
	size = strlen(data);
 800599c:	f7fa fc48 	bl	8000230 <strlen>
	HAL_UART_Transmit(&huart3, data, size, timeout);
 80059a0:	4621      	mov	r1, r4
	//HAL_UART_Transmit_IT(&huart3, data, size);
	//HAL_UART_Receive_IT(&huart1, data, size);
}
 80059a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&huart3, data, size, timeout);
 80059a6:	b282      	uxth	r2, r0
 80059a8:	2305      	movs	r3, #5
 80059aa:	4801      	ldr	r0, [pc, #4]	; (80059b0 <Debug_Send+0x18>)
 80059ac:	f7fd bbcc 	b.w	8003148 <HAL_UART_Transmit>
 80059b0:	2000295c 	.word	0x2000295c

080059b4 <Wifi_Init>:
int len;
uint8_t temp1[500];
uint8_t ConnID[4];


void Wifi_Init(){
 80059b4:	b510      	push	{r4, lr}
	GSM_Send("Wifi init\r\n");
 80059b6:	480a      	ldr	r0, [pc, #40]	; (80059e0 <Wifi_Init+0x2c>)
 80059b8:	f7ff ff5a 	bl	8005870 <GSM_Send>
	HAL_UART_Receive_IT(&huart2, (uint8_t *) dummy, 40);
 80059bc:	2228      	movs	r2, #40	; 0x28
 80059be:	4909      	ldr	r1, [pc, #36]	; (80059e4 <Wifi_Init+0x30>)
 80059c0:	4809      	ldr	r0, [pc, #36]	; (80059e8 <Wifi_Init+0x34>)
 80059c2:	f7fd fc49 	bl	8003258 <HAL_UART_Receive_IT>
	//__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);

	//HAL_UART_Receive(&huart3, dummy, 50, 5);
	//strcpy(quality,"N/A");

	wifiFlag.connect = 0;
 80059c6:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	wifiFlag.list = 0;
	wifiFlag.ip = 0;
	wifiFlag.print = 1;
	WifiState = GetIP;
 80059ca:	2204      	movs	r2, #4
	wifiFlag.connect = 0;
 80059cc:	4907      	ldr	r1, [pc, #28]	; (80059ec <Wifi_Init+0x38>)
	WifiState = GetIP;
 80059ce:	4b08      	ldr	r3, [pc, #32]	; (80059f0 <Wifi_Init+0x3c>)
	wifiFlag.connect = 0;
 80059d0:	600c      	str	r4, [r1, #0]
	WifiState = GetIP;
 80059d2:	701a      	strb	r2, [r3, #0]
	GSM_Send("Done\r\n");
 80059d4:	4807      	ldr	r0, [pc, #28]	; (80059f4 <Wifi_Init+0x40>)
	//WifiState = CPMUX;
}
 80059d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GSM_Send("Done\r\n");
 80059da:	f7ff bf49 	b.w	8005870 <GSM_Send>
 80059de:	bf00      	nop
 80059e0:	08007b90 	.word	0x08007b90
 80059e4:	20001f80 	.word	0x20001f80
 80059e8:	20002bb0 	.word	0x20002bb0
 80059ec:	2000294c 	.word	0x2000294c
 80059f0:	20000010 	.word	0x20000010
 80059f4:	08007b9c 	.word	0x08007b9c

080059f8 <Wifi_Service>:

void Wifi_Service(){
 80059f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Wifi_Send("AT\r\n");
	//sprintf(temp, "Wifi service state-%i\r\n", WifiState);
	//GSM_Send(temp);
	//GSM_Send("Wifi service\r\n");
	switch(WifiState){
 80059fa:	4c86      	ldr	r4, [pc, #536]	; (8005c14 <Wifi_Service+0x21c>)
 80059fc:	7823      	ldrb	r3, [r4, #0]
 80059fe:	3b01      	subs	r3, #1
 8005a00:	2b0e      	cmp	r3, #14
 8005a02:	d81d      	bhi.n	8005a40 <Wifi_Service+0x48>
 8005a04:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005a08:	0021001d 	.word	0x0021001d
 8005a0c:	003e002f 	.word	0x003e002f
 8005a10:	005d004f 	.word	0x005d004f
 8005a14:	00860082 	.word	0x00860082
 8005a18:	00a10093 	.word	0x00a10093
 8005a1c:	00a900a5 	.word	0x00a900a5
 8005a20:	00e600ad 	.word	0x00e600ad
 8005a24:	000f      	.short	0x000f

void Wifi_Send(char* data){
	int size;
	int timeout = 5;
	size = strlen(data);
	HAL_UART_Transmit(&huart2, data, size, timeout);
 8005a26:	2305      	movs	r3, #5
 8005a28:	220a      	movs	r2, #10
 8005a2a:	497b      	ldr	r1, [pc, #492]	; (8005c18 <Wifi_Service+0x220>)
 8005a2c:	487b      	ldr	r0, [pc, #492]	; (8005c1c <Wifi_Service+0x224>)
 8005a2e:	f7fd fb8b 	bl	8003148 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, (uint8_t *) dummy, 140);
 8005a32:	228c      	movs	r2, #140	; 0x8c
 8005a34:	497a      	ldr	r1, [pc, #488]	; (8005c20 <Wifi_Service+0x228>)
 8005a36:	4879      	ldr	r0, [pc, #484]	; (8005c1c <Wifi_Service+0x224>)
 8005a38:	f7fd fc0e 	bl	8003258 <HAL_UART_Receive_IT>
		WifiState = 0;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	7023      	strb	r3, [r4, #0]
}
 8005a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	HAL_UART_Transmit(&huart2, data, size, timeout);
 8005a42:	2305      	movs	r3, #5
 8005a44:	2208      	movs	r2, #8
 8005a46:	4977      	ldr	r1, [pc, #476]	; (8005c24 <Wifi_Service+0x22c>)
 8005a48:	e7f0      	b.n	8005a2c <Wifi_Service+0x34>
 8005a4a:	2305      	movs	r3, #5
 8005a4c:	2204      	movs	r2, #4
 8005a4e:	4976      	ldr	r1, [pc, #472]	; (8005c28 <Wifi_Service+0x230>)
 8005a50:	4872      	ldr	r0, [pc, #456]	; (8005c1c <Wifi_Service+0x224>)
 8005a52:	f7fd fb79 	bl	8003148 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, (uint8_t *) dummy, 140);
 8005a56:	228c      	movs	r2, #140	; 0x8c
 8005a58:	4971      	ldr	r1, [pc, #452]	; (8005c20 <Wifi_Service+0x228>)
 8005a5a:	4870      	ldr	r0, [pc, #448]	; (8005c1c <Wifi_Service+0x224>)
 8005a5c:	f7fd fbfc 	bl	8003258 <HAL_UART_Receive_IT>
		WifiState = CheckConnect;
 8005a60:	2305      	movs	r3, #5
 8005a62:	7023      	strb	r3, [r4, #0]
}
 8005a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	HAL_UART_Transmit(&huart2, data, size, timeout);
 8005a66:	2305      	movs	r3, #5
 8005a68:	220a      	movs	r2, #10
 8005a6a:	4970      	ldr	r1, [pc, #448]	; (8005c2c <Wifi_Service+0x234>)
 8005a6c:	486b      	ldr	r0, [pc, #428]	; (8005c1c <Wifi_Service+0x224>)
 8005a6e:	f7fd fb6b 	bl	8003148 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, (uint8_t *) dummy, 140);
 8005a72:	228c      	movs	r2, #140	; 0x8c
 8005a74:	496a      	ldr	r1, [pc, #424]	; (8005c20 <Wifi_Service+0x228>)
 8005a76:	4869      	ldr	r0, [pc, #420]	; (8005c1c <Wifi_Service+0x224>)
 8005a78:	f7fd fbee 	bl	8003258 <HAL_UART_Receive_IT>
		wifiFlag.list = 1;
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	4b6c      	ldr	r3, [pc, #432]	; (8005c30 <Wifi_Service+0x238>)
 8005a80:	705a      	strb	r2, [r3, #1]
}
 8005a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	HAL_UART_Transmit(&huart2, data, size, timeout);
 8005a84:	2305      	movs	r3, #5
 8005a86:	220a      	movs	r2, #10
 8005a88:	496a      	ldr	r1, [pc, #424]	; (8005c34 <Wifi_Service+0x23c>)
 8005a8a:	4864      	ldr	r0, [pc, #400]	; (8005c1c <Wifi_Service+0x224>)
 8005a8c:	f7fd fb5c 	bl	8003148 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, (uint8_t *) dummy, 140);
 8005a90:	228c      	movs	r2, #140	; 0x8c
 8005a92:	4963      	ldr	r1, [pc, #396]	; (8005c20 <Wifi_Service+0x228>)
 8005a94:	4861      	ldr	r0, [pc, #388]	; (8005c1c <Wifi_Service+0x224>)
 8005a96:	f7fd fbdf 	bl	8003258 <HAL_UART_Receive_IT>
		wifiFlag.print = 0;
 8005a9a:	2200      	movs	r2, #0
		WifiState = CPMUX;
 8005a9c:	2109      	movs	r1, #9
		wifiFlag.print = 0;
 8005a9e:	4b64      	ldr	r3, [pc, #400]	; (8005c30 <Wifi_Service+0x238>)
		WifiState = CPMUX;
 8005aa0:	7021      	strb	r1, [r4, #0]
		wifiFlag.print = 0;
 8005aa2:	70da      	strb	r2, [r3, #3]
}
 8005aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	HAL_UART_Transmit(&huart2, data, size, timeout);
 8005aa6:	2305      	movs	r3, #5
 8005aa8:	220b      	movs	r2, #11
 8005aaa:	4963      	ldr	r1, [pc, #396]	; (8005c38 <Wifi_Service+0x240>)
 8005aac:	485b      	ldr	r0, [pc, #364]	; (8005c1c <Wifi_Service+0x224>)
 8005aae:	f7fd fb4b 	bl	8003148 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, (uint8_t *) dummy, 140);
 8005ab2:	228c      	movs	r2, #140	; 0x8c
 8005ab4:	495a      	ldr	r1, [pc, #360]	; (8005c20 <Wifi_Service+0x228>)
 8005ab6:	4859      	ldr	r0, [pc, #356]	; (8005c1c <Wifi_Service+0x224>)
 8005ab8:	f7fd fbce 	bl	8003258 <HAL_UART_Receive_IT>
		WifiState = ListAP;
 8005abc:	2303      	movs	r3, #3
 8005abe:	7023      	strb	r3, [r4, #0]
}
 8005ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		strcat(temp,"\"");
 8005ac2:	2622      	movs	r6, #34	; 0x22
		strcpy(temp,"AT+CWJAP=");
 8005ac4:	4b5d      	ldr	r3, [pc, #372]	; (8005c3c <Wifi_Service+0x244>)
 8005ac6:	4d5e      	ldr	r5, [pc, #376]	; (8005c40 <Wifi_Service+0x248>)
 8005ac8:	cb03      	ldmia	r3!, {r0, r1}
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	6028      	str	r0, [r5, #0]
 8005ace:	6069      	str	r1, [r5, #4]
 8005ad0:	722b      	strb	r3, [r5, #8]
		strcat(temp,ssid);
 8005ad2:	495c      	ldr	r1, [pc, #368]	; (8005c44 <Wifi_Service+0x24c>)
		strcat(temp,"\"");
 8005ad4:	726e      	strb	r6, [r5, #9]
		strcat(temp,ssid);
 8005ad6:	f105 000a 	add.w	r0, r5, #10
 8005ada:	f001 fb4f 	bl	800717c <stpcpy>
 8005ade:	4603      	mov	r3, r0
		strcat(temp,"\",\"");
 8005ae0:	4a59      	ldr	r2, [pc, #356]	; (8005c48 <Wifi_Service+0x250>)
		strcat(temp,passwrd);
 8005ae2:	495a      	ldr	r1, [pc, #360]	; (8005c4c <Wifi_Service+0x254>)
		strcat(temp,"\",\"");
 8005ae4:	6810      	ldr	r0, [r2, #0]
 8005ae6:	6018      	str	r0, [r3, #0]
		strcat(temp,passwrd);
 8005ae8:	1cd8      	adds	r0, r3, #3
 8005aea:	f001 fb47 	bl	800717c <stpcpy>
		strcat(temp,"\r\n");
 8005aee:	4958      	ldr	r1, [pc, #352]	; (8005c50 <Wifi_Service+0x258>)
		strcat(temp,"\"");
 8005af0:	1b42      	subs	r2, r0, r5
		strcat(temp,"\r\n");
 8005af2:	1c53      	adds	r3, r2, #1
		strcat(temp,"\"");
 8005af4:	7006      	strb	r6, [r0, #0]
		strcat(temp,"\r\n");
 8005af6:	788f      	ldrb	r7, [r1, #2]
 8005af8:	8808      	ldrh	r0, [r1, #0]
 8005afa:	195e      	adds	r6, r3, r5
	size = strlen(data);
 8005afc:	3203      	adds	r2, #3
		strcat(temp,"\r\n");
 8005afe:	5358      	strh	r0, [r3, r5]
	HAL_UART_Transmit(&huart2, data, size, timeout);
 8005b00:	4629      	mov	r1, r5
 8005b02:	2305      	movs	r3, #5
 8005b04:	4845      	ldr	r0, [pc, #276]	; (8005c1c <Wifi_Service+0x224>)
 8005b06:	b292      	uxth	r2, r2
		strcat(temp,"\r\n");
 8005b08:	70b7      	strb	r7, [r6, #2]
	HAL_UART_Transmit(&huart2, data, size, timeout);
 8005b0a:	e790      	b.n	8005a2e <Wifi_Service+0x36>
 8005b0c:	2305      	movs	r3, #5
 8005b0e:	2204      	movs	r2, #4
 8005b10:	4945      	ldr	r1, [pc, #276]	; (8005c28 <Wifi_Service+0x230>)
 8005b12:	e78b      	b.n	8005a2c <Wifi_Service+0x34>
 8005b14:	2305      	movs	r3, #5
 8005b16:	220e      	movs	r2, #14
 8005b18:	494e      	ldr	r1, [pc, #312]	; (8005c54 <Wifi_Service+0x25c>)
 8005b1a:	4840      	ldr	r0, [pc, #256]	; (8005c1c <Wifi_Service+0x224>)
 8005b1c:	f7fd fb14 	bl	8003148 <HAL_UART_Transmit>
}
 8005b20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_UART_Receive_IT(&huart2, (uint8_t *) dummy, 140);
 8005b24:	228c      	movs	r2, #140	; 0x8c
 8005b26:	493e      	ldr	r1, [pc, #248]	; (8005c20 <Wifi_Service+0x228>)
 8005b28:	483c      	ldr	r0, [pc, #240]	; (8005c1c <Wifi_Service+0x224>)
 8005b2a:	f7fd bb95 	b.w	8003258 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, data, size, timeout);
 8005b2e:	2305      	movs	r3, #5
 8005b30:	220d      	movs	r2, #13
 8005b32:	4949      	ldr	r1, [pc, #292]	; (8005c58 <Wifi_Service+0x260>)
 8005b34:	4839      	ldr	r0, [pc, #228]	; (8005c1c <Wifi_Service+0x224>)
 8005b36:	f7fd fb07 	bl	8003148 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, (uint8_t *) dummy, 140);
 8005b3a:	228c      	movs	r2, #140	; 0x8c
 8005b3c:	4938      	ldr	r1, [pc, #224]	; (8005c20 <Wifi_Service+0x228>)
 8005b3e:	4837      	ldr	r0, [pc, #220]	; (8005c1c <Wifi_Service+0x224>)
 8005b40:	f7fd fb8a 	bl	8003258 <HAL_UART_Receive_IT>
		WifiState = ServerOn;
 8005b44:	230a      	movs	r3, #10
 8005b46:	7023      	strb	r3, [r4, #0]
}
 8005b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	HAL_UART_Transmit(&huart2, data, size, timeout);
 8005b4a:	2305      	movs	r3, #5
 8005b4c:	2215      	movs	r2, #21
 8005b4e:	4943      	ldr	r1, [pc, #268]	; (8005c5c <Wifi_Service+0x264>)
 8005b50:	e76c      	b.n	8005a2c <Wifi_Service+0x34>
 8005b52:	2305      	movs	r3, #5
 8005b54:	2210      	movs	r2, #16
 8005b56:	4942      	ldr	r1, [pc, #264]	; (8005c60 <Wifi_Service+0x268>)
 8005b58:	e768      	b.n	8005a2c <Wifi_Service+0x34>
 8005b5a:	2305      	movs	r3, #5
 8005b5c:	222b      	movs	r2, #43	; 0x2b
 8005b5e:	4941      	ldr	r1, [pc, #260]	; (8005c64 <Wifi_Service+0x26c>)
 8005b60:	e764      	b.n	8005a2c <Wifi_Service+0x34>
		len = strlen(HTML1);
 8005b62:	4841      	ldr	r0, [pc, #260]	; (8005c68 <Wifi_Service+0x270>)
 8005b64:	f7fa fb64 	bl	8000230 <strlen>
		myLongStr(len , temp,10, 10);
 8005b68:	230a      	movs	r3, #10
 8005b6a:	4d35      	ldr	r5, [pc, #212]	; (8005c40 <Wifi_Service+0x248>)
		len = strlen(HTML1);
 8005b6c:	4f3f      	ldr	r7, [pc, #252]	; (8005c6c <Wifi_Service+0x274>)
		myLongStr(len , temp,10, 10);
 8005b6e:	461a      	mov	r2, r3
 8005b70:	4629      	mov	r1, r5
		GSM_Send("\r\n");
 8005b72:	4e37      	ldr	r6, [pc, #220]	; (8005c50 <Wifi_Service+0x258>)
		len = strlen(HTML1);
 8005b74:	6038      	str	r0, [r7, #0]
		myLongStr(len , temp,10, 10);
 8005b76:	f000 fd7d 	bl	8006674 <myLongStr>
		GSM_Send("HTML length is to send ");
 8005b7a:	483d      	ldr	r0, [pc, #244]	; (8005c70 <Wifi_Service+0x278>)
 8005b7c:	f7ff fe78 	bl	8005870 <GSM_Send>
		GSM_Send(temp);
 8005b80:	4628      	mov	r0, r5
 8005b82:	f7ff fe75 	bl	8005870 <GSM_Send>
		GSM_Send("\r\n");
 8005b86:	4630      	mov	r0, r6
 8005b88:	f7ff fe72 	bl	8005870 <GSM_Send>
		strcpy((char*)temp,"AT+CIPSEND=");
 8005b8c:	4b39      	ldr	r3, [pc, #228]	; (8005c74 <Wifi_Service+0x27c>)
 8005b8e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005b90:	6028      	str	r0, [r5, #0]
 8005b92:	6069      	str	r1, [r5, #4]
 8005b94:	60aa      	str	r2, [r5, #8]
		strcat((char*)temp,ConnID);
 8005b96:	4938      	ldr	r1, [pc, #224]	; (8005c78 <Wifi_Service+0x280>)
 8005b98:	f105 000b 	add.w	r0, r5, #11
 8005b9c:	f001 faee 	bl	800717c <stpcpy>
		myLongStr(len,temp1,10,10);
 8005ba0:	230a      	movs	r3, #10
		strcat((char*)temp,",");
 8005ba2:	4936      	ldr	r1, [pc, #216]	; (8005c7c <Wifi_Service+0x284>)
		myLongStr(len,temp1,10,10);
 8005ba4:	461a      	mov	r2, r3
		strcat((char*)temp,",");
 8005ba6:	8809      	ldrh	r1, [r1, #0]
 8005ba8:	8001      	strh	r1, [r0, #0]
		myLongStr(len,temp1,10,10);
 8005baa:	6838      	ldr	r0, [r7, #0]
 8005bac:	4934      	ldr	r1, [pc, #208]	; (8005c80 <Wifi_Service+0x288>)
 8005bae:	f000 fd61 	bl	8006674 <myLongStr>
		strcat((char*)temp,temp1);
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	f7fa fb3c 	bl	8000230 <strlen>
 8005bb8:	4931      	ldr	r1, [pc, #196]	; (8005c80 <Wifi_Service+0x288>)
 8005bba:	4428      	add	r0, r5
 8005bbc:	f001 fade 	bl	800717c <stpcpy>
		strcat((char*)temp,"\r\n");
 8005bc0:	8831      	ldrh	r1, [r6, #0]
 8005bc2:	78b3      	ldrb	r3, [r6, #2]
 8005bc4:	1b42      	subs	r2, r0, r5
	size = strlen(data);
 8005bc6:	3202      	adds	r2, #2
		strcat((char*)temp,"\r\n");
 8005bc8:	8001      	strh	r1, [r0, #0]
 8005bca:	7083      	strb	r3, [r0, #2]
	HAL_UART_Transmit(&huart2, data, size, timeout);
 8005bcc:	4629      	mov	r1, r5
 8005bce:	2305      	movs	r3, #5
 8005bd0:	b292      	uxth	r2, r2
 8005bd2:	e72b      	b.n	8005a2c <Wifi_Service+0x34>
		strcpy((char*)temp1,HTML1);
 8005bd4:	4d2a      	ldr	r5, [pc, #168]	; (8005c80 <Wifi_Service+0x288>)
		GSM_Send("Send data\r\n");
 8005bd6:	482b      	ldr	r0, [pc, #172]	; (8005c84 <Wifi_Service+0x28c>)
 8005bd8:	f7ff fe4a 	bl	8005870 <GSM_Send>
		strcpy((char*)temp1,HTML1);
 8005bdc:	4922      	ldr	r1, [pc, #136]	; (8005c68 <Wifi_Service+0x270>)
 8005bde:	4628      	mov	r0, r5
 8005be0:	f001 facc 	bl	800717c <stpcpy>
		strcat((char*)temp1,"\r\n");
 8005be4:	4b1a      	ldr	r3, [pc, #104]	; (8005c50 <Wifi_Service+0x258>)
 8005be6:	1b42      	subs	r2, r0, r5
 8005be8:	8819      	ldrh	r1, [r3, #0]
 8005bea:	789b      	ldrb	r3, [r3, #2]
	size = strlen(data);
 8005bec:	3202      	adds	r2, #2
		strcat((char*)temp1,"\r\n");
 8005bee:	8001      	strh	r1, [r0, #0]
 8005bf0:	7083      	strb	r3, [r0, #2]
	HAL_UART_Transmit(&huart2, data, size, timeout);
 8005bf2:	4629      	mov	r1, r5
 8005bf4:	2305      	movs	r3, #5
 8005bf6:	b292      	uxth	r2, r2
 8005bf8:	4808      	ldr	r0, [pc, #32]	; (8005c1c <Wifi_Service+0x224>)
 8005bfa:	f7fd faa5 	bl	8003148 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, (uint8_t *) dummy, 140);
 8005bfe:	228c      	movs	r2, #140	; 0x8c
 8005c00:	4907      	ldr	r1, [pc, #28]	; (8005c20 <Wifi_Service+0x228>)
 8005c02:	4806      	ldr	r0, [pc, #24]	; (8005c1c <Wifi_Service+0x224>)
 8005c04:	f7fd fb28 	bl	8003258 <HAL_UART_Receive_IT>
		GSM_Send("Send data done\r\n");
 8005c08:	481f      	ldr	r0, [pc, #124]	; (8005c88 <Wifi_Service+0x290>)
 8005c0a:	f7ff fe31 	bl	8005870 <GSM_Send>
		WifiState = 0;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	7023      	strb	r3, [r4, #0]
}
 8005c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c14:	20000010 	.word	0x20000010
 8005c18:	08007cac 	.word	0x08007cac
 8005c1c:	20002bb0 	.word	0x20002bb0
 8005c20:	20001f80 	.word	0x20001f80
 8005c24:	08007ba4 	.word	0x08007ba4
 8005c28:	08007bb0 	.word	0x08007bb0
 8005c2c:	08007bb8 	.word	0x08007bb8
 8005c30:	2000294c 	.word	0x2000294c
 8005c34:	08007bc4 	.word	0x08007bc4
 8005c38:	08007bd0 	.word	0x08007bd0
 8005c3c:	08007bdc 	.word	0x08007bdc
 8005c40:	20002540 	.word	0x20002540
 8005c44:	20000014 	.word	0x20000014
 8005c48:	08007be8 	.word	0x08007be8
 8005c4c:	20000034 	.word	0x20000034
 8005c50:	08007cb4 	.word	0x08007cb4
 8005c54:	08007bec 	.word	0x08007bec
 8005c58:	08007bfc 	.word	0x08007bfc
 8005c5c:	08007c0c 	.word	0x08007c0c
 8005c60:	08007c24 	.word	0x08007c24
 8005c64:	08007c38 	.word	0x08007c38
 8005c68:	20000054 	.word	0x20000054
 8005c6c:	20002950 	.word	0x20002950
 8005c70:	08007c64 	.word	0x08007c64
 8005c74:	08007c7c 	.word	0x08007c7c
 8005c78:	20002880 	.word	0x20002880
 8005c7c:	08007c88 	.word	0x08007c88
 8005c80:	200025c4 	.word	0x200025c4
 8005c84:	08007c8c 	.word	0x08007c8c
 8005c88:	08007c98 	.word	0x08007c98

08005c8c <WifiOK>:
		GSM_Send("SUCCESSFULLY SENT DATA\r\n");
		//wifiFlag.print = 1;	//SEND DONE
	}
}

void WifiOK(){
 8005c8c:	b570      	push	{r4, r5, r6, lr}
	//sprintf(temp, "%s,%i,%i,%i\r\n",WprocBuff, WrecBuffPointerWrite, WrecBuffPointerRead,wifiFlag.ip);
	//GSM_Send(temp);
	if(wifiFlag.list == 1){
 8005c8e:	4c1d      	ldr	r4, [pc, #116]	; (8005d04 <WifiOK+0x78>)
void WifiOK(){
 8005c90:	b082      	sub	sp, #8
	if(wifiFlag.list == 1){
 8005c92:	7863      	ldrb	r3, [r4, #1]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d104      	bne.n	8005ca2 <WifiOK+0x16>
		wifiFlag.list = 0;
 8005c98:	2100      	movs	r1, #0
		WifiState = GetIP;
 8005c9a:	2204      	movs	r2, #4
 8005c9c:	4b1a      	ldr	r3, [pc, #104]	; (8005d08 <WifiOK+0x7c>)
		wifiFlag.list = 0;
 8005c9e:	7061      	strb	r1, [r4, #1]
		WifiState = GetIP;
 8005ca0:	701a      	strb	r2, [r3, #0]
	}
	if (wifiFlag.ip == 1){
 8005ca2:	78a3      	ldrb	r3, [r4, #2]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d005      	beq.n	8005cb4 <WifiOK+0x28>
		GSM_Send(IP3);
		GSM_Send("\r\n");
		GSM_Send(IP4);
		GSM_Send("\r\n");*/
	}
	GSM_Send("Got OK\r\n");
 8005ca8:	4818      	ldr	r0, [pc, #96]	; (8005d0c <WifiOK+0x80>)
}
 8005caa:	b002      	add	sp, #8
 8005cac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	GSM_Send("Got OK\r\n");
 8005cb0:	f7ff bdde 	b.w	8005870 <GSM_Send>
		wifiFlag.ip = 0;
 8005cb4:	2600      	movs	r6, #0
		GSM_Send(IP1);
 8005cb6:	4816      	ldr	r0, [pc, #88]	; (8005d10 <WifiOK+0x84>)
		myStrSection(IP1, temp,30,'.',0);
 8005cb8:	4d16      	ldr	r5, [pc, #88]	; (8005d14 <WifiOK+0x88>)
		wifiFlag.ip = 0;
 8005cba:	70a6      	strb	r6, [r4, #2]
		GSM_Send(IP1);
 8005cbc:	f7ff fdd8 	bl	8005870 <GSM_Send>
		GSM_Send("\r\n");
 8005cc0:	4815      	ldr	r0, [pc, #84]	; (8005d18 <WifiOK+0x8c>)
 8005cc2:	f7ff fdd5 	bl	8005870 <GSM_Send>
		myStrSection(IP1, temp,30,'.',0);
 8005cc6:	232e      	movs	r3, #46	; 0x2e
 8005cc8:	4629      	mov	r1, r5
 8005cca:	221e      	movs	r2, #30
 8005ccc:	4810      	ldr	r0, [pc, #64]	; (8005d10 <WifiOK+0x84>)
 8005cce:	9600      	str	r6, [sp, #0]
 8005cd0:	f000 fc9e 	bl	8006610 <myStrSection>
		if (strncmp(temp,"0",1) != 0){
 8005cd4:	782b      	ldrb	r3, [r5, #0]
 8005cd6:	2b30      	cmp	r3, #48	; 0x30
 8005cd8:	d00d      	beq.n	8005cf6 <WifiOK+0x6a>
			wifiFlag.ip = 2;
 8005cda:	2102      	movs	r1, #2
			WifiState = CPMUX;
 8005cdc:	2209      	movs	r2, #9
 8005cde:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <WifiOK+0x7c>)
			GSM_Send("IP found\r\n");
 8005ce0:	480e      	ldr	r0, [pc, #56]	; (8005d1c <WifiOK+0x90>)
			wifiFlag.ip = 2;
 8005ce2:	70a1      	strb	r1, [r4, #2]
			WifiState = CPMUX;
 8005ce4:	701a      	strb	r2, [r3, #0]
			GSM_Send("IP found\r\n");
 8005ce6:	f7ff fdc3 	bl	8005870 <GSM_Send>
	GSM_Send("Got OK\r\n");
 8005cea:	4808      	ldr	r0, [pc, #32]	; (8005d0c <WifiOK+0x80>)
}
 8005cec:	b002      	add	sp, #8
 8005cee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	GSM_Send("Got OK\r\n");
 8005cf2:	f7ff bdbd 	b.w	8005870 <GSM_Send>
			GSM_Send("IP not found\r\n");
 8005cf6:	480a      	ldr	r0, [pc, #40]	; (8005d20 <WifiOK+0x94>)
 8005cf8:	f7ff fdba 	bl	8005870 <GSM_Send>
			WifiState = Connect;
 8005cfc:	2206      	movs	r2, #6
 8005cfe:	4b02      	ldr	r3, [pc, #8]	; (8005d08 <WifiOK+0x7c>)
 8005d00:	701a      	strb	r2, [r3, #0]
 8005d02:	e7d1      	b.n	8005ca8 <WifiOK+0x1c>
 8005d04:	2000294c 	.word	0x2000294c
 8005d08:	20000010 	.word	0x20000010
 8005d0c:	08007cd4 	.word	0x08007cd4
 8005d10:	20001fc8 	.word	0x20001fc8
 8005d14:	20002540 	.word	0x20002540
 8005d18:	08007cb4 	.word	0x08007cb4
 8005d1c:	08007cb8 	.word	0x08007cb8
 8005d20:	08007cc4 	.word	0x08007cc4

08005d24 <WifiprocData>:
	myStrSection(WprocBuff, temp1,30,',',1);
 8005d24:	2201      	movs	r2, #1
void WifiprocData(){
 8005d26:	b570      	push	{r4, r5, r6, lr}
 8005d28:	b082      	sub	sp, #8
	myStrSection(WprocBuff, temp1,30,',',1);
 8005d2a:	4965      	ldr	r1, [pc, #404]	; (8005ec0 <WifiprocData+0x19c>)
 8005d2c:	9200      	str	r2, [sp, #0]
 8005d2e:	232c      	movs	r3, #44	; 0x2c
 8005d30:	221e      	movs	r2, #30
 8005d32:	4864      	ldr	r0, [pc, #400]	; (8005ec4 <WifiprocData+0x1a0>)
 8005d34:	f000 fc6c 	bl	8006610 <myStrSection>
	if(strncmp((char*)temp1,"CONNECT",7)==0){
 8005d38:	2207      	movs	r2, #7
 8005d3a:	4963      	ldr	r1, [pc, #396]	; (8005ec8 <WifiprocData+0x1a4>)
 8005d3c:	4860      	ldr	r0, [pc, #384]	; (8005ec0 <WifiprocData+0x19c>)
 8005d3e:	f001 fa35 	bl	80071ac <strncmp>
 8005d42:	2800      	cmp	r0, #0
 8005d44:	f000 8091 	beq.w	8005e6a <WifiprocData+0x146>
	if(strncmp((char*)WprocBuff,"+CREG: 0,1",10)==0)HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8005d48:	220a      	movs	r2, #10
 8005d4a:	4960      	ldr	r1, [pc, #384]	; (8005ecc <WifiprocData+0x1a8>)
 8005d4c:	485d      	ldr	r0, [pc, #372]	; (8005ec4 <WifiprocData+0x1a0>)
 8005d4e:	f001 fa2d 	bl	80071ac <strncmp>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	f000 809f 	beq.w	8005e96 <WifiprocData+0x172>
	if(strncmp((char*)WprocBuff,"OK",2)==0) WifiOK();
 8005d58:	4c5a      	ldr	r4, [pc, #360]	; (8005ec4 <WifiprocData+0x1a0>)
 8005d5a:	7823      	ldrb	r3, [r4, #0]
 8005d5c:	2b4f      	cmp	r3, #79	; 0x4f
 8005d5e:	d042      	beq.n	8005de6 <WifiprocData+0xc2>
	if(strncmp((char*)WprocBuff,"Ai",2)==0) WifiState = Wifi_version;
 8005d60:	7823      	ldrb	r3, [r4, #0]
 8005d62:	2b41      	cmp	r3, #65	; 0x41
 8005d64:	d047      	beq.n	8005df6 <WifiprocData+0xd2>
	if(strncmp((char*)WprocBuff,"No AP",5)==0) WifiState = Connect;
 8005d66:	2205      	movs	r2, #5
 8005d68:	4959      	ldr	r1, [pc, #356]	; (8005ed0 <WifiprocData+0x1ac>)
 8005d6a:	4856      	ldr	r0, [pc, #344]	; (8005ec4 <WifiprocData+0x1a0>)
 8005d6c:	f001 fa1e 	bl	80071ac <strncmp>
 8005d70:	b910      	cbnz	r0, 8005d78 <WifiprocData+0x54>
 8005d72:	2206      	movs	r2, #6
 8005d74:	4b57      	ldr	r3, [pc, #348]	; (8005ed4 <WifiprocData+0x1b0>)
 8005d76:	701a      	strb	r2, [r3, #0]
	if(strncmp((char*)WprocBuff,"WIFI CONNECTED",14)==0) WifiState = Connect;	//connected to AP
 8005d78:	220e      	movs	r2, #14
 8005d7a:	4957      	ldr	r1, [pc, #348]	; (8005ed8 <WifiprocData+0x1b4>)
 8005d7c:	4851      	ldr	r0, [pc, #324]	; (8005ec4 <WifiprocData+0x1a0>)
 8005d7e:	f001 fa15 	bl	80071ac <strncmp>
 8005d82:	b910      	cbnz	r0, 8005d8a <WifiprocData+0x66>
 8005d84:	2206      	movs	r2, #6
 8005d86:	4b53      	ldr	r3, [pc, #332]	; (8005ed4 <WifiprocData+0x1b0>)
 8005d88:	701a      	strb	r2, [r3, #0]
	if(strncmp((char*)WprocBuff,"WIFI GOT IP",10)==0) WifiState = GetIP;		//connected to AP
 8005d8a:	220a      	movs	r2, #10
 8005d8c:	4953      	ldr	r1, [pc, #332]	; (8005edc <WifiprocData+0x1b8>)
 8005d8e:	484d      	ldr	r0, [pc, #308]	; (8005ec4 <WifiprocData+0x1a0>)
 8005d90:	f001 fa0c 	bl	80071ac <strncmp>
 8005d94:	b910      	cbnz	r0, 8005d9c <WifiprocData+0x78>
 8005d96:	2204      	movs	r2, #4
 8005d98:	4b4e      	ldr	r3, [pc, #312]	; (8005ed4 <WifiprocData+0x1b0>)
 8005d9a:	701a      	strb	r2, [r3, #0]
	if(strncmp((char*)WprocBuff,"no change",9)==0) WifiState = 0;		//server running
 8005d9c:	2209      	movs	r2, #9
 8005d9e:	4950      	ldr	r1, [pc, #320]	; (8005ee0 <WifiprocData+0x1bc>)
 8005da0:	4848      	ldr	r0, [pc, #288]	; (8005ec4 <WifiprocData+0x1a0>)
 8005da2:	f001 fa03 	bl	80071ac <strncmp>
 8005da6:	b908      	cbnz	r0, 8005dac <WifiprocData+0x88>
 8005da8:	4b4a      	ldr	r3, [pc, #296]	; (8005ed4 <WifiprocData+0x1b0>)
 8005daa:	7018      	strb	r0, [r3, #0]
	if(strncmp((char*)WprocBuff,"+CWJAP:",7)==0){
 8005dac:	2207      	movs	r2, #7
 8005dae:	494d      	ldr	r1, [pc, #308]	; (8005ee4 <WifiprocData+0x1c0>)
 8005db0:	4844      	ldr	r0, [pc, #272]	; (8005ec4 <WifiprocData+0x1a0>)
 8005db2:	f001 f9fb 	bl	80071ac <strncmp>
 8005db6:	2800      	cmp	r0, #0
 8005db8:	d044      	beq.n	8005e44 <WifiprocData+0x120>
	if(strncmp((char*)WprocBuff,"+CIFSR:STAIP",12)==0){
 8005dba:	220c      	movs	r2, #12
 8005dbc:	494a      	ldr	r1, [pc, #296]	; (8005ee8 <WifiprocData+0x1c4>)
 8005dbe:	4841      	ldr	r0, [pc, #260]	; (8005ec4 <WifiprocData+0x1a0>)
 8005dc0:	f001 f9f4 	bl	80071ac <strncmp>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	d06f      	beq.n	8005ea8 <WifiprocData+0x184>
 8005dc8:	4d48      	ldr	r5, [pc, #288]	; (8005eec <WifiprocData+0x1c8>)
	if(strncmp((char*)WprocBuff,"+IPD",3)==0){
 8005dca:	7823      	ldrb	r3, [r4, #0]
 8005dcc:	2b2b      	cmp	r3, #43	; 0x2b
 8005dce:	d019      	beq.n	8005e04 <WifiprocData+0xe0>
	wifiFlag.print = 1;
 8005dd0:	2301      	movs	r3, #1
	if(strncmp((char*)WprocBuff,"SEND OK",7)==0){
 8005dd2:	2207      	movs	r2, #7
 8005dd4:	4946      	ldr	r1, [pc, #280]	; (8005ef0 <WifiprocData+0x1cc>)
 8005dd6:	483b      	ldr	r0, [pc, #236]	; (8005ec4 <WifiprocData+0x1a0>)
	wifiFlag.print = 1;
 8005dd8:	70eb      	strb	r3, [r5, #3]
	if(strncmp((char*)WprocBuff,"SEND OK",7)==0){
 8005dda:	f001 f9e7 	bl	80071ac <strncmp>
 8005dde:	2800      	cmp	r0, #0
 8005de0:	d053      	beq.n	8005e8a <WifiprocData+0x166>
}
 8005de2:	b002      	add	sp, #8
 8005de4:	bd70      	pop	{r4, r5, r6, pc}
	if(strncmp((char*)WprocBuff,"OK",2)==0) WifiOK();
 8005de6:	7863      	ldrb	r3, [r4, #1]
 8005de8:	2b4b      	cmp	r3, #75	; 0x4b
 8005dea:	d1b9      	bne.n	8005d60 <WifiprocData+0x3c>
 8005dec:	f7ff ff4e 	bl	8005c8c <WifiOK>
	if(strncmp((char*)WprocBuff,"Ai",2)==0) WifiState = Wifi_version;
 8005df0:	7823      	ldrb	r3, [r4, #0]
 8005df2:	2b41      	cmp	r3, #65	; 0x41
 8005df4:	d1b7      	bne.n	8005d66 <WifiprocData+0x42>
 8005df6:	7863      	ldrb	r3, [r4, #1]
 8005df8:	2b69      	cmp	r3, #105	; 0x69
 8005dfa:	d1b4      	bne.n	8005d66 <WifiprocData+0x42>
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	4b35      	ldr	r3, [pc, #212]	; (8005ed4 <WifiprocData+0x1b0>)
 8005e00:	701a      	strb	r2, [r3, #0]
 8005e02:	e7b0      	b.n	8005d66 <WifiprocData+0x42>
	if(strncmp((char*)WprocBuff,"+IPD",3)==0){
 8005e04:	7863      	ldrb	r3, [r4, #1]
 8005e06:	2b49      	cmp	r3, #73	; 0x49
 8005e08:	d1e2      	bne.n	8005dd0 <WifiprocData+0xac>
 8005e0a:	4c3a      	ldr	r4, [pc, #232]	; (8005ef4 <WifiprocData+0x1d0>)
 8005e0c:	7823      	ldrb	r3, [r4, #0]
 8005e0e:	2b50      	cmp	r3, #80	; 0x50
 8005e10:	d1de      	bne.n	8005dd0 <WifiprocData+0xac>
		myStrSection(WprocBuff, temp1,30,':',1);
 8005e12:	2601      	movs	r6, #1
		GSM_Send("Got IPD\r\n");
 8005e14:	4838      	ldr	r0, [pc, #224]	; (8005ef8 <WifiprocData+0x1d4>)
 8005e16:	f7ff fd2b 	bl	8005870 <GSM_Send>
		myStrSection(WprocBuff, temp1,30,':',1);
 8005e1a:	233a      	movs	r3, #58	; 0x3a
 8005e1c:	221e      	movs	r2, #30
 8005e1e:	4928      	ldr	r1, [pc, #160]	; (8005ec0 <WifiprocData+0x19c>)
 8005e20:	9600      	str	r6, [sp, #0]
 8005e22:	1ea0      	subs	r0, r4, #2
 8005e24:	f000 fbf4 	bl	8006610 <myStrSection>
		myStrSection(WprocBuff, ConnID,30,',',1);
 8005e28:	232c      	movs	r3, #44	; 0x2c
 8005e2a:	221e      	movs	r2, #30
 8005e2c:	4933      	ldr	r1, [pc, #204]	; (8005efc <WifiprocData+0x1d8>)
 8005e2e:	9600      	str	r6, [sp, #0]
 8005e30:	1ea0      	subs	r0, r4, #2
 8005e32:	f000 fbed 	bl	8006610 <myStrSection>
		WifiState = IP_Send;
 8005e36:	220d      	movs	r2, #13
 8005e38:	4b26      	ldr	r3, [pc, #152]	; (8005ed4 <WifiprocData+0x1b0>)
		GSM_Send("Processed IPD\r\n");
 8005e3a:	4831      	ldr	r0, [pc, #196]	; (8005f00 <WifiprocData+0x1dc>)
		WifiState = IP_Send;
 8005e3c:	701a      	strb	r2, [r3, #0]
		GSM_Send("Processed IPD\r\n");
 8005e3e:	f7ff fd17 	bl	8005870 <GSM_Send>
		wifiFlag.print = 0;
 8005e42:	e7c5      	b.n	8005dd0 <WifiprocData+0xac>
		myStrSection(WprocBuff, temp,30,'"',1);
 8005e44:	2301      	movs	r3, #1
		if(strncmp(temp,ssid,5)==0) WifiState = GetIP;
 8005e46:	4d23      	ldr	r5, [pc, #140]	; (8005ed4 <WifiprocData+0x1b0>)
		myStrSection(WprocBuff, temp,30,'"',1);
 8005e48:	221e      	movs	r2, #30
 8005e4a:	492e      	ldr	r1, [pc, #184]	; (8005f04 <WifiprocData+0x1e0>)
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	481d      	ldr	r0, [pc, #116]	; (8005ec4 <WifiprocData+0x1a0>)
 8005e50:	2322      	movs	r3, #34	; 0x22
 8005e52:	f000 fbdd 	bl	8006610 <myStrSection>
		if(strncmp(temp,ssid,5)==0) WifiState = GetIP;
 8005e56:	2205      	movs	r2, #5
 8005e58:	482a      	ldr	r0, [pc, #168]	; (8005f04 <WifiprocData+0x1e0>)
 8005e5a:	1d29      	adds	r1, r5, #4
 8005e5c:	f001 f9a6 	bl	80071ac <strncmp>
 8005e60:	2800      	cmp	r0, #0
 8005e62:	d1aa      	bne.n	8005dba <WifiprocData+0x96>
 8005e64:	2304      	movs	r3, #4
 8005e66:	702b      	strb	r3, [r5, #0]
 8005e68:	e7a7      	b.n	8005dba <WifiprocData+0x96>
		myStrSection(WprocBuff, ConnID,30,',',0);
 8005e6a:	232c      	movs	r3, #44	; 0x2c
 8005e6c:	9000      	str	r0, [sp, #0]
 8005e6e:	221e      	movs	r2, #30
 8005e70:	4922      	ldr	r1, [pc, #136]	; (8005efc <WifiprocData+0x1d8>)
 8005e72:	4814      	ldr	r0, [pc, #80]	; (8005ec4 <WifiprocData+0x1a0>)
 8005e74:	f000 fbcc 	bl	8006610 <myStrSection>
		sprintf(temp, "Conn %s connected\r\n",ConnID);
 8005e78:	4a20      	ldr	r2, [pc, #128]	; (8005efc <WifiprocData+0x1d8>)
 8005e7a:	4923      	ldr	r1, [pc, #140]	; (8005f08 <WifiprocData+0x1e4>)
 8005e7c:	4821      	ldr	r0, [pc, #132]	; (8005f04 <WifiprocData+0x1e0>)
 8005e7e:	f001 f95d 	bl	800713c <siprintf>
		GSM_Send(temp);
 8005e82:	4820      	ldr	r0, [pc, #128]	; (8005f04 <WifiprocData+0x1e0>)
 8005e84:	f7ff fcf4 	bl	8005870 <GSM_Send>
 8005e88:	e75e      	b.n	8005d48 <WifiprocData+0x24>
		GSM_Send("SUCCESSFULLY SENT DATA\r\n");
 8005e8a:	4820      	ldr	r0, [pc, #128]	; (8005f0c <WifiprocData+0x1e8>)
}
 8005e8c:	b002      	add	sp, #8
 8005e8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		GSM_Send("SUCCESSFULLY SENT DATA\r\n");
 8005e92:	f7ff bced 	b.w	8005870 <GSM_Send>
	if(strncmp((char*)WprocBuff,"+CREG: 0,1",10)==0)HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8005e96:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8005e9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e9e:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8005ea2:	f7fb fe3f 	bl	8001b24 <HAL_GPIO_TogglePin>
 8005ea6:	e757      	b.n	8005d58 <WifiprocData+0x34>
		myStrSection(WprocBuff, IP1,30,'"',1);
 8005ea8:	2601      	movs	r6, #1
		wifiFlag.print = 1;
 8005eaa:	4d10      	ldr	r5, [pc, #64]	; (8005eec <WifiprocData+0x1c8>)
		myStrSection(WprocBuff, IP1,30,'"',1);
 8005eac:	2322      	movs	r3, #34	; 0x22
 8005eae:	221e      	movs	r2, #30
 8005eb0:	4917      	ldr	r1, [pc, #92]	; (8005f10 <WifiprocData+0x1ec>)
 8005eb2:	4804      	ldr	r0, [pc, #16]	; (8005ec4 <WifiprocData+0x1a0>)
 8005eb4:	9600      	str	r6, [sp, #0]
 8005eb6:	f000 fbab 	bl	8006610 <myStrSection>
		wifiFlag.print = 1;
 8005eba:	70ee      	strb	r6, [r5, #3]
		wifiFlag.ip = 1;
 8005ebc:	70ae      	strb	r6, [r5, #2]
 8005ebe:	e784      	b.n	8005dca <WifiprocData+0xa6>
 8005ec0:	200025c4 	.word	0x200025c4
 8005ec4:	20002884 	.word	0x20002884
 8005ec8:	08007ce0 	.word	0x08007ce0
 8005ecc:	08007cfc 	.word	0x08007cfc
 8005ed0:	08007d10 	.word	0x08007d10
 8005ed4:	20000010 	.word	0x20000010
 8005ed8:	08007d18 	.word	0x08007d18
 8005edc:	08007d28 	.word	0x08007d28
 8005ee0:	08007d34 	.word	0x08007d34
 8005ee4:	08007d40 	.word	0x08007d40
 8005ee8:	08007d48 	.word	0x08007d48
 8005eec:	2000294c 	.word	0x2000294c
 8005ef0:	08007d7c 	.word	0x08007d7c
 8005ef4:	20002886 	.word	0x20002886
 8005ef8:	08007d60 	.word	0x08007d60
 8005efc:	20002880 	.word	0x20002880
 8005f00:	08007d6c 	.word	0x08007d6c
 8005f04:	20002540 	.word	0x20002540
 8005f08:	08007ce8 	.word	0x08007ce8
 8005f0c:	08007d84 	.word	0x08007d84
 8005f10:	20001fc8 	.word	0x20001fc8

08005f14 <WifirecData>:
void WifirecData(){
 8005f14:	b538      	push	{r3, r4, r5, lr}
		if (WrecBuffPointerWrite != WrecBuffPointerRead){
 8005f16:	4c1a      	ldr	r4, [pc, #104]	; (8005f80 <WifirecData+0x6c>)
	HAL_GPIO_TogglePin(LED2B0_GPIO_Port, LED2B0_Pin);
 8005f18:	2101      	movs	r1, #1
 8005f1a:	481a      	ldr	r0, [pc, #104]	; (8005f84 <WifirecData+0x70>)
 8005f1c:	f7fb fe02 	bl	8001b24 <HAL_GPIO_TogglePin>
		if (WrecBuffPointerWrite != WrecBuffPointerRead){
 8005f20:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d01d      	beq.n	8005f64 <WifirecData+0x50>
			if (WrecBuffPointerRead > WrecBuffSize) WrecBuffPointerRead = 0;
 8005f28:	f240 5014 	movw	r0, #1300	; 0x514
			WprocBuff[WprocBuffpointer] = WrecBuff[WrecBuffPointerRead];
 8005f2c:	4a16      	ldr	r2, [pc, #88]	; (8005f88 <WifirecData+0x74>)
 8005f2e:	68a1      	ldr	r1, [r4, #8]
 8005f30:	5cd2      	ldrb	r2, [r2, r3]
			WrecBuffPointerRead++;
 8005f32:	3301      	adds	r3, #1
			if (WrecBuffPointerRead > WrecBuffSize) WrecBuffPointerRead = 0;
 8005f34:	4283      	cmp	r3, r0
 8005f36:	bfc8      	it	gt
 8005f38:	2300      	movgt	r3, #0
 8005f3a:	6023      	str	r3, [r4, #0]
			WprocBuffpointer++;
 8005f3c:	1c4b      	adds	r3, r1, #1
			if (WprocBuffpointer > WprocBuffSize) WprocBuffpointer = 0;
 8005f3e:	2bc8      	cmp	r3, #200	; 0xc8
 8005f40:	bfc8      	it	gt
 8005f42:	2300      	movgt	r3, #0
			WprocBuff[WprocBuffpointer] = WrecBuff[WrecBuffPointerRead];
 8005f44:	4d11      	ldr	r5, [pc, #68]	; (8005f8c <WifirecData+0x78>)
			if (WprocBuffpointer > WprocBuffSize) WprocBuffpointer = 0;
 8005f46:	60a3      	str	r3, [r4, #8]
			WprocBuff[WprocBuffpointer] = WrecBuff[WrecBuffPointerRead];
 8005f48:	546a      	strb	r2, [r5, r1]
			if (WprocBuff[WprocBuffpointer - 1] == '>'){
 8005f4a:	bfc4      	itt	gt
 8005f4c:	f815 2c01 	ldrbgt.w	r2, [r5, #-1]
			if (WprocBuffpointer > WprocBuffSize) WprocBuffpointer = 0;
 8005f50:	f04f 31ff 	movgt.w	r1, #4294967295
			if (WprocBuff[WprocBuffpointer - 1] == '>'){
 8005f54:	2a3e      	cmp	r2, #62	; 0x3e
 8005f56:	d006      	beq.n	8005f66 <WifirecData+0x52>
			if (WprocBuff[WprocBuffpointer - 1] == 0x0A){
 8005f58:	2a0a      	cmp	r2, #10
 8005f5a:	d008      	beq.n	8005f6e <WifirecData+0x5a>
			if (WprocBuff[WprocBuffpointer - 1] == 0x0D){
 8005f5c:	2a0d      	cmp	r2, #13
				WprocBuff[WprocBuffpointer - 1] = 0;
 8005f5e:	bf04      	itt	eq
 8005f60:	2300      	moveq	r3, #0
 8005f62:	546b      	strbeq	r3, [r5, r1]
}
 8005f64:	bd38      	pop	{r3, r4, r5, pc}
				WifiState = IP_Data;
 8005f66:	220e      	movs	r2, #14
 8005f68:	4b09      	ldr	r3, [pc, #36]	; (8005f90 <WifirecData+0x7c>)
 8005f6a:	701a      	strb	r2, [r3, #0]
}
 8005f6c:	bd38      	pop	{r3, r4, r5, pc}
				WprocBuff[WprocBuffpointer - 1] = 0;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	546b      	strb	r3, [r5, r1]
				WprocBuffpointer = 0;
 8005f72:	60a3      	str	r3, [r4, #8]
				WifiprocData();
 8005f74:	f7ff fed6 	bl	8005d24 <WifiprocData>
 8005f78:	68a1      	ldr	r1, [r4, #8]
 8005f7a:	3901      	subs	r1, #1
 8005f7c:	5c6a      	ldrb	r2, [r5, r1]
 8005f7e:	e7ed      	b.n	8005f5c <WifirecData+0x48>
 8005f80:	200011a0 	.word	0x200011a0
 8005f84:	40010c00 	.word	0x40010c00
 8005f88:	2000202c 	.word	0x2000202c
 8005f8c:	20002884 	.word	0x20002884
 8005f90:	20000010 	.word	0x20000010

08005f94 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8005f94:	b430      	push	{r4, r5}
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8005f96:	2480      	movs	r4, #128	; 0x80
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8005f98:	4b03      	ldr	r3, [pc, #12]	; (8005fa8 <vApplicationGetIdleTaskMemory+0x14>)
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8005f9a:	f103 0554 	add.w	r5, r3, #84	; 0x54
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8005f9e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8005fa0:	600d      	str	r5, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8005fa2:	6014      	str	r4, [r2, #0]
  /* place for user code */
}
 8005fa4:	bc30      	pop	{r4, r5}
 8005fa6:	4770      	bx	lr
 8005fa8:	200011ac 	.word	0x200011ac

08005fac <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8005fac:	b430      	push	{r4, r5}
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8005fae:	f44f 7480 	mov.w	r4, #256	; 0x100
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8005fb2:	4b05      	ldr	r3, [pc, #20]	; (8005fc8 <vApplicationGetTimerTaskMemory+0x1c>)
 8005fb4:	f503 7515 	add.w	r5, r3, #596	; 0x254
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8005fb8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8005fbc:	6005      	str	r5, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8005fbe:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8005fc0:	6014      	str	r4, [r2, #0]
  /* place for user code */
}
 8005fc2:	bc30      	pop	{r4, r5}
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	200011ac 	.word	0x200011ac

08005fcc <Callback01>:
void Callback01(void const * argument)
{
  /* USER CODE BEGIN Callback01 */

  /* USER CODE END Callback01 */
}
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop

08005fd0 <StartDefaultTask>:
{
 8005fd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd4:	4f29      	ldr	r7, [pc, #164]	; (800607c <StartDefaultTask+0xac>)
		sprintf(gu8_MSG, "Freq = %lu Hz\n\r", gu32_Freq);
 8005fd6:	4b2a      	ldr	r3, [pc, #168]	; (8006080 <StartDefaultTask+0xb0>)
		myLongStr(timer,timerStr,10,10);
 8005fd8:	463e      	mov	r6, r7
 8005fda:	4c2a      	ldr	r4, [pc, #168]	; (8006084 <StartDefaultTask+0xb4>)
 8005fdc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800609c <StartDefaultTask+0xcc>
 8005fe0:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 80060a0 <StartDefaultTask+0xd0>
 8005fe4:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 80060a4 <StartDefaultTask+0xd4>
		sprintf(gu8_MSG, "Freq = %lu Hz\n\r", gu32_Freq);
 8005fe8:	f103 0804 	add.w	r8, r3, #4
    osDelay(1);
 8005fec:	2001      	movs	r0, #1
 8005fee:	f7fd fb2b 	bl	8003648 <osDelay>
    if (rTimer >= 1000){
 8005ff2:	8823      	ldrh	r3, [r4, #0]
 8005ff4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ff8:	d33d      	bcc.n	8006076 <StartDefaultTask+0xa6>
    	rTimer = 0;
 8005ffa:	2500      	movs	r5, #0
 8005ffc:	8025      	strh	r5, [r4, #0]
		ClearScreenF();
 8005ffe:	f7ff fc9b 	bl	8005938 <ClearScreenF>
		LineSelect(0x80);
 8006002:	2080      	movs	r0, #128	; 0x80
 8006004:	f7ff fcb0 	bl	8005968 <LineSelect>
		myLongStr(timer,timerStr,10,10);
 8006008:	230a      	movs	r3, #10
 800600a:	4631      	mov	r1, r6
 800600c:	461a      	mov	r2, r3
 800600e:	f8ba 0000 	ldrh.w	r0, [sl]
 8006012:	f000 fb2f 	bl	8006674 <myLongStr>
		strcat(timerStr," New");
 8006016:	4630      	mov	r0, r6
 8006018:	f7fa f90a 	bl	8000230 <strlen>
 800601c:	4603      	mov	r3, r0
 800601e:	f8d9 0000 	ldr.w	r0, [r9]
 8006022:	f899 2004 	ldrb.w	r2, [r9, #4]
 8006026:	50f8      	str	r0, [r7, r3]
 8006028:	443b      	add	r3, r7
 800602a:	711a      	strb	r2, [r3, #4]
		LCD_Print((char*)timerStr);
 800602c:	4630      	mov	r0, r6
 800602e:	f7ff fc67 	bl	8005900 <LCD_Print>
		LineSelect(0xC0);
 8006032:	20c0      	movs	r0, #192	; 0xc0
 8006034:	f7ff fc98 	bl	8005968 <LineSelect>
		sprintf(gu8_MSG, "Freq = %lu Hz\n\r", gu32_Freq);
 8006038:	4b11      	ldr	r3, [pc, #68]	; (8006080 <StartDefaultTask+0xb0>)
 800603a:	4913      	ldr	r1, [pc, #76]	; (8006088 <StartDefaultTask+0xb8>)
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	4640      	mov	r0, r8
 8006040:	f001 f87c 	bl	800713c <siprintf>
		LCD_Print((char*)gu8_MSG);
 8006044:	4640      	mov	r0, r8
 8006046:	f7ff fc5b 	bl	8005900 <LCD_Print>
		timerMult = 0;
 800604a:	4a10      	ldr	r2, [pc, #64]	; (800608c <StartDefaultTask+0xbc>)
		timr = htim1.Instance->CNT;
 800604c:	f8db 3000 	ldr.w	r3, [fp]
		touch1 = HAL_GPIO_ReadPin(TOUCH2_GPIO_Port, TOUCH2_Pin);
 8006050:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006054:	480e      	ldr	r0, [pc, #56]	; (8006090 <StartDefaultTask+0xc0>)
		timerMult = 0;
 8006056:	8015      	strh	r5, [r2, #0]
		timr = htim1.Instance->CNT;
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		timer = 0;
 800605a:	f8aa 5000 	strh.w	r5, [sl]
		touch1 = HAL_GPIO_ReadPin(TOUCH2_GPIO_Port, TOUCH2_Pin);
 800605e:	f7fb fd57 	bl	8001b10 <HAL_GPIO_ReadPin>
 8006062:	4b0c      	ldr	r3, [pc, #48]	; (8006094 <StartDefaultTask+0xc4>)
 8006064:	7018      	strb	r0, [r3, #0]
		Wifi_Service();
 8006066:	f7ff fcc7 	bl	80059f8 <Wifi_Service>
		ADC_Service();
 800606a:	f7ff fa75 	bl	8005558 <ADC_Service>
		GSM_Send("running\r\n");
 800606e:	480a      	ldr	r0, [pc, #40]	; (8006098 <StartDefaultTask+0xc8>)
 8006070:	f7ff fbfe 	bl	8005870 <GSM_Send>
 8006074:	8823      	ldrh	r3, [r4, #0]
    rTimer++;
 8006076:	3301      	adds	r3, #1
 8006078:	8023      	strh	r3, [r4, #0]
    osDelay(1);
 800607a:	e7b7      	b.n	8005fec <StartDefaultTask+0x1c>
 800607c:	20002b0c 	.word	0x20002b0c
 8006080:	20001854 	.word	0x20001854
 8006084:	20002b08 	.word	0x20002b08
 8006088:	08007db4 	.word	0x08007db4
 800608c:	20002bf4 	.word	0x20002bf4
 8006090:	40010c00 	.word	0x40010c00
 8006094:	20002bf6 	.word	0x20002bf6
 8006098:	08007dc4 	.word	0x08007dc4
 800609c:	20002958 	.word	0x20002958
 80060a0:	08007dac 	.word	0x08007dac
 80060a4:	20002b64 	.word	0x20002b64

080060a8 <HAL_TIM_IC_CaptureCallback>:
{
 80060a8:	b510      	push	{r4, lr}
	if(gu8_State == IDLE)
 80060aa:	4c19      	ldr	r4, [pc, #100]	; (8006110 <HAL_TIM_IC_CaptureCallback+0x68>)
 80060ac:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80060b0:	b94b      	cbnz	r3, 80060c6 <HAL_TIM_IC_CaptureCallback+0x1e>
 80060b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
		gu8_State = DONE;
 80060b6:	2301      	movs	r3, #1
		gu32_T1 = TIM3->CCR1;
 80060b8:	4916      	ldr	r1, [pc, #88]	; (8006114 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80060ba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80060bc:	62a1      	str	r1, [r4, #40]	; 0x28
		gu16_TIM2_OVC = 0;
 80060be:	85a2      	strh	r2, [r4, #44]	; 0x2c
		gu8_State = DONE;
 80060c0:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
}
 80060c4:	bd10      	pop	{r4, pc}
	else if(gu8_State == DONE)
 80060c6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d1fa      	bne.n	80060c4 <HAL_TIM_IC_CaptureCallback+0x1c>
		gu32_T2 = TIM3->CCR1;
 80060ce:	4b11      	ldr	r3, [pc, #68]	; (8006114 <HAL_TIM_IC_CaptureCallback+0x6c>)
		gu32_Freq = (uint32_t)(F_CLK/gu32_Ticks);
 80060d0:	4a11      	ldr	r2, [pc, #68]	; (8006118 <HAL_TIM_IC_CaptureCallback+0x70>)
		gu32_T2 = TIM3->CCR1;
 80060d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d4:	6323      	str	r3, [r4, #48]	; 0x30
		gu32_Ticks = (gu32_T2 + (gu16_TIM2_OVC * 65536)) - gu32_T1;
 80060d6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80060d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80060da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80060dc:	1a1b      	subs	r3, r3, r0
 80060de:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 80060e2:	6363      	str	r3, [r4, #52]	; 0x34
		gu32_Freq = (uint32_t)(F_CLK/gu32_Ticks);
 80060e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ea:	6023      	str	r3, [r4, #0]
		if(gu32_Freq != 0)
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	b91b      	cbnz	r3, 80060f8 <HAL_TIM_IC_CaptureCallback+0x50>
		gu8_State = IDLE;
 80060f0:	2300      	movs	r3, #0
 80060f2:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
}
 80060f6:	bd10      	pop	{r4, pc}
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80060f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060fc:	4807      	ldr	r0, [pc, #28]	; (800611c <HAL_TIM_IC_CaptureCallback+0x74>)
 80060fe:	f7fb fd11 	bl	8001b24 <HAL_GPIO_TogglePin>
			sprintf(gu8_MSG, "Freq = %lu Hz\n\r", gu32_Freq);
 8006102:	4620      	mov	r0, r4
 8006104:	4906      	ldr	r1, [pc, #24]	; (8006120 <HAL_TIM_IC_CaptureCallback+0x78>)
 8006106:	f850 2b04 	ldr.w	r2, [r0], #4
 800610a:	f001 f817 	bl	800713c <siprintf>
 800610e:	e7ef      	b.n	80060f0 <HAL_TIM_IC_CaptureCallback+0x48>
 8006110:	20001854 	.word	0x20001854
 8006114:	40000400 	.word	0x40000400
 8006118:	044aa200 	.word	0x044aa200
 800611c:	40011000 	.word	0x40011000
 8006120:	08007db4 	.word	0x08007db4

08006124 <SystemClock_Config>:
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006124:	2001      	movs	r0, #1
{
 8006126:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800612a:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800612c:	2601      	movs	r6, #1
 800612e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006132:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006134:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006138:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
{
 800613c:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800613e:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006140:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006142:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006146:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800614a:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800614e:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006152:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006156:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800615a:	e9cd 4113 	strd	r4, r1, [sp, #76]	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800615e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006160:	9300      	str	r3, [sp, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006162:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006164:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006166:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006168:	9215      	str	r2, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800616a:	f7fb ff81 	bl	8002070 <HAL_RCC_OscConfig>
 800616e:	b100      	cbz	r0, 8006172 <SystemClock_Config+0x4e>
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8006170:	e7fe      	b.n	8006170 <SystemClock_Config+0x4c>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006172:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006174:	f04f 080f 	mov.w	r8, #15
 8006178:	f04f 0902 	mov.w	r9, #2
 800617c:	2600      	movs	r6, #0
 800617e:	f44f 6780 	mov.w	r7, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006182:	4668      	mov	r0, sp
 8006184:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006186:	e9cd 8900 	strd	r8, r9, [sp]
 800618a:	e9cd 6702 	strd	r6, r7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800618e:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006190:	f7fc f96e 	bl	8002470 <HAL_RCC_ClockConfig>
 8006194:	b100      	cbz	r0, 8006198 <SystemClock_Config+0x74>
  while(1)
 8006196:	e7fe      	b.n	8006196 <SystemClock_Config+0x72>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8006198:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800619c:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800619e:	9406      	str	r4, [sp, #24]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80061a0:	9308      	str	r3, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80061a2:	f7fc fa73 	bl	800268c <HAL_RCCEx_PeriphCLKConfig>
 80061a6:	b910      	cbnz	r0, 80061ae <SystemClock_Config+0x8a>
}
 80061a8:	b016      	add	sp, #88	; 0x58
 80061aa:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
  while(1)
 80061ae:	e7fe      	b.n	80061ae <SystemClock_Config+0x8a>

080061b0 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061b0:	2400      	movs	r4, #0
{
 80061b2:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80061b6:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 80061b8:	f7fa fdf6 	bl	8000da8 <HAL_Init>
  SystemClock_Config();
 80061bc:	f7ff ffb2 	bl	8006124 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061c0:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 80061c4:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80061c8:	4da1      	ldr	r5, [pc, #644]	; (8006450 <main+0x2a0>)
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|LED5_Pin
 80061ca:	4622      	mov	r2, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80061cc:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|LED5_Pin
 80061ce:	f64f 1184 	movw	r1, #63876	; 0xf984
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80061d2:	f043 0310 	orr.w	r3, r3, #16
 80061d6:	61ab      	str	r3, [r5, #24]
 80061d8:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|LED5_Pin
 80061da:	489e      	ldr	r0, [pc, #632]	; (8006454 <main+0x2a4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80061dc:	f003 0310 	and.w	r3, r3, #16
 80061e0:	9302      	str	r3, [sp, #8]
 80061e2:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80061e4:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED5_Pin
 80061e6:	2600      	movs	r6, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80061e8:	f043 0320 	orr.w	r3, r3, #32
 80061ec:	61ab      	str	r3, [r5, #24]
 80061ee:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED5_Pin
 80061f0:	2702      	movs	r7, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80061f2:	f003 0320 	and.w	r3, r3, #32
 80061f6:	9303      	str	r3, [sp, #12]
 80061f8:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80061fa:	69ab      	ldr	r3, [r5, #24]
 80061fc:	f043 0304 	orr.w	r3, r3, #4
 8006200:	61ab      	str	r3, [r5, #24]
 8006202:	69ab      	ldr	r3, [r5, #24]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	9304      	str	r3, [sp, #16]
 800620a:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800620c:	69ab      	ldr	r3, [r5, #24]
 800620e:	f043 0308 	orr.w	r3, r3, #8
 8006212:	61ab      	str	r3, [r5, #24]
 8006214:	69ab      	ldr	r3, [r5, #24]
 8006216:	f003 0308 	and.w	r3, r3, #8
 800621a:	9305      	str	r3, [sp, #20]
 800621c:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|LED5_Pin
 800621e:	f7fb fc7d 	bl	8001b1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, TAG_A_O_Pin|TAG_OUT_Pin|FLASH_CS2_Pin|FLASH_CS1_Pin
 8006222:	4622      	mov	r2, r4
 8006224:	f44f 41e3 	mov.w	r1, #29056	; 0x7180
 8006228:	488b      	ldr	r0, [pc, #556]	; (8006458 <main+0x2a8>)
 800622a:	f7fb fc77 	bl	8001b1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED2B0_Pin|GPS_EN_Pin|SIM_S_Pin|GSM_EN_Pin, GPIO_PIN_RESET);
 800622e:	4622      	mov	r2, r4
 8006230:	f24d 0101 	movw	r1, #53249	; 0xd001
 8006234:	4889      	ldr	r0, [pc, #548]	; (800645c <main+0x2ac>)
 8006236:	f7fb fc71 	bl	8001b1c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED5_Pin
 800623a:	f64f 1284 	movw	r2, #63876	; 0xf984
 800623e:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006240:	4884      	ldr	r0, [pc, #528]	; (8006454 <main+0x2a4>)
 8006242:	a90c      	add	r1, sp, #48	; 0x30
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED5_Pin
 8006244:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006248:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800624c:	f7fb fb38 	bl	80018c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TOUCH1_Pin|IN_C_Pin|TAG_IN_Pin|CRG_STAT2_Pin;
 8006250:	f648 0221 	movw	r2, #34849	; 0x8821
 8006254:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006256:	4880      	ldr	r0, [pc, #512]	; (8006458 <main+0x2a8>)
 8006258:	a90c      	add	r1, sp, #48	; 0x30
  GPIO_InitStruct.Pin = TOUCH1_Pin|IN_C_Pin|TAG_IN_Pin|CRG_STAT2_Pin;
 800625a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800625e:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006260:	f7fb fb2e 	bl	80018c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TAG_A_O_Pin|TAG_OUT_Pin|FLASH_CS2_Pin|FLASH_CS1_Pin
 8006264:	f44f 42e3 	mov.w	r2, #29056	; 0x7180
 8006268:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800626a:	487b      	ldr	r0, [pc, #492]	; (8006458 <main+0x2a8>)
 800626c:	a90c      	add	r1, sp, #48	; 0x30
  GPIO_InitStruct.Pin = TAG_A_O_Pin|TAG_OUT_Pin|FLASH_CS2_Pin|FLASH_CS1_Pin
 800626e:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 8006272:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006276:	f7fb fb23 	bl	80018c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = IN_REED1_Pin|IN_REED2_Pin|VIBR_IN_Pin|CRG_STAT1_Pin;
 800627a:	f44f 62c6 	mov.w	r2, #1584	; 0x630
 800627e:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006280:	4874      	ldr	r0, [pc, #464]	; (8006454 <main+0x2a4>)
 8006282:	a90c      	add	r1, sp, #48	; 0x30
  GPIO_InitStruct.Pin = IN_REED1_Pin|IN_REED2_Pin|VIBR_IN_Pin|CRG_STAT1_Pin;
 8006284:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006288:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800628a:	f7fb fb19 	bl	80018c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED2B0_Pin|GPS_EN_Pin|SIM_S_Pin|GSM_EN_Pin;
 800628e:	f24d 0201 	movw	r2, #53249	; 0xd001
 8006292:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006294:	4871      	ldr	r0, [pc, #452]	; (800645c <main+0x2ac>)
 8006296:	a90c      	add	r1, sp, #48	; 0x30
  GPIO_InitStruct.Pin = LED2B0_Pin|GPS_EN_Pin|SIM_S_Pin|GSM_EN_Pin;
 8006298:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 800629c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062a0:	f7fb fb0e 	bl	80018c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TOUCH2_Pin;
 80062a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062a8:	2300      	movs	r3, #0
  huart1.Init.BaudRate = 115200;
 80062aa:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 80062ae:	260c      	movs	r6, #12
  HAL_GPIO_Init(TOUCH2_GPIO_Port, &GPIO_InitStruct);
 80062b0:	486a      	ldr	r0, [pc, #424]	; (800645c <main+0x2ac>)
 80062b2:	a90c      	add	r1, sp, #48	; 0x30
  GPIO_InitStruct.Pin = TOUCH2_Pin;
 80062b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062b8:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(TOUCH2_GPIO_Port, &GPIO_InitStruct);
 80062ba:	f7fb fb01 	bl	80018c0 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80062be:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80062c0:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80062c2:	f043 0301 	orr.w	r3, r3, #1
 80062c6:	616b      	str	r3, [r5, #20]
 80062c8:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80062ca:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80062cc:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80062d0:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80062d2:	9301      	str	r3, [sp, #4]
 80062d4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80062d6:	f7fb f811 	bl	80012fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80062da:	200b      	movs	r0, #11
 80062dc:	f7fb f846 	bl	800136c <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 80062e0:	485f      	ldr	r0, [pc, #380]	; (8006460 <main+0x2b0>)
 80062e2:	4b60      	ldr	r3, [pc, #384]	; (8006464 <main+0x2b4>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 80062e4:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80062e8:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart1.Init.BaudRate = 115200;
 80062ec:	e9c0 3700 	strd	r3, r7, [r0]
  huart1.Init.Parity = UART_PARITY_NONE;
 80062f0:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80062f2:	6146      	str	r6, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80062f4:	f7fc febe 	bl	8003074 <HAL_UART_Init>
 80062f8:	b978      	cbnz	r0, 800631a <main+0x16a>
  huart2.Instance = USART2;
 80062fa:	4603      	mov	r3, r0
 80062fc:	4a5a      	ldr	r2, [pc, #360]	; (8006468 <main+0x2b8>)
 80062fe:	485b      	ldr	r0, [pc, #364]	; (800646c <main+0x2bc>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006300:	e9c0 7301 	strd	r7, r3, [r0, #4]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006304:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006308:	e9c0 6305 	strd	r6, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800630c:	61c3      	str	r3, [r0, #28]
  huart2.Instance = USART2;
 800630e:	6002      	str	r2, [r0, #0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006310:	f7fc feb0 	bl	8003074 <HAL_UART_Init>
 8006314:	4603      	mov	r3, r0
 8006316:	b108      	cbz	r0, 800631c <main+0x16c>
  while(1)
 8006318:	e7fe      	b.n	8006318 <main+0x168>
 800631a:	e7fe      	b.n	800631a <main+0x16a>
  huart3.Instance = USART3;
 800631c:	4854      	ldr	r0, [pc, #336]	; (8006470 <main+0x2c0>)
 800631e:	4a55      	ldr	r2, [pc, #340]	; (8006474 <main+0x2c4>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006320:	e9c0 7301 	strd	r7, r3, [r0, #4]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006324:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006328:	e9c0 6305 	strd	r6, r3, [r0, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800632c:	61c3      	str	r3, [r0, #28]
  huart3.Instance = USART3;
 800632e:	6002      	str	r2, [r0, #0]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006330:	f7fc fea0 	bl	8003074 <HAL_UART_Init>
 8006334:	4603      	mov	r3, r0
 8006336:	b100      	cbz	r0, 800633a <main+0x18a>
  while(1)
 8006338:	e7fe      	b.n	8006338 <main+0x188>
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800633a:	f44f 7080 	mov.w	r0, #256	; 0x100
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800633e:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
  hadc1.Init.NbrOfConversion = 4;
 8006342:	2204      	movs	r2, #4
  hadc1.Instance = ADC1;
 8006344:	4c4c      	ldr	r4, [pc, #304]	; (8006478 <main+0x2c8>)
 8006346:	4d4d      	ldr	r5, [pc, #308]	; (800647c <main+0x2cc>)
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8006348:	60a0      	str	r0, [r4, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800634a:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 800634c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8006350:	930e      	str	r3, [sp, #56]	; 0x38
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006352:	7323      	strb	r3, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006354:	7523      	strb	r3, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006356:	6063      	str	r3, [r4, #4]
  hadc1.Instance = ADC1;
 8006358:	6025      	str	r5, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800635a:	61e1      	str	r1, [r4, #28]
  hadc1.Init.NbrOfConversion = 4;
 800635c:	6122      	str	r2, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800635e:	f7fa fd59 	bl	8000e14 <HAL_ADC_Init>
 8006362:	b100      	cbz	r0, 8006366 <main+0x1b6>
  while(1)
 8006364:	e7fe      	b.n	8006364 <main+0x1b4>
  sConfig.Channel = ADC_CHANNEL_13;
 8006366:	260d      	movs	r6, #13
 8006368:	2701      	movs	r7, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800636a:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800636c:	a90c      	add	r1, sp, #48	; 0x30
 800636e:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_13;
 8006370:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006374:	f7fa fe52 	bl	800101c <HAL_ADC_ConfigChannel>
 8006378:	b100      	cbz	r0, 800637c <main+0x1cc>
  while(1)
 800637a:	e7fe      	b.n	800637a <main+0x1ca>
  sConfig.Channel = ADC_CHANNEL_1;
 800637c:	2201      	movs	r2, #1
 800637e:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006380:	4620      	mov	r0, r4
 8006382:	a90c      	add	r1, sp, #48	; 0x30
  sConfig.Channel = ADC_CHANNEL_1;
 8006384:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006388:	f7fa fe48 	bl	800101c <HAL_ADC_ConfigChannel>
 800638c:	b100      	cbz	r0, 8006390 <main+0x1e0>
  while(1)
 800638e:	e7fe      	b.n	800638e <main+0x1de>
  sConfig.Channel = ADC_CHANNEL_10;
 8006390:	220a      	movs	r2, #10
 8006392:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006394:	4620      	mov	r0, r4
 8006396:	a90c      	add	r1, sp, #48	; 0x30
  sConfig.Channel = ADC_CHANNEL_10;
 8006398:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800639c:	f7fa fe3e 	bl	800101c <HAL_ADC_ConfigChannel>
 80063a0:	b100      	cbz	r0, 80063a4 <main+0x1f4>
  while(1)
 80063a2:	e7fe      	b.n	80063a2 <main+0x1f2>
  sConfig.Channel = ADC_CHANNEL_11;
 80063a4:	2304      	movs	r3, #4
 80063a6:	220b      	movs	r2, #11
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80063a8:	4620      	mov	r0, r4
 80063aa:	a90c      	add	r1, sp, #48	; 0x30
  sConfig.Channel = ADC_CHANNEL_11;
 80063ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80063b0:	f7fa fe34 	bl	800101c <HAL_ADC_ConfigChannel>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2800      	cmp	r0, #0
 80063b8:	d13e      	bne.n	8006438 <main+0x288>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80063ba:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  hi2c1.Instance = I2C1;
 80063be:	4830      	ldr	r0, [pc, #192]	; (8006480 <main+0x2d0>)
 80063c0:	4930      	ldr	r1, [pc, #192]	; (8006484 <main+0x2d4>)
  hi2c1.Init.ClockSpeed = 100000;
 80063c2:	4a31      	ldr	r2, [pc, #196]	; (8006488 <main+0x2d8>)
  hi2c1.Init.OwnAddress1 = 0;
 80063c4:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.OwnAddress2 = 0;
 80063c8:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80063cc:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hi2c1.Init.ClockSpeed = 100000;
 80063d0:	e9c0 1200 	strd	r1, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80063d4:	6104      	str	r4, [r0, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80063d6:	f7fb fc3b 	bl	8001c50 <HAL_I2C_Init>
 80063da:	4603      	mov	r3, r0
 80063dc:	bb68      	cbnz	r0, 800643a <main+0x28a>
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80063de:	f44f 7582 	mov.w	r5, #260	; 0x104
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80063e2:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi3.Init.CRCPolynomial = 10;
 80063e6:	220a      	movs	r2, #10
  hspi3.Instance = SPI3;
 80063e8:	4828      	ldr	r0, [pc, #160]	; (800648c <main+0x2dc>)
 80063ea:	4c29      	ldr	r4, [pc, #164]	; (8006490 <main+0x2e0>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80063ec:	e9c0 5301 	strd	r5, r3, [r0, #4]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80063f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80063f4:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063f8:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80063fc:	6143      	str	r3, [r0, #20]
  hspi3.Instance = SPI3;
 80063fe:	6004      	str	r4, [r0, #0]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006400:	6181      	str	r1, [r0, #24]
  hspi3.Init.CRCPolynomial = 10;
 8006402:	62c2      	str	r2, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006404:	f7fc f9c2 	bl	800278c <HAL_SPI_Init>
 8006408:	b9c0      	cbnz	r0, 800643c <main+0x28c>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800640a:	2300      	movs	r3, #0
  htim1.Init.Period = 200;
 800640c:	22c8      	movs	r2, #200	; 0xc8
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800640e:	2780      	movs	r7, #128	; 0x80
  htim1.Instance = TIM1;
 8006410:	4d20      	ldr	r5, [pc, #128]	; (8006494 <main+0x2e4>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006412:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8006416:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800641a:	e9cd 3308 	strd	r3, r3, [sp, #32]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800641e:	e9c5 3301 	strd	r3, r3, [r5, #4]
  htim1.Init.RepetitionCounter = 0;
 8006422:	e9c5 3304 	strd	r3, r3, [r5, #16]
  htim1.Instance = TIM1;
 8006426:	4b1c      	ldr	r3, [pc, #112]	; (8006498 <main+0x2e8>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006428:	4628      	mov	r0, r5
  htim1.Init.Period = 200;
 800642a:	60ea      	str	r2, [r5, #12]
  htim1.Instance = TIM1;
 800642c:	602b      	str	r3, [r5, #0]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800642e:	61af      	str	r7, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006430:	f7fc fa06 	bl	8002840 <HAL_TIM_Base_Init>
 8006434:	b118      	cbz	r0, 800643e <main+0x28e>
  while(1)
 8006436:	e7fe      	b.n	8006436 <main+0x286>
 8006438:	e7fe      	b.n	8006438 <main+0x288>
 800643a:	e7fe      	b.n	800643a <main+0x28a>
 800643c:	e7fe      	b.n	800643c <main+0x28c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800643e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006442:	4628      	mov	r0, r5
 8006444:	a90c      	add	r1, sp, #48	; 0x30
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006446:	960c      	str	r6, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006448:	f7fc fc82 	bl	8002d50 <HAL_TIM_ConfigClockSource>
 800644c:	b330      	cbz	r0, 800649c <main+0x2ec>
  while(1)
 800644e:	e7fe      	b.n	800644e <main+0x29e>
 8006450:	40021000 	.word	0x40021000
 8006454:	40011000 	.word	0x40011000
 8006458:	40010800 	.word	0x40010800
 800645c:	40010c00 	.word	0x40010c00
 8006460:	20002ac4 	.word	0x20002ac4
 8006464:	40013800 	.word	0x40013800
 8006468:	40004400 	.word	0x40004400
 800646c:	20002bb0 	.word	0x20002bb0
 8006470:	2000295c 	.word	0x2000295c
 8006474:	40004800 	.word	0x40004800
 8006478:	20002a94 	.word	0x20002a94
 800647c:	40012400 	.word	0x40012400
 8006480:	200029a0 	.word	0x200029a0
 8006484:	40005400 	.word	0x40005400
 8006488:	000186a0 	.word	0x000186a0
 800648c:	20002a3c 	.word	0x20002a3c
 8006490:	40003c00 	.word	0x40003c00
 8006494:	20002b64 	.word	0x20002b64
 8006498:	40012c00 	.word	0x40012c00
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800649c:	2300      	movs	r3, #0
 800649e:	2210      	movs	r2, #16
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80064a0:	4628      	mov	r0, r5
 80064a2:	a908      	add	r1, sp, #32
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80064a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80064a8:	f7fc fda6 	bl	8002ff8 <HAL_TIMEx_MasterConfigSynchronization>
 80064ac:	4603      	mov	r3, r0
 80064ae:	b9c0      	cbnz	r0, 80064e2 <main+0x332>
  htim3.Init.Period = 65535;
 80064b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
  htim3.Instance = TIM3;
 80064b4:	4c3f      	ldr	r4, [pc, #252]	; (80065b4 <main+0x404>)
 80064b6:	4a40      	ldr	r2, [pc, #256]	; (80065b8 <main+0x408>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80064b8:	4620      	mov	r0, r4
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80064ba:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 80064be:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  TIM_IC_InitTypeDef sConfigIC = {0};
 80064c2:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80064c6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064ca:	e9c4 3301 	strd	r3, r3, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064ce:	9306      	str	r3, [sp, #24]
  htim3.Init.Period = 65535;
 80064d0:	60e1      	str	r1, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064d2:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064d4:	61a3      	str	r3, [r4, #24]
  htim3.Instance = TIM3;
 80064d6:	6022      	str	r2, [r4, #0]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064d8:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80064da:	f7fc f9b1 	bl	8002840 <HAL_TIM_Base_Init>
 80064de:	b108      	cbz	r0, 80064e4 <main+0x334>
  while(1)
 80064e0:	e7fe      	b.n	80064e0 <main+0x330>
 80064e2:	e7fe      	b.n	80064e2 <main+0x332>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80064e4:	4620      	mov	r0, r4
 80064e6:	a90c      	add	r1, sp, #48	; 0x30
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80064e8:	960c      	str	r6, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80064ea:	f7fc fc31 	bl	8002d50 <HAL_TIM_ConfigClockSource>
 80064ee:	b100      	cbz	r0, 80064f2 <main+0x342>
  while(1)
 80064f0:	e7fe      	b.n	80064f0 <main+0x340>
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80064f2:	4620      	mov	r0, r4
 80064f4:	f7fc fa46 	bl	8002984 <HAL_TIM_IC_Init>
 80064f8:	b100      	cbz	r0, 80064fc <main+0x34c>
  while(1)
 80064fa:	e7fe      	b.n	80064fa <main+0x34a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80064fc:	f04f 0800 	mov.w	r8, #0
 8006500:	f04f 0900 	mov.w	r9, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006504:	4620      	mov	r0, r4
 8006506:	a906      	add	r1, sp, #24
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006508:	e9cd 8906 	strd	r8, r9, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800650c:	f7fc fd74 	bl	8002ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8006510:	4602      	mov	r2, r0
 8006512:	b100      	cbz	r0, 8006516 <main+0x366>
  while(1)
 8006514:	e7fe      	b.n	8006514 <main+0x364>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8006516:	f04f 0a00 	mov.w	sl, #0
 800651a:	f04f 0b01 	mov.w	fp, #1
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800651e:	4620      	mov	r0, r4
 8006520:	a908      	add	r1, sp, #32
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8006522:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8006526:	e9cd ab08 	strd	sl, fp, [sp, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800652a:	f7fc fb45 	bl	8002bb8 <HAL_TIM_IC_ConfigChannel>
 800652e:	4606      	mov	r6, r0
 8006530:	2800      	cmp	r0, #0
 8006532:	d13e      	bne.n	80065b2 <main+0x402>
  LCD_Init();
 8006534:	f7ff f9b2 	bl	800589c <LCD_Init>
  HAL_GPIO_WritePin(MAIN_PWR_GPIO_Port, MAIN_PWR_Pin, GPIO_PIN_SET);
 8006538:	2201      	movs	r2, #1
 800653a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800653e:	481f      	ldr	r0, [pc, #124]	; (80065bc <main+0x40c>)
 8006540:	f7fb faec 	bl	8001b1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SOL_CNTRL_GPIO_Port, SOL_CNTRL_Pin, GPIO_PIN_SET);
 8006544:	2201      	movs	r2, #1
 8006546:	4639      	mov	r1, r7
 8006548:	481c      	ldr	r0, [pc, #112]	; (80065bc <main+0x40c>)
 800654a:	f7fb fae7 	bl	8001b1c <HAL_GPIO_WritePin>
  LCD_Init();
 800654e:	f7ff f9a5 	bl	800589c <LCD_Init>
  HAL_TIM_Base_MspInit(&htim1);
 8006552:	4628      	mov	r0, r5
 8006554:	f000 fb84 	bl	8006c60 <HAL_TIM_Base_MspInit>
  HAL_TIM_Base_Start_IT(&htim1);
 8006558:	4628      	mov	r0, r5
 800655a:	f7fc f9dd 	bl	8002918 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800655e:	4620      	mov	r0, r4
 8006560:	f7fc f9da 	bl	8002918 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT (&htim3, TIM_CHANNEL_1);
 8006564:	4631      	mov	r1, r6
 8006566:	4620      	mov	r0, r4
 8006568:	f7fc fa78 	bl	8002a5c <HAL_TIM_IC_Start_IT>
  HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 800656c:	2104      	movs	r1, #4
 800656e:	4813      	ldr	r0, [pc, #76]	; (80065bc <main+0x40c>)
 8006570:	f7fb fad8 	bl	8001b24 <HAL_GPIO_TogglePin>
  Wifi_Init();
 8006574:	f7ff fa1e 	bl	80059b4 <Wifi_Init>
  osTimerDef(myTimer01, Callback01);
 8006578:	4b11      	ldr	r3, [pc, #68]	; (80065c0 <main+0x410>)
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 800657a:	4632      	mov	r2, r6
 800657c:	2101      	movs	r1, #1
 800657e:	a808      	add	r0, sp, #32
  osTimerDef(myTimer01, Callback01);
 8006580:	e9cd 3608 	strd	r3, r6, [sp, #32]
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8006584:	f7fd f868 	bl	8003658 <osTimerCreate>
 8006588:	4684      	mov	ip, r0
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800658a:	4d0e      	ldr	r5, [pc, #56]	; (80065c4 <main+0x414>)
 800658c:	ac0c      	add	r4, sp, #48	; 0x30
 800658e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006592:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8006596:	4f0c      	ldr	r7, [pc, #48]	; (80065c8 <main+0x418>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8006598:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800659c:	4631      	mov	r1, r6
 800659e:	a80c      	add	r0, sp, #48	; 0x30
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 80065a0:	f8c7 c000 	str.w	ip, [r7]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80065a4:	f7fd f822 	bl	80035ec <osThreadCreate>
 80065a8:	4b08      	ldr	r3, [pc, #32]	; (80065cc <main+0x41c>)
 80065aa:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80065ac:	f7fd f818 	bl	80035e0 <osKernelStart>
  while (1)
 80065b0:	e7fe      	b.n	80065b0 <main+0x400>
  while(1)
 80065b2:	e7fe      	b.n	80065b2 <main+0x402>
 80065b4:	200029f4 	.word	0x200029f4
 80065b8:	40000400 	.word	0x40000400
 80065bc:	40011000 	.word	0x40011000
 80065c0:	08005fcd 	.word	0x08005fcd
 80065c4:	08007a84 	.word	0x08007a84
 80065c8:	20002bac 	.word	0x20002bac
 80065cc:	20002954 	.word	0x20002954

080065d0 <HAL_TIM_PeriodElapsedCallback>:
{
 80065d0:	b510      	push	{r4, lr}
 80065d2:	4604      	mov	r4, r0
	HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 80065d4:	2104      	movs	r1, #4
 80065d6:	480a      	ldr	r0, [pc, #40]	; (8006600 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80065d8:	f7fb faa4 	bl	8001b24 <HAL_GPIO_TogglePin>
  if (htim->Instance == TIM2) {
 80065dc:	6823      	ldr	r3, [r4, #0]
 80065de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e2:	d009      	beq.n	80065f8 <HAL_TIM_PeriodElapsedCallback+0x28>
  if (htim->Instance == TIM3) gu16_TIM2_OVC++;
 80065e4:	4a07      	ldr	r2, [pc, #28]	; (8006604 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d000      	beq.n	80065ec <HAL_TIM_PeriodElapsedCallback+0x1c>
}
 80065ea:	bd10      	pop	{r4, pc}
  if (htim->Instance == TIM3) gu16_TIM2_OVC++;
 80065ec:	4a06      	ldr	r2, [pc, #24]	; (8006608 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80065ee:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 80065f0:	3301      	adds	r3, #1
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	8593      	strh	r3, [r2, #44]	; 0x2c
}
 80065f6:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 80065f8:	f7fa fbe8 	bl	8000dcc <HAL_IncTick>
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	e7f1      	b.n	80065e4 <HAL_TIM_PeriodElapsedCallback+0x14>
 8006600:	40011000 	.word	0x40011000
 8006604:	40000400 	.word	0x40000400
 8006608:	20001854 	.word	0x20001854

0800660c <Error_Handler>:
  while(1)
 800660c:	e7fe      	b.n	800660c <Error_Handler>
 800660e:	bf00      	nop

08006610 <myStrSection>:
//#include "GSM.h"

//volatile unsigned char msisdn[80];
const char hex[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};

short myStrSection(char *p_str,char *p_result,unsigned char p_size,char p_char,char p_pos){
 8006610:	b4f0      	push	{r4, r5, r6, r7}

	string_index=0;
	result_index=0;
	tmp_pos=0;
	p_size--;
	while(p_str[string_index]!=0){
 8006612:	7804      	ldrb	r4, [r0, #0]
short myStrSection(char *p_str,char *p_result,unsigned char p_size,char p_char,char p_pos){
 8006614:	f89d c010 	ldrb.w	ip, [sp, #16]
	while(p_str[string_index]!=0){
 8006618:	b32c      	cbz	r4, 8006666 <myStrSection+0x56>
 800661a:	3a01      	subs	r2, #1
 800661c:	b2d7      	uxtb	r7, r2
	tmp_pos=0;
 800661e:	2200      	movs	r2, #0
 8006620:	4606      	mov	r6, r0
	result_index=0;
 8006622:	4615      	mov	r5, r2
	string_index=0;
 8006624:	4610      	mov	r0, r2
 8006626:	e00a      	b.n	800663e <myStrSection+0x2e>

			if(tmp_pos==p_pos)break;
			tmp_pos++;
			result_index=0;
		}else{
			if(p_str[string_index]>=' '){
 8006628:	2c1f      	cmp	r4, #31
 800662a:	d904      	bls.n	8006636 <myStrSection+0x26>
				p_result[result_index]=p_str[string_index];				if(result_index<p_size)result_index++;
 800662c:	42bd      	cmp	r5, r7
 800662e:	554c      	strb	r4, [r1, r5]
 8006630:	bfbc      	itt	lt
 8006632:	3501      	addlt	r5, #1
 8006634:	b22d      	sxthlt	r5, r5
			}
		}
		string_index++;
 8006636:	3001      	adds	r0, #1
 8006638:	b200      	sxth	r0, r0
	while(p_str[string_index]!=0){
 800663a:	5c34      	ldrb	r4, [r6, r0]
 800663c:	b164      	cbz	r4, 8006658 <myStrSection+0x48>
		if(p_str[string_index]==p_char){
 800663e:	42a3      	cmp	r3, r4
 8006640:	d1f2      	bne.n	8006628 <myStrSection+0x18>
			if(tmp_pos==p_pos)break;
 8006642:	4594      	cmp	ip, r2
			tmp_pos++;
 8006644:	f102 0201 	add.w	r2, r2, #1
			if(tmp_pos==p_pos)break;
 8006648:	d008      	beq.n	800665c <myStrSection+0x4c>
 800664a:	3001      	adds	r0, #1
 800664c:	b200      	sxth	r0, r0
	while(p_str[string_index]!=0){
 800664e:	5c34      	ldrb	r4, [r6, r0]
			result_index=0;
 8006650:	2500      	movs	r5, #0
			tmp_pos++;
 8006652:	b2d2      	uxtb	r2, r2
	while(p_str[string_index]!=0){
 8006654:	2c00      	cmp	r4, #0
 8006656:	d1f2      	bne.n	800663e <myStrSection+0x2e>
	}
	if(tmp_pos!=p_pos){
 8006658:	4594      	cmp	ip, r2
 800665a:	d108      	bne.n	800666e <myStrSection+0x5e>
 800665c:	4429      	add	r1, r5
		result_index=0;
		string_index=-1;
	}
	p_result[result_index]=0;
 800665e:	2300      	movs	r3, #0

	return string_index;
}
 8006660:	bcf0      	pop	{r4, r5, r6, r7}
	p_result[result_index]=0;
 8006662:	700b      	strb	r3, [r1, #0]
}
 8006664:	4770      	bx	lr
	tmp_pos=0;
 8006666:	4622      	mov	r2, r4
	result_index=0;
 8006668:	4625      	mov	r5, r4
	string_index=0;
 800666a:	4620      	mov	r0, r4
 800666c:	e7f4      	b.n	8006658 <myStrSection+0x48>
		string_index=-1;
 800666e:	f04f 30ff 	mov.w	r0, #4294967295
 8006672:	e7f4      	b.n	800665e <myStrSection+0x4e>

08006674 <myLongStr>:
	char tmp_iszero;

	tmp_size=0;
	tmp_iszero=1;

	if(p_base==10){
 8006674:	2b0a      	cmp	r3, #10
char* myLongStr(signed long p_val,char *p_dest,short p_size,char p_base){
 8006676:	b4f0      	push	{r4, r5, r6, r7}
 8006678:	4604      	mov	r4, r0
 800667a:	4608      	mov	r0, r1
	if(p_base==10){
 800667c:	f000 8085 	beq.w	800678a <myLongStr+0x116>
			tmp_index/=10;
			if(tmp_size>=(p_size-1))break;
		}

	}
	else if(p_base==16){
 8006680:	2b10      	cmp	r3, #16
 8006682:	d007      	beq.n	8006694 <myLongStr+0x20>
 8006684:	460b      	mov	r3, r1
 8006686:	2201      	movs	r2, #1
		}

	}

	if(tmp_iszero==1){
		p_dest[tmp_size]='0';
 8006688:	2130      	movs	r1, #48	; 0x30
 800668a:	7019      	strb	r1, [r3, #0]
		tmp_size++;
	}

	p_dest[tmp_size]=0;
 800668c:	2300      	movs	r3, #0
 800668e:	5483      	strb	r3, [r0, r2]
	return p_dest;
}
 8006690:	bcf0      	pop	{r4, r5, r6, r7}
 8006692:	4770      	bx	lr
			if(tmp_val>0)tmp_iszero=0;
 8006694:	0f23      	lsrs	r3, r4, #28
 8006696:	f102 31ff 	add.w	r1, r2, #4294967295
 800669a:	f000 8178 	beq.w	800698e <myLongStr+0x31a>
				if(tmp_val<=9)p_dest[tmp_size]=tmp_val+0x30;
 800669e:	2b09      	cmp	r3, #9
 80066a0:	f240 81a5 	bls.w	80069ee <myLongStr+0x37a>
				else if(tmp_val>=10)p_dest[tmp_size]=(tmp_val-10)+'A';
 80066a4:	3337      	adds	r3, #55	; 0x37
 80066a6:	7003      	strb	r3, [r0, #0]
			if(tmp_size>=(p_size-1))break;
 80066a8:	2901      	cmp	r1, #1
 80066aa:	f340 81b5 	ble.w	8006a18 <myLongStr+0x3a4>
			if(tmp_val>0)tmp_iszero=0;
 80066ae:	f014 6f70 	tst.w	r4, #251658240	; 0xf000000
				tmp_size++;
 80066b2:	f04f 0301 	mov.w	r3, #1
			tmp_val=(p_val>>(tmp_index-4))&0x0f;
 80066b6:	f3c4 6203 	ubfx	r2, r4, #24, #4
			if(tmp_val>0)tmp_iszero=0;
 80066ba:	f040 8192 	bne.w	80069e2 <myLongStr+0x36e>
				if(tmp_val<=9)p_dest[tmp_size]=tmp_val+0x30;
 80066be:	3230      	adds	r2, #48	; 0x30
 80066c0:	54c2      	strb	r2, [r0, r3]
				tmp_size++;
 80066c2:	1c5a      	adds	r2, r3, #1
			if(tmp_size>=(p_size-1))break;
 80066c4:	4291      	cmp	r1, r2
				tmp_size++;
 80066c6:	b213      	sxth	r3, r2
			if(tmp_size>=(p_size-1))break;
 80066c8:	dd5a      	ble.n	8006780 <myLongStr+0x10c>
			if(tmp_val>0)tmp_iszero=0;
 80066ca:	f414 0f70 	tst.w	r4, #15728640	; 0xf00000
			tmp_val=(p_val>>(tmp_index-4))&0x0f;
 80066ce:	f3c4 5503 	ubfx	r5, r4, #20, #4
			if(tmp_val>0)tmp_iszero=0;
 80066d2:	f000 818f 	beq.w	80069f4 <myLongStr+0x380>
				if(tmp_val<=9)p_dest[tmp_size]=tmp_val+0x30;
 80066d6:	2d09      	cmp	r5, #9
 80066d8:	f240 818c 	bls.w	80069f4 <myLongStr+0x380>
				else if(tmp_val>=10)p_dest[tmp_size]=(tmp_val-10)+'A';
 80066dc:	3537      	adds	r5, #55	; 0x37
 80066de:	54c5      	strb	r5, [r0, r3]
				tmp_size++;
 80066e0:	3301      	adds	r3, #1
 80066e2:	b29a      	uxth	r2, r3
			if(tmp_size>=(p_size-1))break;
 80066e4:	4291      	cmp	r1, r2
				tmp_size++;
 80066e6:	b21b      	sxth	r3, r3
			if(tmp_size>=(p_size-1))break;
 80066e8:	dd4a      	ble.n	8006780 <myLongStr+0x10c>
			if(tmp_val>0)tmp_iszero=0;
 80066ea:	f414 2f70 	tst.w	r4, #983040	; 0xf0000
			tmp_val=(p_val>>(tmp_index-4))&0x0f;
 80066ee:	f3c4 4203 	ubfx	r2, r4, #16, #4
			if(tmp_val>0)tmp_iszero=0;
 80066f2:	f000 8182 	beq.w	80069fa <myLongStr+0x386>
				if(tmp_val<=9)p_dest[tmp_size]=tmp_val+0x30;
 80066f6:	2a09      	cmp	r2, #9
 80066f8:	f240 817f 	bls.w	80069fa <myLongStr+0x386>
				else if(tmp_val>=10)p_dest[tmp_size]=(tmp_val-10)+'A';
 80066fc:	3237      	adds	r2, #55	; 0x37
 80066fe:	54c2      	strb	r2, [r0, r3]
				tmp_size++;
 8006700:	3301      	adds	r3, #1
 8006702:	b29a      	uxth	r2, r3
			if(tmp_size>=(p_size-1))break;
 8006704:	4291      	cmp	r1, r2
				tmp_size++;
 8006706:	b21b      	sxth	r3, r3
			if(tmp_size>=(p_size-1))break;
 8006708:	dd3a      	ble.n	8006780 <myLongStr+0x10c>
			if(tmp_val>0)tmp_iszero=0;
 800670a:	f414 4f70 	tst.w	r4, #61440	; 0xf000
			tmp_val=(p_val>>(tmp_index-4))&0x0f;
 800670e:	f3c4 3503 	ubfx	r5, r4, #12, #4
			if(tmp_val>0)tmp_iszero=0;
 8006712:	f000 8175 	beq.w	8006a00 <myLongStr+0x38c>
				if(tmp_val<=9)p_dest[tmp_size]=tmp_val+0x30;
 8006716:	2d09      	cmp	r5, #9
 8006718:	f240 8172 	bls.w	8006a00 <myLongStr+0x38c>
				else if(tmp_val>=10)p_dest[tmp_size]=(tmp_val-10)+'A';
 800671c:	3537      	adds	r5, #55	; 0x37
 800671e:	54c5      	strb	r5, [r0, r3]
				tmp_size++;
 8006720:	3301      	adds	r3, #1
 8006722:	b29a      	uxth	r2, r3
			if(tmp_size>=(p_size-1))break;
 8006724:	4291      	cmp	r1, r2
				tmp_size++;
 8006726:	b21b      	sxth	r3, r3
			if(tmp_size>=(p_size-1))break;
 8006728:	dd2a      	ble.n	8006780 <myLongStr+0x10c>
			if(tmp_val>0)tmp_iszero=0;
 800672a:	f414 6f70 	tst.w	r4, #3840	; 0xf00
			tmp_val=(p_val>>(tmp_index-4))&0x0f;
 800672e:	f3c4 2203 	ubfx	r2, r4, #8, #4
			if(tmp_val>0)tmp_iszero=0;
 8006732:	f000 8168 	beq.w	8006a06 <myLongStr+0x392>
				if(tmp_val<=9)p_dest[tmp_size]=tmp_val+0x30;
 8006736:	2a09      	cmp	r2, #9
 8006738:	f240 8165 	bls.w	8006a06 <myLongStr+0x392>
				else if(tmp_val>=10)p_dest[tmp_size]=(tmp_val-10)+'A';
 800673c:	3237      	adds	r2, #55	; 0x37
 800673e:	54c2      	strb	r2, [r0, r3]
				tmp_size++;
 8006740:	3301      	adds	r3, #1
 8006742:	b29a      	uxth	r2, r3
			if(tmp_size>=(p_size-1))break;
 8006744:	4291      	cmp	r1, r2
				tmp_size++;
 8006746:	b21b      	sxth	r3, r3
			if(tmp_size>=(p_size-1))break;
 8006748:	dd1a      	ble.n	8006780 <myLongStr+0x10c>
			if(tmp_val>0)tmp_iszero=0;
 800674a:	f014 0ff0 	tst.w	r4, #240	; 0xf0
			tmp_val=(p_val>>(tmp_index-4))&0x0f;
 800674e:	f3c4 1203 	ubfx	r2, r4, #4, #4
			if(tmp_val>0)tmp_iszero=0;
 8006752:	f000 815b 	beq.w	8006a0c <myLongStr+0x398>
				if(tmp_val<=9)p_dest[tmp_size]=tmp_val+0x30;
 8006756:	2a09      	cmp	r2, #9
 8006758:	f240 8158 	bls.w	8006a0c <myLongStr+0x398>
				else if(tmp_val>=10)p_dest[tmp_size]=(tmp_val-10)+'A';
 800675c:	3237      	adds	r2, #55	; 0x37
 800675e:	54c2      	strb	r2, [r0, r3]
				tmp_size++;
 8006760:	3301      	adds	r3, #1
 8006762:	b29a      	uxth	r2, r3
			if(tmp_size>=(p_size-1))break;
 8006764:	4291      	cmp	r1, r2
				tmp_size++;
 8006766:	b21b      	sxth	r3, r3
			if(tmp_size>=(p_size-1))break;
 8006768:	dd0a      	ble.n	8006780 <myLongStr+0x10c>
			if(tmp_val>0)tmp_iszero=0;
 800676a:	f014 040f 	ands.w	r4, r4, #15
 800676e:	f000 8150 	beq.w	8006a12 <myLongStr+0x39e>
				if(tmp_val<=9)p_dest[tmp_size]=tmp_val+0x30;
 8006772:	2c09      	cmp	r4, #9
 8006774:	f240 814d 	bls.w	8006a12 <myLongStr+0x39e>
				else if(tmp_val>=10)p_dest[tmp_size]=(tmp_val-10)+'A';
 8006778:	3437      	adds	r4, #55	; 0x37
 800677a:	54c4      	strb	r4, [r0, r3]
				tmp_size++;
 800677c:	3301      	adds	r3, #1
 800677e:	b21b      	sxth	r3, r3
			if(tmp_size>=(p_size-1))break;
 8006780:	461a      	mov	r2, r3
	p_dest[tmp_size]=0;
 8006782:	2300      	movs	r3, #0
 8006784:	5483      	strb	r3, [r0, r2]
}
 8006786:	bcf0      	pop	{r4, r5, r6, r7}
 8006788:	4770      	bx	lr
		if(p_val<0){
 800678a:	2c00      	cmp	r4, #0
 800678c:	f2c0 8124 	blt.w	80069d8 <myLongStr+0x364>
	tmp_size=0;
 8006790:	2300      	movs	r3, #0
			tmp_val=p_val/tmp_index;
 8006792:	49a9      	ldr	r1, [pc, #676]	; (8006a38 <myLongStr+0x3c4>)
 8006794:	0a65      	lsrs	r5, r4, #9
 8006796:	fba1 1505 	umull	r1, r5, r1, r5
			if(tmp_val>0)tmp_iszero=0;
 800679a:	4fa8      	ldr	r7, [pc, #672]	; (8006a3c <myLongStr+0x3c8>)
			tmp_val=p_val/tmp_index;
 800679c:	09ee      	lsrs	r6, r5, #7
			if(tmp_val>0)tmp_iszero=0;
 800679e:	42bc      	cmp	r4, r7
			tmp_val=p_val/tmp_index;
 80067a0:	4635      	mov	r5, r6
 80067a2:	f102 32ff 	add.w	r2, r2, #4294967295
			if(tmp_val>0)tmp_iszero=0;
 80067a6:	f240 809c 	bls.w	80068e2 <myLongStr+0x26e>
				tmp_size++;
 80067aa:	1c5f      	adds	r7, r3, #1
				p_dest[tmp_size]=tmp_val+0x30;
 80067ac:	3530      	adds	r5, #48	; 0x30
 80067ae:	54c5      	strb	r5, [r0, r3]
				tmp_size++;
 80067b0:	49a3      	ldr	r1, [pc, #652]	; (8006a40 <myLongStr+0x3cc>)
 80067b2:	b2bd      	uxth	r5, r7
			if(tmp_size>=(p_size-1))break;
 80067b4:	42aa      	cmp	r2, r5
 80067b6:	fb01 4616 	mls	r6, r1, r6, r4
				tmp_size++;
 80067ba:	b23b      	sxth	r3, r7
			if(tmp_size>=(p_size-1))break;
 80067bc:	dde0      	ble.n	8006780 <myLongStr+0x10c>
			tmp_val=p_val/tmp_index;
 80067be:	4da1      	ldr	r5, [pc, #644]	; (8006a44 <myLongStr+0x3d0>)
 80067c0:	fba5 1506 	umull	r1, r5, r5, r6
 80067c4:	0e69      	lsrs	r1, r5, #25
 80067c6:	460d      	mov	r5, r1
				tmp_size++;
 80067c8:	1c5f      	adds	r7, r3, #1
				p_dest[tmp_size]=tmp_val+0x30;
 80067ca:	3530      	adds	r5, #48	; 0x30
 80067cc:	54c5      	strb	r5, [r0, r3]
			p_val=p_val-(tmp_val*tmp_index);
 80067ce:	4c9e      	ldr	r4, [pc, #632]	; (8006a48 <myLongStr+0x3d4>)
				tmp_size++;
 80067d0:	b2bd      	uxth	r5, r7
			if(tmp_size>=(p_size-1))break;
 80067d2:	42aa      	cmp	r2, r5
			p_val=p_val-(tmp_val*tmp_index);
 80067d4:	fb04 6611 	mls	r6, r4, r1, r6
				tmp_size++;
 80067d8:	b23b      	sxth	r3, r7
			if(tmp_size>=(p_size-1))break;
 80067da:	ddd1      	ble.n	8006780 <myLongStr+0x10c>
			tmp_val=p_val/tmp_index;
 80067dc:	499b      	ldr	r1, [pc, #620]	; (8006a4c <myLongStr+0x3d8>)
 80067de:	fba1 4106 	umull	r4, r1, r1, r6
 80067e2:	f3c1 5187 	ubfx	r1, r1, #22, #8
				p_dest[tmp_size]=tmp_val+0x30;
 80067e6:	f101 0730 	add.w	r7, r1, #48	; 0x30
				tmp_size++;
 80067ea:	1c5d      	adds	r5, r3, #1
				p_dest[tmp_size]=tmp_val+0x30;
 80067ec:	54c7      	strb	r7, [r0, r3]
			p_val=p_val-(tmp_val*tmp_index);
 80067ee:	4c98      	ldr	r4, [pc, #608]	; (8006a50 <myLongStr+0x3dc>)
				tmp_size++;
 80067f0:	b2af      	uxth	r7, r5
			if(tmp_size>=(p_size-1))break;
 80067f2:	42ba      	cmp	r2, r7
			p_val=p_val-(tmp_val*tmp_index);
 80067f4:	fb04 6111 	mls	r1, r4, r1, r6
				tmp_size++;
 80067f8:	b22b      	sxth	r3, r5
			if(tmp_size>=(p_size-1))break;
 80067fa:	ddc1      	ble.n	8006780 <myLongStr+0x10c>
			tmp_val=p_val/tmp_index;
 80067fc:	f104 4485 	add.w	r4, r4, #1115684864	; 0x42800000
 8006800:	f104 1403 	add.w	r4, r4, #196611	; 0x30003
 8006804:	f504 4490 	add.w	r4, r4, #18432	; 0x4800
 8006808:	fba4 5401 	umull	r5, r4, r4, r1
 800680c:	f3c4 4487 	ubfx	r4, r4, #18, #8
				tmp_size++;
 8006810:	1c5e      	adds	r6, r3, #1
				p_dest[tmp_size]=tmp_val+0x30;
 8006812:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8006816:	54c7      	strb	r7, [r0, r3]
			p_val=p_val-(tmp_val*tmp_index);
 8006818:	4d8e      	ldr	r5, [pc, #568]	; (8006a54 <myLongStr+0x3e0>)
				tmp_size++;
 800681a:	b2b7      	uxth	r7, r6
			if(tmp_size>=(p_size-1))break;
 800681c:	42ba      	cmp	r2, r7
			p_val=p_val-(tmp_val*tmp_index);
 800681e:	fb05 1514 	mls	r5, r5, r4, r1
				tmp_size++;
 8006822:	b233      	sxth	r3, r6
			if(tmp_size>=(p_size-1))break;
 8006824:	ddac      	ble.n	8006780 <myLongStr+0x10c>
			tmp_val=p_val/tmp_index;
 8006826:	498c      	ldr	r1, [pc, #560]	; (8006a58 <myLongStr+0x3e4>)
 8006828:	096c      	lsrs	r4, r5, #5
 800682a:	fba1 1404 	umull	r1, r4, r1, r4
 800682e:	f3c4 14c7 	ubfx	r4, r4, #7, #8
				p_dest[tmp_size]=tmp_val+0x30;
 8006832:	f104 0630 	add.w	r6, r4, #48	; 0x30
				tmp_size++;
 8006836:	1c59      	adds	r1, r3, #1
				p_dest[tmp_size]=tmp_val+0x30;
 8006838:	54c6      	strb	r6, [r0, r3]
			p_val=p_val-(tmp_val*tmp_index);
 800683a:	4f88      	ldr	r7, [pc, #544]	; (8006a5c <myLongStr+0x3e8>)
				tmp_size++;
 800683c:	b28e      	uxth	r6, r1
			if(tmp_size>=(p_size-1))break;
 800683e:	42b2      	cmp	r2, r6
			p_val=p_val-(tmp_val*tmp_index);
 8006840:	fb07 5414 	mls	r4, r7, r4, r5
				tmp_size++;
 8006844:	b20b      	sxth	r3, r1
			if(tmp_size>=(p_size-1))break;
 8006846:	dd9b      	ble.n	8006780 <myLongStr+0x10c>
			tmp_val=p_val/tmp_index;
 8006848:	4d85      	ldr	r5, [pc, #532]	; (8006a60 <myLongStr+0x3ec>)
 800684a:	fba5 1504 	umull	r1, r5, r5, r4
 800684e:	f3c5 3547 	ubfx	r5, r5, #13, #8
			p_val=p_val-(tmp_val*tmp_index);
 8006852:	f242 7710 	movw	r7, #10000	; 0x2710
				tmp_size++;
 8006856:	1c59      	adds	r1, r3, #1
				p_dest[tmp_size]=tmp_val+0x30;
 8006858:	f105 0630 	add.w	r6, r5, #48	; 0x30
 800685c:	54c6      	strb	r6, [r0, r3]
				tmp_size++;
 800685e:	b28e      	uxth	r6, r1
			if(tmp_size>=(p_size-1))break;
 8006860:	42b2      	cmp	r2, r6
			p_val=p_val-(tmp_val*tmp_index);
 8006862:	fb07 4415 	mls	r4, r7, r5, r4
				tmp_size++;
 8006866:	b20b      	sxth	r3, r1
			if(tmp_size>=(p_size-1))break;
 8006868:	dd8a      	ble.n	8006780 <myLongStr+0x10c>
			tmp_val=p_val/tmp_index;
 800686a:	4e7e      	ldr	r6, [pc, #504]	; (8006a64 <myLongStr+0x3f0>)
 800686c:	fba6 1604 	umull	r1, r6, r6, r4
 8006870:	f3c6 1687 	ubfx	r6, r6, #6, #8
			p_val=p_val-(tmp_val*tmp_index);
 8006874:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
				tmp_size++;
 8006878:	1c59      	adds	r1, r3, #1
				p_dest[tmp_size]=tmp_val+0x30;
 800687a:	f106 0530 	add.w	r5, r6, #48	; 0x30
 800687e:	54c5      	strb	r5, [r0, r3]
				tmp_size++;
 8006880:	b28d      	uxth	r5, r1
			if(tmp_size>=(p_size-1))break;
 8006882:	42aa      	cmp	r2, r5
			p_val=p_val-(tmp_val*tmp_index);
 8006884:	fb07 4416 	mls	r4, r7, r6, r4
				tmp_size++;
 8006888:	b20b      	sxth	r3, r1
			if(tmp_size>=(p_size-1))break;
 800688a:	f77f af79 	ble.w	8006780 <myLongStr+0x10c>
			tmp_val=p_val/tmp_index;
 800688e:	4e76      	ldr	r6, [pc, #472]	; (8006a68 <myLongStr+0x3f4>)
 8006890:	fba6 1604 	umull	r1, r6, r6, r4
 8006894:	f3c6 1647 	ubfx	r6, r6, #5, #8
			p_val=p_val-(tmp_val*tmp_index);
 8006898:	2164      	movs	r1, #100	; 0x64
				p_dest[tmp_size]=tmp_val+0x30;
 800689a:	f106 0730 	add.w	r7, r6, #48	; 0x30
				tmp_size++;
 800689e:	1c5d      	adds	r5, r3, #1
				p_dest[tmp_size]=tmp_val+0x30;
 80068a0:	54c7      	strb	r7, [r0, r3]
				tmp_size++;
 80068a2:	b2af      	uxth	r7, r5
			if(tmp_size>=(p_size-1))break;
 80068a4:	4297      	cmp	r7, r2
			p_val=p_val-(tmp_val*tmp_index);
 80068a6:	fb01 4616 	mls	r6, r1, r6, r4
				tmp_size++;
 80068aa:	b22b      	sxth	r3, r5
			if(tmp_size>=(p_size-1))break;
 80068ac:	f6bf af68 	bge.w	8006780 <myLongStr+0x10c>
			tmp_val=p_val/tmp_index;
 80068b0:	4c6e      	ldr	r4, [pc, #440]	; (8006a6c <myLongStr+0x3f8>)
 80068b2:	fba4 1406 	umull	r1, r4, r4, r6
 80068b6:	f3c4 04c7 	ubfx	r4, r4, #3, #8
				tmp_size++;
 80068ba:	1c5d      	adds	r5, r3, #1
 80068bc:	b2af      	uxth	r7, r5
				p_dest[tmp_size]=tmp_val+0x30;
 80068be:	f104 0130 	add.w	r1, r4, #48	; 0x30
			if(tmp_size>=(p_size-1))break;
 80068c2:	42ba      	cmp	r2, r7
			p_val=p_val-(tmp_val*tmp_index);
 80068c4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
				p_dest[tmp_size]=tmp_val+0x30;
 80068c8:	54c1      	strb	r1, [r0, r3]
			p_val=p_val-(tmp_val*tmp_index);
 80068ca:	eba6 0144 	sub.w	r1, r6, r4, lsl #1
				tmp_size++;
 80068ce:	b22b      	sxth	r3, r5
			if(tmp_size>=(p_size-1))break;
 80068d0:	f77f af56 	ble.w	8006780 <myLongStr+0x10c>
			tmp_val=p_val/tmp_index;
 80068d4:	b2c9      	uxtb	r1, r1
				tmp_size++;
 80068d6:	1c5a      	adds	r2, r3, #1
				p_dest[tmp_size]=tmp_val+0x30;
 80068d8:	3130      	adds	r1, #48	; 0x30
 80068da:	54c1      	strb	r1, [r0, r3]
				tmp_size++;
 80068dc:	b213      	sxth	r3, r2
			if(tmp_size>=(p_size-1))break;
 80068de:	461a      	mov	r2, r3
 80068e0:	e74f      	b.n	8006782 <myLongStr+0x10e>
 80068e2:	429a      	cmp	r2, r3
 80068e4:	dd4f      	ble.n	8006986 <myLongStr+0x312>
			tmp_val=p_val/tmp_index;
 80068e6:	4d57      	ldr	r5, [pc, #348]	; (8006a44 <myLongStr+0x3d0>)
			if(tmp_val>0)tmp_iszero=0;
 80068e8:	4f61      	ldr	r7, [pc, #388]	; (8006a70 <myLongStr+0x3fc>)
			tmp_val=p_val/tmp_index;
 80068ea:	fba5 1504 	umull	r1, r5, r5, r4
			if(tmp_val>0)tmp_iszero=0;
 80068ee:	42bc      	cmp	r4, r7
			tmp_val=p_val/tmp_index;
 80068f0:	ea4f 6155 	mov.w	r1, r5, lsr #25
 80068f4:	4626      	mov	r6, r4
 80068f6:	460d      	mov	r5, r1
			if(tmp_val>0)tmp_iszero=0;
 80068f8:	f63f af66 	bhi.w	80067c8 <myLongStr+0x154>
			tmp_val=p_val/tmp_index;
 80068fc:	4953      	ldr	r1, [pc, #332]	; (8006a4c <myLongStr+0x3d8>)
			if(tmp_val>0)tmp_iszero=0;
 80068fe:	4d54      	ldr	r5, [pc, #336]	; (8006a50 <myLongStr+0x3dc>)
			tmp_val=p_val/tmp_index;
 8006900:	fba1 6104 	umull	r6, r1, r1, r4
			if(tmp_val>0)tmp_iszero=0;
 8006904:	42ac      	cmp	r4, r5
			tmp_val=p_val/tmp_index;
 8006906:	ea4f 5791 	mov.w	r7, r1, lsr #22
 800690a:	4626      	mov	r6, r4
 800690c:	f3c1 5187 	ubfx	r1, r1, #22, #8
			if(tmp_val>0)tmp_iszero=0;
 8006910:	f4bf af69 	bcs.w	80067e6 <myLongStr+0x172>
			p_val=p_val-(tmp_val*tmp_index);
 8006914:	fb05 4117 	mls	r1, r5, r7, r4
			tmp_val=p_val/tmp_index;
 8006918:	4d56      	ldr	r5, [pc, #344]	; (8006a74 <myLongStr+0x400>)
 800691a:	fba5 4501 	umull	r4, r5, r5, r1
			if(tmp_val>0)tmp_iszero=0;
 800691e:	f015 7f7f 	tst.w	r5, #66846720	; 0x3fc0000
			tmp_val=p_val/tmp_index;
 8006922:	f3c5 4487 	ubfx	r4, r5, #18, #8
			if(tmp_val>0)tmp_iszero=0;
 8006926:	f47f af73 	bne.w	8006810 <myLongStr+0x19c>
			tmp_val=p_val/tmp_index;
 800692a:	4d4b      	ldr	r5, [pc, #300]	; (8006a58 <myLongStr+0x3e4>)
 800692c:	094c      	lsrs	r4, r1, #5
 800692e:	fba5 5404 	umull	r5, r4, r5, r4
 8006932:	f3c4 14c7 	ubfx	r4, r4, #7, #8
			p_val=p_val-(tmp_val*tmp_index);
 8006936:	460d      	mov	r5, r1
			if(tmp_val>0)tmp_iszero=0;
 8006938:	2c00      	cmp	r4, #0
 800693a:	f47f af7a 	bne.w	8006832 <myLongStr+0x1be>
			tmp_val=p_val/tmp_index;
 800693e:	4d48      	ldr	r5, [pc, #288]	; (8006a60 <myLongStr+0x3ec>)
			p_val=p_val-(tmp_val*tmp_index);
 8006940:	460c      	mov	r4, r1
			tmp_val=p_val/tmp_index;
 8006942:	fba5 6501 	umull	r6, r5, r5, r1
 8006946:	f3c5 3547 	ubfx	r5, r5, #13, #8
			if(tmp_val>0)tmp_iszero=0;
 800694a:	2d00      	cmp	r5, #0
 800694c:	d181      	bne.n	8006852 <myLongStr+0x1de>
			tmp_val=p_val/tmp_index;
 800694e:	4d45      	ldr	r5, [pc, #276]	; (8006a64 <myLongStr+0x3f0>)
			p_val=p_val-(tmp_val*tmp_index);
 8006950:	460c      	mov	r4, r1
			tmp_val=p_val/tmp_index;
 8006952:	fba5 6501 	umull	r6, r5, r5, r1
			if(tmp_val>0)tmp_iszero=0;
 8006956:	f415 5f7f 	tst.w	r5, #16320	; 0x3fc0
			tmp_val=p_val/tmp_index;
 800695a:	f3c5 1687 	ubfx	r6, r5, #6, #8
			if(tmp_val>0)tmp_iszero=0;
 800695e:	d189      	bne.n	8006874 <myLongStr+0x200>
			tmp_val=p_val/tmp_index;
 8006960:	4f41      	ldr	r7, [pc, #260]	; (8006a68 <myLongStr+0x3f4>)
			p_val=p_val-(tmp_val*tmp_index);
 8006962:	460c      	mov	r4, r1
			tmp_val=p_val/tmp_index;
 8006964:	fba7 5701 	umull	r5, r7, r7, r1
 8006968:	f3c7 1647 	ubfx	r6, r7, #5, #8
			if(tmp_val>0)tmp_iszero=0;
 800696c:	2e00      	cmp	r6, #0
 800696e:	d193      	bne.n	8006898 <myLongStr+0x224>
			tmp_val=p_val/tmp_index;
 8006970:	4c3e      	ldr	r4, [pc, #248]	; (8006a6c <myLongStr+0x3f8>)
			p_val=p_val-(tmp_val*tmp_index);
 8006972:	460e      	mov	r6, r1
			tmp_val=p_val/tmp_index;
 8006974:	fba4 5401 	umull	r5, r4, r4, r1
 8006978:	f3c4 04c7 	ubfx	r4, r4, #3, #8
			if(tmp_val>0)tmp_iszero=0;
 800697c:	2c00      	cmp	r4, #0
 800697e:	d19c      	bne.n	80068ba <myLongStr+0x246>
 8006980:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8006984:	d1a7      	bne.n	80068d6 <myLongStr+0x262>
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	b292      	uxth	r2, r2
 800698a:	4403      	add	r3, r0
 800698c:	e67c      	b.n	8006688 <myLongStr+0x14>
			if(tmp_size>=(p_size-1))break;
 800698e:	2900      	cmp	r1, #0
 8006990:	ddf9      	ble.n	8006986 <myLongStr+0x312>
			if(tmp_val>0)tmp_iszero=0;
 8006992:	f014 6f70 	tst.w	r4, #251658240	; 0xf000000
			tmp_val=(p_val>>(tmp_index-4))&0x0f;
 8006996:	f3c4 6203 	ubfx	r2, r4, #24, #4
			if(tmp_val>0)tmp_iszero=0;
 800699a:	d122      	bne.n	80069e2 <myLongStr+0x36e>
 800699c:	f414 0f70 	tst.w	r4, #15728640	; 0xf00000
			tmp_val=(p_val>>(tmp_index-4))&0x0f;
 80069a0:	f3c4 5503 	ubfx	r5, r4, #20, #4
			if(tmp_val>0)tmp_iszero=0;
 80069a4:	d13d      	bne.n	8006a22 <myLongStr+0x3ae>
 80069a6:	f414 2f70 	tst.w	r4, #983040	; 0xf0000
			tmp_val=(p_val>>(tmp_index-4))&0x0f;
 80069aa:	f3c4 4203 	ubfx	r2, r4, #16, #4
			if(tmp_val>0)tmp_iszero=0;
 80069ae:	d136      	bne.n	8006a1e <myLongStr+0x3aa>
 80069b0:	f414 4f70 	tst.w	r4, #61440	; 0xf000
			tmp_val=(p_val>>(tmp_index-4))&0x0f;
 80069b4:	f3c4 3503 	ubfx	r5, r4, #12, #4
			if(tmp_val>0)tmp_iszero=0;
 80069b8:	d13b      	bne.n	8006a32 <myLongStr+0x3be>
 80069ba:	f414 6f70 	tst.w	r4, #3840	; 0xf00
			tmp_val=(p_val>>(tmp_index-4))&0x0f;
 80069be:	f3c4 2203 	ubfx	r2, r4, #8, #4
			if(tmp_val>0)tmp_iszero=0;
 80069c2:	d134      	bne.n	8006a2e <myLongStr+0x3ba>
 80069c4:	f014 0ff0 	tst.w	r4, #240	; 0xf0
			tmp_val=(p_val>>(tmp_index-4))&0x0f;
 80069c8:	f3c4 1203 	ubfx	r2, r4, #4, #4
			if(tmp_val>0)tmp_iszero=0;
 80069cc:	d12d      	bne.n	8006a2a <myLongStr+0x3b6>
 80069ce:	f014 040f 	ands.w	r4, r4, #15
 80069d2:	d128      	bne.n	8006a26 <myLongStr+0x3b2>
	tmp_size=0;
 80069d4:	4623      	mov	r3, r4
 80069d6:	e7d6      	b.n	8006986 <myLongStr+0x312>
			p_dest[tmp_size]='-';
 80069d8:	232d      	movs	r3, #45	; 0x2d
			p_val*=-1;
 80069da:	4264      	negs	r4, r4
			p_dest[tmp_size]='-';
 80069dc:	700b      	strb	r3, [r1, #0]
			tmp_size++;
 80069de:	2301      	movs	r3, #1
 80069e0:	e6d7      	b.n	8006792 <myLongStr+0x11e>
				if(tmp_val<=9)p_dest[tmp_size]=tmp_val+0x30;
 80069e2:	2a09      	cmp	r2, #9
 80069e4:	f67f ae6b 	bls.w	80066be <myLongStr+0x4a>
				else if(tmp_val>=10)p_dest[tmp_size]=(tmp_val-10)+'A';
 80069e8:	3237      	adds	r2, #55	; 0x37
 80069ea:	54c2      	strb	r2, [r0, r3]
 80069ec:	e669      	b.n	80066c2 <myLongStr+0x4e>
				if(tmp_val<=9)p_dest[tmp_size]=tmp_val+0x30;
 80069ee:	3330      	adds	r3, #48	; 0x30
 80069f0:	7003      	strb	r3, [r0, #0]
 80069f2:	e659      	b.n	80066a8 <myLongStr+0x34>
 80069f4:	3530      	adds	r5, #48	; 0x30
 80069f6:	54c5      	strb	r5, [r0, r3]
 80069f8:	e672      	b.n	80066e0 <myLongStr+0x6c>
 80069fa:	3230      	adds	r2, #48	; 0x30
 80069fc:	54c2      	strb	r2, [r0, r3]
 80069fe:	e67f      	b.n	8006700 <myLongStr+0x8c>
 8006a00:	3530      	adds	r5, #48	; 0x30
 8006a02:	54c5      	strb	r5, [r0, r3]
 8006a04:	e68c      	b.n	8006720 <myLongStr+0xac>
 8006a06:	3230      	adds	r2, #48	; 0x30
 8006a08:	54c2      	strb	r2, [r0, r3]
 8006a0a:	e699      	b.n	8006740 <myLongStr+0xcc>
 8006a0c:	3230      	adds	r2, #48	; 0x30
 8006a0e:	54c2      	strb	r2, [r0, r3]
 8006a10:	e6a6      	b.n	8006760 <myLongStr+0xec>
 8006a12:	3430      	adds	r4, #48	; 0x30
 8006a14:	54c4      	strb	r4, [r0, r3]
 8006a16:	e6b1      	b.n	800677c <myLongStr+0x108>
				tmp_size++;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	e6b1      	b.n	8006782 <myLongStr+0x10e>
	tmp_size=0;
 8006a1e:	462b      	mov	r3, r5
 8006a20:	e669      	b.n	80066f6 <myLongStr+0x82>
 8006a22:	4613      	mov	r3, r2
 8006a24:	e657      	b.n	80066d6 <myLongStr+0x62>
 8006a26:	2300      	movs	r3, #0
 8006a28:	e6a3      	b.n	8006772 <myLongStr+0xfe>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	e693      	b.n	8006756 <myLongStr+0xe2>
 8006a2e:	462b      	mov	r3, r5
 8006a30:	e681      	b.n	8006736 <myLongStr+0xc2>
 8006a32:	4613      	mov	r3, r2
 8006a34:	e66f      	b.n	8006716 <myLongStr+0xa2>
 8006a36:	bf00      	nop
 8006a38:	00044b83 	.word	0x00044b83
 8006a3c:	3b9ac9ff 	.word	0x3b9ac9ff
 8006a40:	3b9aca00 	.word	0x3b9aca00
 8006a44:	55e63b89 	.word	0x55e63b89
 8006a48:	05f5e100 	.word	0x05f5e100
 8006a4c:	6b5fca6b 	.word	0x6b5fca6b
 8006a50:	00989680 	.word	0x00989680
 8006a54:	000f4240 	.word	0x000f4240
 8006a58:	0a7c5ac5 	.word	0x0a7c5ac5
 8006a5c:	000186a0 	.word	0x000186a0
 8006a60:	d1b71759 	.word	0xd1b71759
 8006a64:	10624dd3 	.word	0x10624dd3
 8006a68:	51eb851f 	.word	0x51eb851f
 8006a6c:	cccccccd 	.word	0xcccccccd
 8006a70:	05f5e0ff 	.word	0x05f5e0ff
 8006a74:	431bde83 	.word	0x431bde83

08006a78 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006a78:	4b11      	ldr	r3, [pc, #68]	; (8006ac0 <HAL_MspInit+0x48>)
{
 8006a7a:	b510      	push	{r4, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8006a7c:	6998      	ldr	r0, [r3, #24]
{
 8006a7e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8006a80:	f040 0001 	orr.w	r0, r0, #1
 8006a84:	6198      	str	r0, [r3, #24]
 8006a86:	699c      	ldr	r4, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006a88:	2200      	movs	r2, #0
  __HAL_RCC_AFIO_CLK_ENABLE();
 8006a8a:	f004 0401 	and.w	r4, r4, #1
 8006a8e:	9400      	str	r4, [sp, #0]
 8006a90:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a92:	69dc      	ldr	r4, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006a94:	210f      	movs	r1, #15
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a96:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8006a9a:	61dc      	str	r4, [r3, #28]
 8006a9c:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006a9e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8006aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aa6:	9301      	str	r3, [sp, #4]
 8006aa8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006aaa:	f7fa fc27 	bl	80012fc <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8006aae:	4a05      	ldr	r2, [pc, #20]	; (8006ac4 <HAL_MspInit+0x4c>)
 8006ab0:	6853      	ldr	r3, [r2, #4]
 8006ab2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006ab6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006aba:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006abc:	b002      	add	sp, #8
 8006abe:	bd10      	pop	{r4, pc}
 8006ac0:	40021000 	.word	0x40021000
 8006ac4:	40010000 	.word	0x40010000

08006ac8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006ac8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006aca:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8006acc:	6802      	ldr	r2, [r0, #0]
 8006ace:	4b29      	ldr	r3, [pc, #164]	; (8006b74 <HAL_ADC_MspInit+0xac>)
{
 8006ad0:	b088      	sub	sp, #32
  if(hadc->Instance==ADC1)
 8006ad2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ad4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8006ad8:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hadc->Instance==ADC1)
 8006adc:	d001      	beq.n	8006ae2 <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006ade:	b008      	add	sp, #32
 8006ae0:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = MAIN_V_Pin|SYSTEM_V_Pin|MAIN_I_Pin;
 8006ae2:	2103      	movs	r1, #3
 8006ae4:	4605      	mov	r5, r0
 8006ae6:	200b      	movs	r0, #11
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006ae8:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8006aec:	699a      	ldr	r2, [r3, #24]
    hdma_adc1.Instance = DMA1_Channel1;
 8006aee:	4e22      	ldr	r6, [pc, #136]	; (8006b78 <HAL_ADC_MspInit+0xb0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006af4:	619a      	str	r2, [r3, #24]
 8006af6:	699a      	ldr	r2, [r3, #24]
 8006af8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8006afc:	9201      	str	r2, [sp, #4]
 8006afe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b00:	699a      	ldr	r2, [r3, #24]
 8006b02:	f042 0210 	orr.w	r2, r2, #16
 8006b06:	619a      	str	r2, [r3, #24]
 8006b08:	699a      	ldr	r2, [r3, #24]
 8006b0a:	f002 0210 	and.w	r2, r2, #16
 8006b0e:	9202      	str	r2, [sp, #8]
 8006b10:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b12:	699a      	ldr	r2, [r3, #24]
 8006b14:	f042 0204 	orr.w	r2, r2, #4
 8006b18:	619a      	str	r2, [r3, #24]
 8006b1a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = MAIN_V_Pin|SYSTEM_V_Pin|MAIN_I_Pin;
 8006b1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b20:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b24:	4815      	ldr	r0, [pc, #84]	; (8006b7c <HAL_ADC_MspInit+0xb4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b26:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b28:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b2a:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b2c:	f7fa fec8 	bl	80018c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BATT_V_Pin;
 8006b30:	2202      	movs	r2, #2
 8006b32:	2303      	movs	r3, #3
    HAL_GPIO_Init(BATT_V_GPIO_Port, &GPIO_InitStruct);
 8006b34:	4812      	ldr	r0, [pc, #72]	; (8006b80 <HAL_ADC_MspInit+0xb8>)
 8006b36:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = BATT_V_Pin;
 8006b38:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(BATT_V_GPIO_Port, &GPIO_InitStruct);
 8006b3c:	f7fa fec0 	bl	80018c0 <HAL_GPIO_Init>
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006b40:	2080      	movs	r0, #128	; 0x80
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006b42:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006b46:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Instance = DMA1_Channel1;
 8006b4a:	490e      	ldr	r1, [pc, #56]	; (8006b84 <HAL_ADC_MspInit+0xbc>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006b4c:	60f0      	str	r0, [r6, #12]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006b4e:	4630      	mov	r0, r6
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b50:	e9c6 4401 	strd	r4, r4, [r6, #4]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006b54:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006b58:	e9c6 2304 	strd	r2, r3, [r6, #16]
    hdma_adc1.Instance = DMA1_Channel1;
 8006b5c:	6031      	str	r1, [r6, #0]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006b5e:	f7fa fc13 	bl	8001388 <HAL_DMA_Init>
 8006b62:	b918      	cbnz	r0, 8006b6c <HAL_ADC_MspInit+0xa4>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006b64:	622e      	str	r6, [r5, #32]
 8006b66:	6275      	str	r5, [r6, #36]	; 0x24
}
 8006b68:	b008      	add	sp, #32
 8006b6a:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8006b6c:	f7ff fd4e 	bl	800660c <Error_Handler>
 8006b70:	e7f8      	b.n	8006b64 <HAL_ADC_MspInit+0x9c>
 8006b72:	bf00      	nop
 8006b74:	40012400 	.word	0x40012400
 8006b78:	20002b20 	.word	0x20002b20
 8006b7c:	40011000 	.word	0x40011000
 8006b80:	40010800 	.word	0x40010800
 8006b84:	40020008 	.word	0x40020008

08006b88 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b88:	2300      	movs	r3, #0
{
 8006b8a:	b5d0      	push	{r4, r6, r7, lr}
  if(hi2c->Instance==I2C1)
 8006b8c:	6801      	ldr	r1, [r0, #0]
 8006b8e:	4a14      	ldr	r2, [pc, #80]	; (8006be0 <HAL_I2C_MspInit+0x58>)
{
 8006b90:	b086      	sub	sp, #24
  if(hi2c->Instance==I2C1)
 8006b92:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b94:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006b98:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hi2c->Instance==I2C1)
 8006b9c:	d001      	beq.n	8006ba2 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006b9e:	b006      	add	sp, #24
 8006ba0:	bdd0      	pop	{r4, r6, r7, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006ba2:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006ba4:	26c0      	movs	r6, #192	; 0xc0
 8006ba6:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ba8:	4c0e      	ldr	r4, [pc, #56]	; (8006be4 <HAL_I2C_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006baa:	480f      	ldr	r0, [pc, #60]	; (8006be8 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bac:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bae:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bb0:	f043 0308 	orr.w	r3, r3, #8
 8006bb4:	61a3      	str	r3, [r4, #24]
 8006bb6:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006bb8:	e9cd 6702 	strd	r6, r7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bbc:	f003 0308 	and.w	r3, r3, #8
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006bc4:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bc6:	f7fa fe7b 	bl	80018c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006bca:	69e3      	ldr	r3, [r4, #28]
 8006bcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006bd0:	61e3      	str	r3, [r4, #28]
 8006bd2:	69e3      	ldr	r3, [r4, #28]
 8006bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bd8:	9301      	str	r3, [sp, #4]
 8006bda:	9b01      	ldr	r3, [sp, #4]
}
 8006bdc:	b006      	add	sp, #24
 8006bde:	bdd0      	pop	{r4, r6, r7, pc}
 8006be0:	40005400 	.word	0x40005400
 8006be4:	40021000 	.word	0x40021000
 8006be8:	40010c00 	.word	0x40010c00

08006bec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006bec:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bee:	2400      	movs	r4, #0
  if(hspi->Instance==SPI3)
 8006bf0:	6802      	ldr	r2, [r0, #0]
 8006bf2:	4b19      	ldr	r3, [pc, #100]	; (8006c58 <HAL_SPI_MspInit+0x6c>)
{
 8006bf4:	b087      	sub	sp, #28
  if(hspi->Instance==SPI3)
 8006bf6:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bf8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006bfc:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hspi->Instance==SPI3)
 8006c00:	d001      	beq.n	8006c06 <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8006c02:	b007      	add	sp, #28
 8006c04:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8006c06:	2028      	movs	r0, #40	; 0x28
 8006c08:	2102      	movs	r1, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006c0a:	2503      	movs	r5, #3
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006c0c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8006c10:	69da      	ldr	r2, [r3, #28]
 8006c12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c16:	61da      	str	r2, [r3, #28]
 8006c18:	69da      	ldr	r2, [r3, #28]
 8006c1a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8006c1e:	9200      	str	r2, [sp, #0]
 8006c20:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c22:	699a      	ldr	r2, [r3, #24]
 8006c24:	f042 0208 	orr.w	r2, r2, #8
 8006c28:	619a      	str	r2, [r3, #24]
 8006c2a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8006c2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c30:	f003 0308 	and.w	r3, r3, #8
 8006c34:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c36:	a902      	add	r1, sp, #8
 8006c38:	4808      	ldr	r0, [pc, #32]	; (8006c5c <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c3a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006c3c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c3e:	f7fa fe3f 	bl	80018c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006c42:	2210      	movs	r2, #16
 8006c44:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c46:	4805      	ldr	r0, [pc, #20]	; (8006c5c <HAL_SPI_MspInit+0x70>)
 8006c48:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006c4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c4e:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c50:	f7fa fe36 	bl	80018c0 <HAL_GPIO_Init>
}
 8006c54:	b007      	add	sp, #28
 8006c56:	bd30      	pop	{r4, r5, pc}
 8006c58:	40003c00 	.word	0x40003c00
 8006c5c:	40010c00 	.word	0x40010c00

08006c60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006c60:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c62:	2400      	movs	r4, #0
  if(htim_base->Instance==TIM1)
 8006c64:	6803      	ldr	r3, [r0, #0]
 8006c66:	4a27      	ldr	r2, [pc, #156]	; (8006d04 <HAL_TIM_Base_MspInit+0xa4>)
{
 8006c68:	b088      	sub	sp, #32
  if(htim_base->Instance==TIM1)
 8006c6a:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c6c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8006c70:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(htim_base->Instance==TIM1)
 8006c74:	d004      	beq.n	8006c80 <HAL_TIM_Base_MspInit+0x20>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8006c76:	4a24      	ldr	r2, [pc, #144]	; (8006d08 <HAL_TIM_Base_MspInit+0xa8>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d01d      	beq.n	8006cb8 <HAL_TIM_Base_MspInit+0x58>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006c7c:	b008      	add	sp, #32
 8006c7e:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006c80:	4b22      	ldr	r3, [pc, #136]	; (8006d0c <HAL_TIM_Base_MspInit+0xac>)
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8006c82:	4622      	mov	r2, r4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006c84:	6998      	ldr	r0, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8006c86:	2105      	movs	r1, #5
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006c88:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8006c8c:	6198      	str	r0, [r3, #24]
 8006c8e:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8006c90:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c96:	9301      	str	r3, [sp, #4]
 8006c98:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8006c9a:	f7fa fb2f 	bl	80012fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8006c9e:	2019      	movs	r0, #25
 8006ca0:	f7fa fb64 	bl	800136c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8006ca4:	4622      	mov	r2, r4
 8006ca6:	2105      	movs	r1, #5
 8006ca8:	201b      	movs	r0, #27
 8006caa:	f7fa fb27 	bl	80012fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8006cae:	201b      	movs	r0, #27
 8006cb0:	f7fa fb5c 	bl	800136c <HAL_NVIC_EnableIRQ>
}
 8006cb4:	b008      	add	sp, #32
 8006cb6:	bdd0      	pop	{r4, r6, r7, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006cb8:	2640      	movs	r6, #64	; 0x40
 8006cba:	2700      	movs	r7, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006cbc:	4b13      	ldr	r3, [pc, #76]	; (8006d0c <HAL_TIM_Base_MspInit+0xac>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cbe:	a904      	add	r1, sp, #16
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006cc0:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cc2:	4813      	ldr	r0, [pc, #76]	; (8006d10 <HAL_TIM_Base_MspInit+0xb0>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006cc4:	f042 0202 	orr.w	r2, r2, #2
 8006cc8:	61da      	str	r2, [r3, #28]
 8006cca:	69da      	ldr	r2, [r3, #28]
 8006ccc:	f002 0202 	and.w	r2, r2, #2
 8006cd0:	9202      	str	r2, [sp, #8]
 8006cd2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cd4:	699a      	ldr	r2, [r3, #24]
 8006cd6:	f042 0204 	orr.w	r2, r2, #4
 8006cda:	619a      	str	r2, [r3, #24]
 8006cdc:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006cde:	e9cd 6704 	strd	r6, r7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ce2:	f003 0304 	and.w	r3, r3, #4
 8006ce6:	9303      	str	r3, [sp, #12]
 8006ce8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cea:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cec:	f7fa fde8 	bl	80018c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8006cf0:	4622      	mov	r2, r4
 8006cf2:	2105      	movs	r1, #5
 8006cf4:	201d      	movs	r0, #29
 8006cf6:	f7fa fb01 	bl	80012fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006cfa:	201d      	movs	r0, #29
 8006cfc:	f7fa fb36 	bl	800136c <HAL_NVIC_EnableIRQ>
}
 8006d00:	b008      	add	sp, #32
 8006d02:	bdd0      	pop	{r4, r6, r7, pc}
 8006d04:	40012c00 	.word	0x40012c00
 8006d08:	40000400 	.word	0x40000400
 8006d0c:	40021000 	.word	0x40021000
 8006d10:	40010800 	.word	0x40010800

08006d14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006d14:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d16:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8006d18:	6803      	ldr	r3, [r0, #0]
 8006d1a:	4a54      	ldr	r2, [pc, #336]	; (8006e6c <HAL_UART_MspInit+0x158>)
{
 8006d1c:	b08b      	sub	sp, #44	; 0x2c
  if(huart->Instance==USART1)
 8006d1e:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d20:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8006d24:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if(huart->Instance==USART1)
 8006d28:	d007      	beq.n	8006d3a <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8006d2a:	4a51      	ldr	r2, [pc, #324]	; (8006e70 <HAL_UART_MspInit+0x15c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d03a      	beq.n	8006da6 <HAL_UART_MspInit+0x92>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8006d30:	4a50      	ldr	r2, [pc, #320]	; (8006e74 <HAL_UART_MspInit+0x160>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d067      	beq.n	8006e06 <HAL_UART_MspInit+0xf2>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006d36:	b00b      	add	sp, #44	; 0x2c
 8006d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006d3a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006d3e:	2102      	movs	r1, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006d40:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8006d42:	4b4d      	ldr	r3, [pc, #308]	; (8006e78 <HAL_UART_MspInit+0x164>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006d44:	f44f 6680 	mov.w	r6, #1024	; 0x400
    __HAL_RCC_USART1_CLK_ENABLE();
 8006d48:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006d4a:	2700      	movs	r7, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8006d4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d50:	619a      	str	r2, [r3, #24]
 8006d52:	699a      	ldr	r2, [r3, #24]
 8006d54:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006d58:	9200      	str	r2, [sp, #0]
 8006d5a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d5c:	699a      	ldr	r2, [r3, #24]
 8006d5e:	f042 0204 	orr.w	r2, r2, #4
 8006d62:	619a      	str	r2, [r3, #24]
 8006d64:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006d66:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d6a:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d6e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d72:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d74:	a906      	add	r1, sp, #24
 8006d76:	f500 3083 	add.w	r0, r0, #67072	; 0x10600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d7a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006d7c:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d7e:	f7fa fd9f 	bl	80018c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d82:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d84:	a906      	add	r1, sp, #24
 8006d86:	483d      	ldr	r0, [pc, #244]	; (8006e7c <HAL_UART_MspInit+0x168>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d88:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006d8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d8e:	f7fa fd97 	bl	80018c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8006d92:	4622      	mov	r2, r4
 8006d94:	2105      	movs	r1, #5
 8006d96:	2025      	movs	r0, #37	; 0x25
 8006d98:	f7fa fab0 	bl	80012fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006d9c:	2025      	movs	r0, #37	; 0x25
 8006d9e:	f7fa fae5 	bl	800136c <HAL_NVIC_EnableIRQ>
}
 8006da2:	b00b      	add	sp, #44	; 0x2c
 8006da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006da6:	2004      	movs	r0, #4
 8006da8:	2102      	movs	r1, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006daa:	2503      	movs	r5, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 8006dac:	4b32      	ldr	r3, [pc, #200]	; (8006e78 <HAL_UART_MspInit+0x164>)
 8006dae:	69da      	ldr	r2, [r3, #28]
 8006db0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006db4:	61da      	str	r2, [r3, #28]
 8006db6:	69da      	ldr	r2, [r3, #28]
 8006db8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8006dbc:	9202      	str	r2, [sp, #8]
 8006dbe:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dc0:	699a      	ldr	r2, [r3, #24]
 8006dc2:	f042 0204 	orr.w	r2, r2, #4
 8006dc6:	619a      	str	r2, [r3, #24]
 8006dc8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006dca:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dce:	f003 0304 	and.w	r3, r3, #4
 8006dd2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dd4:	a906      	add	r1, sp, #24
 8006dd6:	4829      	ldr	r0, [pc, #164]	; (8006e7c <HAL_UART_MspInit+0x168>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dd8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006dda:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ddc:	f7fa fd70 	bl	80018c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006de0:	2300      	movs	r3, #0
 8006de2:	2208      	movs	r2, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006de4:	a906      	add	r1, sp, #24
 8006de6:	4825      	ldr	r0, [pc, #148]	; (8006e7c <HAL_UART_MspInit+0x168>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006de8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dec:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dee:	f7fa fd67 	bl	80018c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8006df2:	4622      	mov	r2, r4
 8006df4:	2105      	movs	r1, #5
 8006df6:	2026      	movs	r0, #38	; 0x26
 8006df8:	f7fa fa80 	bl	80012fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006dfc:	2026      	movs	r0, #38	; 0x26
 8006dfe:	f7fa fab5 	bl	800136c <HAL_NVIC_EnableIRQ>
}
 8006e02:	b00b      	add	sp, #44	; 0x2c
 8006e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006e06:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006e0a:	2102      	movs	r1, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006e0c:	2503      	movs	r5, #3
    __HAL_RCC_USART3_CLK_ENABLE();
 8006e0e:	4b1a      	ldr	r3, [pc, #104]	; (8006e78 <HAL_UART_MspInit+0x164>)
 8006e10:	69da      	ldr	r2, [r3, #28]
 8006e12:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006e16:	61da      	str	r2, [r3, #28]
 8006e18:	69da      	ldr	r2, [r3, #28]
 8006e1a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8006e1e:	9204      	str	r2, [sp, #16]
 8006e20:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e22:	699a      	ldr	r2, [r3, #24]
 8006e24:	f042 0208 	orr.w	r2, r2, #8
 8006e28:	619a      	str	r2, [r3, #24]
 8006e2a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006e2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e30:	f003 0308 	and.w	r3, r3, #8
 8006e34:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e36:	a906      	add	r1, sp, #24
 8006e38:	4811      	ldr	r0, [pc, #68]	; (8006e80 <HAL_UART_MspInit+0x16c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e3a:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006e3c:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e3e:	f7fa fd3f 	bl	80018c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006e42:	2300      	movs	r3, #0
 8006e44:	f44f 6200 	mov.w	r2, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e48:	a906      	add	r1, sp, #24
 8006e4a:	480d      	ldr	r0, [pc, #52]	; (8006e80 <HAL_UART_MspInit+0x16c>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006e4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e50:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e52:	f7fa fd35 	bl	80018c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006e56:	4622      	mov	r2, r4
 8006e58:	2105      	movs	r1, #5
 8006e5a:	2027      	movs	r0, #39	; 0x27
 8006e5c:	f7fa fa4e 	bl	80012fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006e60:	2027      	movs	r0, #39	; 0x27
 8006e62:	f7fa fa83 	bl	800136c <HAL_NVIC_EnableIRQ>
}
 8006e66:	b00b      	add	sp, #44	; 0x2c
 8006e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	40013800 	.word	0x40013800
 8006e70:	40004400 	.word	0x40004400
 8006e74:	40004800 	.word	0x40004800
 8006e78:	40021000 	.word	0x40021000
 8006e7c:	40010800 	.word	0x40010800
 8006e80:	40010c00 	.word	0x40010c00

08006e84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006e84:	b570      	push	{r4, r5, r6, lr}
 8006e86:	4601      	mov	r1, r0
 8006e88:	b088      	sub	sp, #32
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	201c      	movs	r0, #28
 8006e8e:	f7fa fa35 	bl	80012fc <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006e92:	201c      	movs	r0, #28
 8006e94:	f7fa fa6a 	bl	800136c <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8006e98:	4b16      	ldr	r3, [pc, #88]	; (8006ef4 <HAL_InitTick+0x70>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006e9a:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM2_CLK_ENABLE();
 8006e9c:	69da      	ldr	r2, [r3, #28]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006e9e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8006ea0:	f042 0201 	orr.w	r2, r2, #1
 8006ea4:	61da      	str	r2, [r3, #28]
 8006ea6:	69db      	ldr	r3, [r3, #28]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8006ea8:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  __HAL_RCC_TIM2_CLK_ENABLE();
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	9302      	str	r3, [sp, #8]
 8006eb2:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006eb4:	f7fb fbca 	bl	800264c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006eb8:	f7fb fba8 	bl	800260c <HAL_RCC_GetPCLK1Freq>
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
  htim2.Init.Prescaler = uwPrescalerValue;
  htim2.Init.ClockDivision = 0;
 8006ebc:	2200      	movs	r2, #0
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8006ebe:	f240 31e7 	movw	r1, #999	; 0x3e7
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006ec2:	4e0d      	ldr	r6, [pc, #52]	; (8006ef8 <HAL_InitTick+0x74>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006ec4:	0043      	lsls	r3, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006ec6:	fba6 0303 	umull	r0, r3, r6, r3
  htim2.Instance = TIM2;
 8006eca:	4c0c      	ldr	r4, [pc, #48]	; (8006efc <HAL_InitTick+0x78>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006ecc:	0c9b      	lsrs	r3, r3, #18
 8006ece:	3b01      	subs	r3, #1
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8006ed0:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 8006ed2:	e9c4 5300 	strd	r5, r3, [r4]
  htim2.Init.ClockDivision = 0;
 8006ed6:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006eda:	60a2      	str	r2, [r4, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8006edc:	f7fb fcb0 	bl	8002840 <HAL_TIM_Base_Init>
 8006ee0:	b110      	cbz	r0, 8006ee8 <HAL_InitTick+0x64>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
  }

  /* Return function status */
  return HAL_ERROR;
 8006ee2:	2001      	movs	r0, #1
}
 8006ee4:	b008      	add	sp, #32
 8006ee6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_TIM_Base_Start_IT(&htim2);
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f7fb fd15 	bl	8002918 <HAL_TIM_Base_Start_IT>
}
 8006eee:	b008      	add	sp, #32
 8006ef0:	bd70      	pop	{r4, r5, r6, pc}
 8006ef2:	bf00      	nop
 8006ef4:	40021000 	.word	0x40021000
 8006ef8:	431bde83 	.word	0x431bde83
 8006efc:	20002bf8 	.word	0x20002bf8

08006f00 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop

08006f04 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006f04:	e7fe      	b.n	8006f04 <HardFault_Handler>
 8006f06:	bf00      	nop

08006f08 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006f08:	e7fe      	b.n	8006f08 <MemManage_Handler>
 8006f0a:	bf00      	nop

08006f0c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006f0c:	e7fe      	b.n	8006f0c <BusFault_Handler>
 8006f0e:	bf00      	nop

08006f10 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006f10:	e7fe      	b.n	8006f10 <UsageFault_Handler>
 8006f12:	bf00      	nop

08006f14 <DebugMon_Handler>:
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop

08006f18 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006f18:	4801      	ldr	r0, [pc, #4]	; (8006f20 <DMA1_Channel1_IRQHandler+0x8>)
 8006f1a:	f7fa bb7d 	b.w	8001618 <HAL_DMA_IRQHandler>
 8006f1e:	bf00      	nop
 8006f20:	20002b20 	.word	0x20002b20

08006f24 <TIM1_UP_IRQHandler>:
  */
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	//HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
	timer++;
 8006f24:	4a0c      	ldr	r2, [pc, #48]	; (8006f58 <TIM1_UP_IRQHandler+0x34>)
{
 8006f26:	b508      	push	{r3, lr}
	timer++;
 8006f28:	8813      	ldrh	r3, [r2, #0]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	b29b      	uxth	r3, r3
	if (timer >= 100){
 8006f2e:	2b63      	cmp	r3, #99	; 0x63
 8006f30:	d805      	bhi.n	8006f3e <TIM1_UP_IRQHandler+0x1a>
	timer++;
 8006f32:	8013      	strh	r3, [r2, #0]
		//timerMult++;
		HAL_GPIO_TogglePin(TAG_A_O_GPIO_Port, TAG_A_O_Pin);
		WifirecData();
	}
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006f34:	4809      	ldr	r0, [pc, #36]	; (8006f5c <TIM1_UP_IRQHandler+0x38>)
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8006f36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim1);
 8006f3a:	f7fb bfb3 	b.w	8002ea4 <HAL_TIM_IRQHandler>
		timer = 0;
 8006f3e:	2300      	movs	r3, #0
		HAL_GPIO_TogglePin(TAG_A_O_GPIO_Port, TAG_A_O_Pin);
 8006f40:	2180      	movs	r1, #128	; 0x80
 8006f42:	4807      	ldr	r0, [pc, #28]	; (8006f60 <TIM1_UP_IRQHandler+0x3c>)
		timer = 0;
 8006f44:	8013      	strh	r3, [r2, #0]
		HAL_GPIO_TogglePin(TAG_A_O_GPIO_Port, TAG_A_O_Pin);
 8006f46:	f7fa fded 	bl	8001b24 <HAL_GPIO_TogglePin>
		WifirecData();
 8006f4a:	f7fe ffe3 	bl	8005f14 <WifirecData>
}
 8006f4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim1);
 8006f52:	4802      	ldr	r0, [pc, #8]	; (8006f5c <TIM1_UP_IRQHandler+0x38>)
 8006f54:	f7fb bfa6 	b.w	8002ea4 <HAL_TIM_IRQHandler>
 8006f58:	20002958 	.word	0x20002958
 8006f5c:	20002b64 	.word	0x20002b64
 8006f60:	40010800 	.word	0x40010800

08006f64 <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006f64:	4801      	ldr	r0, [pc, #4]	; (8006f6c <TIM1_CC_IRQHandler+0x8>)
 8006f66:	f7fb bf9d 	b.w	8002ea4 <HAL_TIM_IRQHandler>
 8006f6a:	bf00      	nop
 8006f6c:	20002b64 	.word	0x20002b64

08006f70 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006f70:	4801      	ldr	r0, [pc, #4]	; (8006f78 <TIM2_IRQHandler+0x8>)
 8006f72:	f7fb bf97 	b.w	8002ea4 <HAL_TIM_IRQHandler>
 8006f76:	bf00      	nop
 8006f78:	20002bf8 	.word	0x20002bf8

08006f7c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006f7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8006f7e:	4805      	ldr	r0, [pc, #20]	; (8006f94 <TIM3_IRQHandler+0x18>)
 8006f80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f84:	f7fa fdce 	bl	8001b24 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006f88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim3);
 8006f8c:	4802      	ldr	r0, [pc, #8]	; (8006f98 <TIM3_IRQHandler+0x1c>)
 8006f8e:	f7fb bf89 	b.w	8002ea4 <HAL_TIM_IRQHandler>
 8006f92:	bf00      	nop
 8006f94:	40011000 	.word	0x40011000
 8006f98:	200029f4 	.word	0x200029f4

08006f9c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006f9c:	4801      	ldr	r0, [pc, #4]	; (8006fa4 <USART1_IRQHandler+0x8>)
 8006f9e:	f7fc b9f1 	b.w	8003384 <HAL_UART_IRQHandler>
 8006fa2:	bf00      	nop
 8006fa4:	20002ac4 	.word	0x20002ac4

08006fa8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006fa8:	4801      	ldr	r0, [pc, #4]	; (8006fb0 <USART2_IRQHandler+0x8>)
 8006faa:	f7fc b9eb 	b.w	8003384 <HAL_UART_IRQHandler>
 8006fae:	bf00      	nop
 8006fb0:	20002bb0 	.word	0x20002bb0

08006fb4 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006fb4:	4801      	ldr	r0, [pc, #4]	; (8006fbc <USART3_IRQHandler+0x8>)
 8006fb6:	f7fc b9e5 	b.w	8003384 <HAL_UART_IRQHandler>
 8006fba:	bf00      	nop
 8006fbc:	2000295c 	.word	0x2000295c

08006fc0 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006fc0:	4a0c      	ldr	r2, [pc, #48]	; (8006ff4 <_sbrk+0x34>)
{
 8006fc2:	b508      	push	{r3, lr}
 8006fc4:	4603      	mov	r3, r0
	if (heap_end == 0)
 8006fc6:	6810      	ldr	r0, [r2, #0]
 8006fc8:	b128      	cbz	r0, 8006fd6 <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8006fca:	4669      	mov	r1, sp
 8006fcc:	4403      	add	r3, r0
 8006fce:	428b      	cmp	r3, r1
 8006fd0:	d808      	bhi.n	8006fe4 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8006fd2:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8006fd4:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8006fd6:	4908      	ldr	r1, [pc, #32]	; (8006ff8 <_sbrk+0x38>)
 8006fd8:	4608      	mov	r0, r1
 8006fda:	6011      	str	r1, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8006fdc:	4669      	mov	r1, sp
 8006fde:	4403      	add	r3, r0
 8006fe0:	428b      	cmp	r3, r1
 8006fe2:	d9f6      	bls.n	8006fd2 <_sbrk+0x12>
		errno = ENOMEM;
 8006fe4:	f000 f858 	bl	8007098 <__errno>
 8006fe8:	220c      	movs	r2, #12
 8006fea:	4603      	mov	r3, r0
		return (caddr_t) -1;
 8006fec:	f04f 30ff 	mov.w	r0, #4294967295
		errno = ENOMEM;
 8006ff0:	601a      	str	r2, [r3, #0]
}
 8006ff2:	bd08      	pop	{r3, pc}
 8006ff4:	2000188c 	.word	0x2000188c
 8006ff8:	20002c50 	.word	0x20002c50

08006ffc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006ffc:	b430      	push	{r4, r5}

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006ffe:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8007002:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR |= 0x00000001U;
 8007006:	4b0e      	ldr	r3, [pc, #56]	; (8007040 <SystemInit+0x44>)
  RCC->CFGR &= 0xF8FF0000U;
 8007008:	4a0e      	ldr	r2, [pc, #56]	; (8007044 <SystemInit+0x48>)
  RCC->CR |= 0x00000001U;
 800700a:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800700c:	480e      	ldr	r0, [pc, #56]	; (8007048 <SystemInit+0x4c>)
  RCC->CR |= 0x00000001U;
 800700e:	f041 0101 	orr.w	r1, r1, #1
 8007012:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= 0xF8FF0000U;
 8007014:	6859      	ldr	r1, [r3, #4]
 8007016:	400a      	ands	r2, r1
 8007018:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8007020:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007024:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800702c:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8007034:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000U;
 8007036:	609d      	str	r5, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8007038:	6084      	str	r4, [r0, #8]
#endif 
}
 800703a:	bc30      	pop	{r4, r5}
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	40021000 	.word	0x40021000
 8007044:	f8ff0000 	.word	0xf8ff0000
 8007048:	e000ed00 	.word	0xe000ed00

0800704c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800704c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800704e:	e003      	b.n	8007058 <LoopCopyDataInit>

08007050 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8007050:	4b0b      	ldr	r3, [pc, #44]	; (8007080 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8007052:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8007054:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8007056:	3104      	adds	r1, #4

08007058 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007058:	480a      	ldr	r0, [pc, #40]	; (8007084 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800705a:	4b0b      	ldr	r3, [pc, #44]	; (8007088 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800705c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800705e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007060:	d3f6      	bcc.n	8007050 <CopyDataInit>
  ldr r2, =_sbss
 8007062:	4a0a      	ldr	r2, [pc, #40]	; (800708c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8007064:	e002      	b.n	800706c <LoopFillZerobss>

08007066 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8007066:	2300      	movs	r3, #0
  str r3, [r2], #4
 8007068:	f842 3b04 	str.w	r3, [r2], #4

0800706c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800706c:	4b08      	ldr	r3, [pc, #32]	; (8007090 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800706e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8007070:	d3f9      	bcc.n	8007066 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007072:	f7ff ffc3 	bl	8006ffc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007076:	f000 f815 	bl	80070a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800707a:	f7ff f899 	bl	80061b0 <main>
  bx lr
 800707e:	4770      	bx	lr
  ldr r3, =_sidata
 8007080:	08007e30 	.word	0x08007e30
  ldr r0, =_sdata
 8007084:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8007088:	2000033c 	.word	0x2000033c
  ldr r2, =_sbss
 800708c:	2000033c 	.word	0x2000033c
  ldr r3, = _ebss
 8007090:	20002c50 	.word	0x20002c50

08007094 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007094:	e7fe      	b.n	8007094 <ADC1_2_IRQHandler>
	...

08007098 <__errno>:
 8007098:	4b01      	ldr	r3, [pc, #4]	; (80070a0 <__errno+0x8>)
 800709a:	6818      	ldr	r0, [r3, #0]
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	200002d8 	.word	0x200002d8

080070a4 <__libc_init_array>:
 80070a4:	b570      	push	{r4, r5, r6, lr}
 80070a6:	2600      	movs	r6, #0
 80070a8:	4d0c      	ldr	r5, [pc, #48]	; (80070dc <__libc_init_array+0x38>)
 80070aa:	4c0d      	ldr	r4, [pc, #52]	; (80070e0 <__libc_init_array+0x3c>)
 80070ac:	1b64      	subs	r4, r4, r5
 80070ae:	10a4      	asrs	r4, r4, #2
 80070b0:	42a6      	cmp	r6, r4
 80070b2:	d109      	bne.n	80070c8 <__libc_init_array+0x24>
 80070b4:	f000 fcda 	bl	8007a6c <_init>
 80070b8:	2600      	movs	r6, #0
 80070ba:	4d0a      	ldr	r5, [pc, #40]	; (80070e4 <__libc_init_array+0x40>)
 80070bc:	4c0a      	ldr	r4, [pc, #40]	; (80070e8 <__libc_init_array+0x44>)
 80070be:	1b64      	subs	r4, r4, r5
 80070c0:	10a4      	asrs	r4, r4, #2
 80070c2:	42a6      	cmp	r6, r4
 80070c4:	d105      	bne.n	80070d2 <__libc_init_array+0x2e>
 80070c6:	bd70      	pop	{r4, r5, r6, pc}
 80070c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80070cc:	4798      	blx	r3
 80070ce:	3601      	adds	r6, #1
 80070d0:	e7ee      	b.n	80070b0 <__libc_init_array+0xc>
 80070d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80070d6:	4798      	blx	r3
 80070d8:	3601      	adds	r6, #1
 80070da:	e7f2      	b.n	80070c2 <__libc_init_array+0x1e>
 80070dc:	08007e28 	.word	0x08007e28
 80070e0:	08007e28 	.word	0x08007e28
 80070e4:	08007e28 	.word	0x08007e28
 80070e8:	08007e2c 	.word	0x08007e2c

080070ec <__itoa>:
 80070ec:	1e93      	subs	r3, r2, #2
 80070ee:	2b22      	cmp	r3, #34	; 0x22
 80070f0:	b510      	push	{r4, lr}
 80070f2:	460c      	mov	r4, r1
 80070f4:	d904      	bls.n	8007100 <__itoa+0x14>
 80070f6:	2300      	movs	r3, #0
 80070f8:	461c      	mov	r4, r3
 80070fa:	700b      	strb	r3, [r1, #0]
 80070fc:	4620      	mov	r0, r4
 80070fe:	bd10      	pop	{r4, pc}
 8007100:	2a0a      	cmp	r2, #10
 8007102:	d109      	bne.n	8007118 <__itoa+0x2c>
 8007104:	2800      	cmp	r0, #0
 8007106:	da07      	bge.n	8007118 <__itoa+0x2c>
 8007108:	232d      	movs	r3, #45	; 0x2d
 800710a:	700b      	strb	r3, [r1, #0]
 800710c:	2101      	movs	r1, #1
 800710e:	4240      	negs	r0, r0
 8007110:	4421      	add	r1, r4
 8007112:	f000 f85d 	bl	80071d0 <__utoa>
 8007116:	e7f1      	b.n	80070fc <__itoa+0x10>
 8007118:	2100      	movs	r1, #0
 800711a:	e7f9      	b.n	8007110 <__itoa+0x24>

0800711c <itoa>:
 800711c:	f7ff bfe6 	b.w	80070ec <__itoa>

08007120 <memcpy>:
 8007120:	440a      	add	r2, r1
 8007122:	4291      	cmp	r1, r2
 8007124:	f100 33ff 	add.w	r3, r0, #4294967295
 8007128:	d100      	bne.n	800712c <memcpy+0xc>
 800712a:	4770      	bx	lr
 800712c:	b510      	push	{r4, lr}
 800712e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007132:	4291      	cmp	r1, r2
 8007134:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007138:	d1f9      	bne.n	800712e <memcpy+0xe>
 800713a:	bd10      	pop	{r4, pc}

0800713c <siprintf>:
 800713c:	b40e      	push	{r1, r2, r3}
 800713e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007142:	b500      	push	{lr}
 8007144:	b09c      	sub	sp, #112	; 0x70
 8007146:	ab1d      	add	r3, sp, #116	; 0x74
 8007148:	9002      	str	r0, [sp, #8]
 800714a:	9006      	str	r0, [sp, #24]
 800714c:	9107      	str	r1, [sp, #28]
 800714e:	9104      	str	r1, [sp, #16]
 8007150:	4808      	ldr	r0, [pc, #32]	; (8007174 <siprintf+0x38>)
 8007152:	4909      	ldr	r1, [pc, #36]	; (8007178 <siprintf+0x3c>)
 8007154:	f853 2b04 	ldr.w	r2, [r3], #4
 8007158:	9105      	str	r1, [sp, #20]
 800715a:	6800      	ldr	r0, [r0, #0]
 800715c:	a902      	add	r1, sp, #8
 800715e:	9301      	str	r3, [sp, #4]
 8007160:	f000 f8d4 	bl	800730c <_svfiprintf_r>
 8007164:	2200      	movs	r2, #0
 8007166:	9b02      	ldr	r3, [sp, #8]
 8007168:	701a      	strb	r2, [r3, #0]
 800716a:	b01c      	add	sp, #112	; 0x70
 800716c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007170:	b003      	add	sp, #12
 8007172:	4770      	bx	lr
 8007174:	200002d8 	.word	0x200002d8
 8007178:	ffff0208 	.word	0xffff0208

0800717c <stpcpy>:
 800717c:	4603      	mov	r3, r0
 800717e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007182:	4618      	mov	r0, r3
 8007184:	f803 2b01 	strb.w	r2, [r3], #1
 8007188:	2a00      	cmp	r2, #0
 800718a:	d1f8      	bne.n	800717e <stpcpy+0x2>
 800718c:	4770      	bx	lr

0800718e <strcat>:
 800718e:	4602      	mov	r2, r0
 8007190:	b510      	push	{r4, lr}
 8007192:	7814      	ldrb	r4, [r2, #0]
 8007194:	4613      	mov	r3, r2
 8007196:	3201      	adds	r2, #1
 8007198:	2c00      	cmp	r4, #0
 800719a:	d1fa      	bne.n	8007192 <strcat+0x4>
 800719c:	3b01      	subs	r3, #1
 800719e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071a6:	2a00      	cmp	r2, #0
 80071a8:	d1f9      	bne.n	800719e <strcat+0x10>
 80071aa:	bd10      	pop	{r4, pc}

080071ac <strncmp>:
 80071ac:	b510      	push	{r4, lr}
 80071ae:	b16a      	cbz	r2, 80071cc <strncmp+0x20>
 80071b0:	3901      	subs	r1, #1
 80071b2:	1884      	adds	r4, r0, r2
 80071b4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80071b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80071bc:	4293      	cmp	r3, r2
 80071be:	d103      	bne.n	80071c8 <strncmp+0x1c>
 80071c0:	42a0      	cmp	r0, r4
 80071c2:	d001      	beq.n	80071c8 <strncmp+0x1c>
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1f5      	bne.n	80071b4 <strncmp+0x8>
 80071c8:	1a98      	subs	r0, r3, r2
 80071ca:	bd10      	pop	{r4, pc}
 80071cc:	4610      	mov	r0, r2
 80071ce:	e7fc      	b.n	80071ca <strncmp+0x1e>

080071d0 <__utoa>:
 80071d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071d2:	b08b      	sub	sp, #44	; 0x2c
 80071d4:	4605      	mov	r5, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	466e      	mov	r6, sp
 80071da:	4c1d      	ldr	r4, [pc, #116]	; (8007250 <__utoa+0x80>)
 80071dc:	f104 0c20 	add.w	ip, r4, #32
 80071e0:	4637      	mov	r7, r6
 80071e2:	6820      	ldr	r0, [r4, #0]
 80071e4:	6861      	ldr	r1, [r4, #4]
 80071e6:	3408      	adds	r4, #8
 80071e8:	c703      	stmia	r7!, {r0, r1}
 80071ea:	4564      	cmp	r4, ip
 80071ec:	463e      	mov	r6, r7
 80071ee:	d1f7      	bne.n	80071e0 <__utoa+0x10>
 80071f0:	7921      	ldrb	r1, [r4, #4]
 80071f2:	6820      	ldr	r0, [r4, #0]
 80071f4:	7139      	strb	r1, [r7, #4]
 80071f6:	1e91      	subs	r1, r2, #2
 80071f8:	2922      	cmp	r1, #34	; 0x22
 80071fa:	6038      	str	r0, [r7, #0]
 80071fc:	f04f 0100 	mov.w	r1, #0
 8007200:	d904      	bls.n	800720c <__utoa+0x3c>
 8007202:	7019      	strb	r1, [r3, #0]
 8007204:	460b      	mov	r3, r1
 8007206:	4618      	mov	r0, r3
 8007208:	b00b      	add	sp, #44	; 0x2c
 800720a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800720c:	1e58      	subs	r0, r3, #1
 800720e:	4684      	mov	ip, r0
 8007210:	fbb5 f7f2 	udiv	r7, r5, r2
 8007214:	fb02 5617 	mls	r6, r2, r7, r5
 8007218:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800721c:	4476      	add	r6, lr
 800721e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007222:	460c      	mov	r4, r1
 8007224:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007228:	462e      	mov	r6, r5
 800722a:	42b2      	cmp	r2, r6
 800722c:	463d      	mov	r5, r7
 800722e:	f101 0101 	add.w	r1, r1, #1
 8007232:	d9ed      	bls.n	8007210 <__utoa+0x40>
 8007234:	2200      	movs	r2, #0
 8007236:	545a      	strb	r2, [r3, r1]
 8007238:	1919      	adds	r1, r3, r4
 800723a:	1aa5      	subs	r5, r4, r2
 800723c:	42aa      	cmp	r2, r5
 800723e:	dae2      	bge.n	8007206 <__utoa+0x36>
 8007240:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007244:	780e      	ldrb	r6, [r1, #0]
 8007246:	3201      	adds	r2, #1
 8007248:	7006      	strb	r6, [r0, #0]
 800724a:	f801 5901 	strb.w	r5, [r1], #-1
 800724e:	e7f4      	b.n	800723a <__utoa+0x6a>
 8007250:	08007dce 	.word	0x08007dce

08007254 <__ssputs_r>:
 8007254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007258:	688e      	ldr	r6, [r1, #8]
 800725a:	4682      	mov	sl, r0
 800725c:	429e      	cmp	r6, r3
 800725e:	460c      	mov	r4, r1
 8007260:	4690      	mov	r8, r2
 8007262:	461f      	mov	r7, r3
 8007264:	d838      	bhi.n	80072d8 <__ssputs_r+0x84>
 8007266:	898a      	ldrh	r2, [r1, #12]
 8007268:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800726c:	d032      	beq.n	80072d4 <__ssputs_r+0x80>
 800726e:	6825      	ldr	r5, [r4, #0]
 8007270:	6909      	ldr	r1, [r1, #16]
 8007272:	3301      	adds	r3, #1
 8007274:	eba5 0901 	sub.w	r9, r5, r1
 8007278:	6965      	ldr	r5, [r4, #20]
 800727a:	444b      	add	r3, r9
 800727c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007280:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007284:	106d      	asrs	r5, r5, #1
 8007286:	429d      	cmp	r5, r3
 8007288:	bf38      	it	cc
 800728a:	461d      	movcc	r5, r3
 800728c:	0553      	lsls	r3, r2, #21
 800728e:	d531      	bpl.n	80072f4 <__ssputs_r+0xa0>
 8007290:	4629      	mov	r1, r5
 8007292:	f000 fb45 	bl	8007920 <_malloc_r>
 8007296:	4606      	mov	r6, r0
 8007298:	b950      	cbnz	r0, 80072b0 <__ssputs_r+0x5c>
 800729a:	230c      	movs	r3, #12
 800729c:	f04f 30ff 	mov.w	r0, #4294967295
 80072a0:	f8ca 3000 	str.w	r3, [sl]
 80072a4:	89a3      	ldrh	r3, [r4, #12]
 80072a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072aa:	81a3      	strh	r3, [r4, #12]
 80072ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b0:	464a      	mov	r2, r9
 80072b2:	6921      	ldr	r1, [r4, #16]
 80072b4:	f7ff ff34 	bl	8007120 <memcpy>
 80072b8:	89a3      	ldrh	r3, [r4, #12]
 80072ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072c2:	81a3      	strh	r3, [r4, #12]
 80072c4:	6126      	str	r6, [r4, #16]
 80072c6:	444e      	add	r6, r9
 80072c8:	6026      	str	r6, [r4, #0]
 80072ca:	463e      	mov	r6, r7
 80072cc:	6165      	str	r5, [r4, #20]
 80072ce:	eba5 0509 	sub.w	r5, r5, r9
 80072d2:	60a5      	str	r5, [r4, #8]
 80072d4:	42be      	cmp	r6, r7
 80072d6:	d900      	bls.n	80072da <__ssputs_r+0x86>
 80072d8:	463e      	mov	r6, r7
 80072da:	4632      	mov	r2, r6
 80072dc:	4641      	mov	r1, r8
 80072de:	6820      	ldr	r0, [r4, #0]
 80072e0:	f000 fab8 	bl	8007854 <memmove>
 80072e4:	68a3      	ldr	r3, [r4, #8]
 80072e6:	6822      	ldr	r2, [r4, #0]
 80072e8:	1b9b      	subs	r3, r3, r6
 80072ea:	4432      	add	r2, r6
 80072ec:	2000      	movs	r0, #0
 80072ee:	60a3      	str	r3, [r4, #8]
 80072f0:	6022      	str	r2, [r4, #0]
 80072f2:	e7db      	b.n	80072ac <__ssputs_r+0x58>
 80072f4:	462a      	mov	r2, r5
 80072f6:	f000 fb6d 	bl	80079d4 <_realloc_r>
 80072fa:	4606      	mov	r6, r0
 80072fc:	2800      	cmp	r0, #0
 80072fe:	d1e1      	bne.n	80072c4 <__ssputs_r+0x70>
 8007300:	4650      	mov	r0, sl
 8007302:	6921      	ldr	r1, [r4, #16]
 8007304:	f000 fac0 	bl	8007888 <_free_r>
 8007308:	e7c7      	b.n	800729a <__ssputs_r+0x46>
	...

0800730c <_svfiprintf_r>:
 800730c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007310:	4698      	mov	r8, r3
 8007312:	898b      	ldrh	r3, [r1, #12]
 8007314:	4607      	mov	r7, r0
 8007316:	061b      	lsls	r3, r3, #24
 8007318:	460d      	mov	r5, r1
 800731a:	4614      	mov	r4, r2
 800731c:	b09d      	sub	sp, #116	; 0x74
 800731e:	d50e      	bpl.n	800733e <_svfiprintf_r+0x32>
 8007320:	690b      	ldr	r3, [r1, #16]
 8007322:	b963      	cbnz	r3, 800733e <_svfiprintf_r+0x32>
 8007324:	2140      	movs	r1, #64	; 0x40
 8007326:	f000 fafb 	bl	8007920 <_malloc_r>
 800732a:	6028      	str	r0, [r5, #0]
 800732c:	6128      	str	r0, [r5, #16]
 800732e:	b920      	cbnz	r0, 800733a <_svfiprintf_r+0x2e>
 8007330:	230c      	movs	r3, #12
 8007332:	603b      	str	r3, [r7, #0]
 8007334:	f04f 30ff 	mov.w	r0, #4294967295
 8007338:	e0d1      	b.n	80074de <_svfiprintf_r+0x1d2>
 800733a:	2340      	movs	r3, #64	; 0x40
 800733c:	616b      	str	r3, [r5, #20]
 800733e:	2300      	movs	r3, #0
 8007340:	9309      	str	r3, [sp, #36]	; 0x24
 8007342:	2320      	movs	r3, #32
 8007344:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007348:	2330      	movs	r3, #48	; 0x30
 800734a:	f04f 0901 	mov.w	r9, #1
 800734e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007352:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80074f8 <_svfiprintf_r+0x1ec>
 8007356:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800735a:	4623      	mov	r3, r4
 800735c:	469a      	mov	sl, r3
 800735e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007362:	b10a      	cbz	r2, 8007368 <_svfiprintf_r+0x5c>
 8007364:	2a25      	cmp	r2, #37	; 0x25
 8007366:	d1f9      	bne.n	800735c <_svfiprintf_r+0x50>
 8007368:	ebba 0b04 	subs.w	fp, sl, r4
 800736c:	d00b      	beq.n	8007386 <_svfiprintf_r+0x7a>
 800736e:	465b      	mov	r3, fp
 8007370:	4622      	mov	r2, r4
 8007372:	4629      	mov	r1, r5
 8007374:	4638      	mov	r0, r7
 8007376:	f7ff ff6d 	bl	8007254 <__ssputs_r>
 800737a:	3001      	adds	r0, #1
 800737c:	f000 80aa 	beq.w	80074d4 <_svfiprintf_r+0x1c8>
 8007380:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007382:	445a      	add	r2, fp
 8007384:	9209      	str	r2, [sp, #36]	; 0x24
 8007386:	f89a 3000 	ldrb.w	r3, [sl]
 800738a:	2b00      	cmp	r3, #0
 800738c:	f000 80a2 	beq.w	80074d4 <_svfiprintf_r+0x1c8>
 8007390:	2300      	movs	r3, #0
 8007392:	f04f 32ff 	mov.w	r2, #4294967295
 8007396:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800739a:	f10a 0a01 	add.w	sl, sl, #1
 800739e:	9304      	str	r3, [sp, #16]
 80073a0:	9307      	str	r3, [sp, #28]
 80073a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073a6:	931a      	str	r3, [sp, #104]	; 0x68
 80073a8:	4654      	mov	r4, sl
 80073aa:	2205      	movs	r2, #5
 80073ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073b0:	4851      	ldr	r0, [pc, #324]	; (80074f8 <_svfiprintf_r+0x1ec>)
 80073b2:	f000 fa41 	bl	8007838 <memchr>
 80073b6:	9a04      	ldr	r2, [sp, #16]
 80073b8:	b9d8      	cbnz	r0, 80073f2 <_svfiprintf_r+0xe6>
 80073ba:	06d0      	lsls	r0, r2, #27
 80073bc:	bf44      	itt	mi
 80073be:	2320      	movmi	r3, #32
 80073c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073c4:	0711      	lsls	r1, r2, #28
 80073c6:	bf44      	itt	mi
 80073c8:	232b      	movmi	r3, #43	; 0x2b
 80073ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073ce:	f89a 3000 	ldrb.w	r3, [sl]
 80073d2:	2b2a      	cmp	r3, #42	; 0x2a
 80073d4:	d015      	beq.n	8007402 <_svfiprintf_r+0xf6>
 80073d6:	4654      	mov	r4, sl
 80073d8:	2000      	movs	r0, #0
 80073da:	f04f 0c0a 	mov.w	ip, #10
 80073de:	9a07      	ldr	r2, [sp, #28]
 80073e0:	4621      	mov	r1, r4
 80073e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073e6:	3b30      	subs	r3, #48	; 0x30
 80073e8:	2b09      	cmp	r3, #9
 80073ea:	d94e      	bls.n	800748a <_svfiprintf_r+0x17e>
 80073ec:	b1b0      	cbz	r0, 800741c <_svfiprintf_r+0x110>
 80073ee:	9207      	str	r2, [sp, #28]
 80073f0:	e014      	b.n	800741c <_svfiprintf_r+0x110>
 80073f2:	eba0 0308 	sub.w	r3, r0, r8
 80073f6:	fa09 f303 	lsl.w	r3, r9, r3
 80073fa:	4313      	orrs	r3, r2
 80073fc:	46a2      	mov	sl, r4
 80073fe:	9304      	str	r3, [sp, #16]
 8007400:	e7d2      	b.n	80073a8 <_svfiprintf_r+0x9c>
 8007402:	9b03      	ldr	r3, [sp, #12]
 8007404:	1d19      	adds	r1, r3, #4
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	9103      	str	r1, [sp, #12]
 800740a:	2b00      	cmp	r3, #0
 800740c:	bfbb      	ittet	lt
 800740e:	425b      	neglt	r3, r3
 8007410:	f042 0202 	orrlt.w	r2, r2, #2
 8007414:	9307      	strge	r3, [sp, #28]
 8007416:	9307      	strlt	r3, [sp, #28]
 8007418:	bfb8      	it	lt
 800741a:	9204      	strlt	r2, [sp, #16]
 800741c:	7823      	ldrb	r3, [r4, #0]
 800741e:	2b2e      	cmp	r3, #46	; 0x2e
 8007420:	d10c      	bne.n	800743c <_svfiprintf_r+0x130>
 8007422:	7863      	ldrb	r3, [r4, #1]
 8007424:	2b2a      	cmp	r3, #42	; 0x2a
 8007426:	d135      	bne.n	8007494 <_svfiprintf_r+0x188>
 8007428:	9b03      	ldr	r3, [sp, #12]
 800742a:	3402      	adds	r4, #2
 800742c:	1d1a      	adds	r2, r3, #4
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	9203      	str	r2, [sp, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	bfb8      	it	lt
 8007436:	f04f 33ff 	movlt.w	r3, #4294967295
 800743a:	9305      	str	r3, [sp, #20]
 800743c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007508 <_svfiprintf_r+0x1fc>
 8007440:	2203      	movs	r2, #3
 8007442:	4650      	mov	r0, sl
 8007444:	7821      	ldrb	r1, [r4, #0]
 8007446:	f000 f9f7 	bl	8007838 <memchr>
 800744a:	b140      	cbz	r0, 800745e <_svfiprintf_r+0x152>
 800744c:	2340      	movs	r3, #64	; 0x40
 800744e:	eba0 000a 	sub.w	r0, r0, sl
 8007452:	fa03 f000 	lsl.w	r0, r3, r0
 8007456:	9b04      	ldr	r3, [sp, #16]
 8007458:	3401      	adds	r4, #1
 800745a:	4303      	orrs	r3, r0
 800745c:	9304      	str	r3, [sp, #16]
 800745e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007462:	2206      	movs	r2, #6
 8007464:	4825      	ldr	r0, [pc, #148]	; (80074fc <_svfiprintf_r+0x1f0>)
 8007466:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800746a:	f000 f9e5 	bl	8007838 <memchr>
 800746e:	2800      	cmp	r0, #0
 8007470:	d038      	beq.n	80074e4 <_svfiprintf_r+0x1d8>
 8007472:	4b23      	ldr	r3, [pc, #140]	; (8007500 <_svfiprintf_r+0x1f4>)
 8007474:	bb1b      	cbnz	r3, 80074be <_svfiprintf_r+0x1b2>
 8007476:	9b03      	ldr	r3, [sp, #12]
 8007478:	3307      	adds	r3, #7
 800747a:	f023 0307 	bic.w	r3, r3, #7
 800747e:	3308      	adds	r3, #8
 8007480:	9303      	str	r3, [sp, #12]
 8007482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007484:	4433      	add	r3, r6
 8007486:	9309      	str	r3, [sp, #36]	; 0x24
 8007488:	e767      	b.n	800735a <_svfiprintf_r+0x4e>
 800748a:	460c      	mov	r4, r1
 800748c:	2001      	movs	r0, #1
 800748e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007492:	e7a5      	b.n	80073e0 <_svfiprintf_r+0xd4>
 8007494:	2300      	movs	r3, #0
 8007496:	f04f 0c0a 	mov.w	ip, #10
 800749a:	4619      	mov	r1, r3
 800749c:	3401      	adds	r4, #1
 800749e:	9305      	str	r3, [sp, #20]
 80074a0:	4620      	mov	r0, r4
 80074a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074a6:	3a30      	subs	r2, #48	; 0x30
 80074a8:	2a09      	cmp	r2, #9
 80074aa:	d903      	bls.n	80074b4 <_svfiprintf_r+0x1a8>
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d0c5      	beq.n	800743c <_svfiprintf_r+0x130>
 80074b0:	9105      	str	r1, [sp, #20]
 80074b2:	e7c3      	b.n	800743c <_svfiprintf_r+0x130>
 80074b4:	4604      	mov	r4, r0
 80074b6:	2301      	movs	r3, #1
 80074b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80074bc:	e7f0      	b.n	80074a0 <_svfiprintf_r+0x194>
 80074be:	ab03      	add	r3, sp, #12
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	462a      	mov	r2, r5
 80074c4:	4638      	mov	r0, r7
 80074c6:	4b0f      	ldr	r3, [pc, #60]	; (8007504 <_svfiprintf_r+0x1f8>)
 80074c8:	a904      	add	r1, sp, #16
 80074ca:	f3af 8000 	nop.w
 80074ce:	1c42      	adds	r2, r0, #1
 80074d0:	4606      	mov	r6, r0
 80074d2:	d1d6      	bne.n	8007482 <_svfiprintf_r+0x176>
 80074d4:	89ab      	ldrh	r3, [r5, #12]
 80074d6:	065b      	lsls	r3, r3, #25
 80074d8:	f53f af2c 	bmi.w	8007334 <_svfiprintf_r+0x28>
 80074dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074de:	b01d      	add	sp, #116	; 0x74
 80074e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e4:	ab03      	add	r3, sp, #12
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	462a      	mov	r2, r5
 80074ea:	4638      	mov	r0, r7
 80074ec:	4b05      	ldr	r3, [pc, #20]	; (8007504 <_svfiprintf_r+0x1f8>)
 80074ee:	a904      	add	r1, sp, #16
 80074f0:	f000 f87c 	bl	80075ec <_printf_i>
 80074f4:	e7eb      	b.n	80074ce <_svfiprintf_r+0x1c2>
 80074f6:	bf00      	nop
 80074f8:	08007df3 	.word	0x08007df3
 80074fc:	08007dfd 	.word	0x08007dfd
 8007500:	00000000 	.word	0x00000000
 8007504:	08007255 	.word	0x08007255
 8007508:	08007df9 	.word	0x08007df9

0800750c <_printf_common>:
 800750c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007510:	4616      	mov	r6, r2
 8007512:	4699      	mov	r9, r3
 8007514:	688a      	ldr	r2, [r1, #8]
 8007516:	690b      	ldr	r3, [r1, #16]
 8007518:	4607      	mov	r7, r0
 800751a:	4293      	cmp	r3, r2
 800751c:	bfb8      	it	lt
 800751e:	4613      	movlt	r3, r2
 8007520:	6033      	str	r3, [r6, #0]
 8007522:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007526:	460c      	mov	r4, r1
 8007528:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800752c:	b10a      	cbz	r2, 8007532 <_printf_common+0x26>
 800752e:	3301      	adds	r3, #1
 8007530:	6033      	str	r3, [r6, #0]
 8007532:	6823      	ldr	r3, [r4, #0]
 8007534:	0699      	lsls	r1, r3, #26
 8007536:	bf42      	ittt	mi
 8007538:	6833      	ldrmi	r3, [r6, #0]
 800753a:	3302      	addmi	r3, #2
 800753c:	6033      	strmi	r3, [r6, #0]
 800753e:	6825      	ldr	r5, [r4, #0]
 8007540:	f015 0506 	ands.w	r5, r5, #6
 8007544:	d106      	bne.n	8007554 <_printf_common+0x48>
 8007546:	f104 0a19 	add.w	sl, r4, #25
 800754a:	68e3      	ldr	r3, [r4, #12]
 800754c:	6832      	ldr	r2, [r6, #0]
 800754e:	1a9b      	subs	r3, r3, r2
 8007550:	42ab      	cmp	r3, r5
 8007552:	dc28      	bgt.n	80075a6 <_printf_common+0x9a>
 8007554:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007558:	1e13      	subs	r3, r2, #0
 800755a:	6822      	ldr	r2, [r4, #0]
 800755c:	bf18      	it	ne
 800755e:	2301      	movne	r3, #1
 8007560:	0692      	lsls	r2, r2, #26
 8007562:	d42d      	bmi.n	80075c0 <_printf_common+0xb4>
 8007564:	4649      	mov	r1, r9
 8007566:	4638      	mov	r0, r7
 8007568:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800756c:	47c0      	blx	r8
 800756e:	3001      	adds	r0, #1
 8007570:	d020      	beq.n	80075b4 <_printf_common+0xa8>
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	68e5      	ldr	r5, [r4, #12]
 8007576:	f003 0306 	and.w	r3, r3, #6
 800757a:	2b04      	cmp	r3, #4
 800757c:	bf18      	it	ne
 800757e:	2500      	movne	r5, #0
 8007580:	6832      	ldr	r2, [r6, #0]
 8007582:	f04f 0600 	mov.w	r6, #0
 8007586:	68a3      	ldr	r3, [r4, #8]
 8007588:	bf08      	it	eq
 800758a:	1aad      	subeq	r5, r5, r2
 800758c:	6922      	ldr	r2, [r4, #16]
 800758e:	bf08      	it	eq
 8007590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007594:	4293      	cmp	r3, r2
 8007596:	bfc4      	itt	gt
 8007598:	1a9b      	subgt	r3, r3, r2
 800759a:	18ed      	addgt	r5, r5, r3
 800759c:	341a      	adds	r4, #26
 800759e:	42b5      	cmp	r5, r6
 80075a0:	d11a      	bne.n	80075d8 <_printf_common+0xcc>
 80075a2:	2000      	movs	r0, #0
 80075a4:	e008      	b.n	80075b8 <_printf_common+0xac>
 80075a6:	2301      	movs	r3, #1
 80075a8:	4652      	mov	r2, sl
 80075aa:	4649      	mov	r1, r9
 80075ac:	4638      	mov	r0, r7
 80075ae:	47c0      	blx	r8
 80075b0:	3001      	adds	r0, #1
 80075b2:	d103      	bne.n	80075bc <_printf_common+0xb0>
 80075b4:	f04f 30ff 	mov.w	r0, #4294967295
 80075b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075bc:	3501      	adds	r5, #1
 80075be:	e7c4      	b.n	800754a <_printf_common+0x3e>
 80075c0:	2030      	movs	r0, #48	; 0x30
 80075c2:	18e1      	adds	r1, r4, r3
 80075c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075c8:	1c5a      	adds	r2, r3, #1
 80075ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075ce:	4422      	add	r2, r4
 80075d0:	3302      	adds	r3, #2
 80075d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075d6:	e7c5      	b.n	8007564 <_printf_common+0x58>
 80075d8:	2301      	movs	r3, #1
 80075da:	4622      	mov	r2, r4
 80075dc:	4649      	mov	r1, r9
 80075de:	4638      	mov	r0, r7
 80075e0:	47c0      	blx	r8
 80075e2:	3001      	adds	r0, #1
 80075e4:	d0e6      	beq.n	80075b4 <_printf_common+0xa8>
 80075e6:	3601      	adds	r6, #1
 80075e8:	e7d9      	b.n	800759e <_printf_common+0x92>
	...

080075ec <_printf_i>:
 80075ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075f0:	460c      	mov	r4, r1
 80075f2:	7e27      	ldrb	r7, [r4, #24]
 80075f4:	4691      	mov	r9, r2
 80075f6:	2f78      	cmp	r7, #120	; 0x78
 80075f8:	4680      	mov	r8, r0
 80075fa:	469a      	mov	sl, r3
 80075fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80075fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007602:	d807      	bhi.n	8007614 <_printf_i+0x28>
 8007604:	2f62      	cmp	r7, #98	; 0x62
 8007606:	d80a      	bhi.n	800761e <_printf_i+0x32>
 8007608:	2f00      	cmp	r7, #0
 800760a:	f000 80d9 	beq.w	80077c0 <_printf_i+0x1d4>
 800760e:	2f58      	cmp	r7, #88	; 0x58
 8007610:	f000 80a4 	beq.w	800775c <_printf_i+0x170>
 8007614:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007618:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800761c:	e03a      	b.n	8007694 <_printf_i+0xa8>
 800761e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007622:	2b15      	cmp	r3, #21
 8007624:	d8f6      	bhi.n	8007614 <_printf_i+0x28>
 8007626:	a001      	add	r0, pc, #4	; (adr r0, 800762c <_printf_i+0x40>)
 8007628:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800762c:	08007685 	.word	0x08007685
 8007630:	08007699 	.word	0x08007699
 8007634:	08007615 	.word	0x08007615
 8007638:	08007615 	.word	0x08007615
 800763c:	08007615 	.word	0x08007615
 8007640:	08007615 	.word	0x08007615
 8007644:	08007699 	.word	0x08007699
 8007648:	08007615 	.word	0x08007615
 800764c:	08007615 	.word	0x08007615
 8007650:	08007615 	.word	0x08007615
 8007654:	08007615 	.word	0x08007615
 8007658:	080077a7 	.word	0x080077a7
 800765c:	080076c9 	.word	0x080076c9
 8007660:	08007789 	.word	0x08007789
 8007664:	08007615 	.word	0x08007615
 8007668:	08007615 	.word	0x08007615
 800766c:	080077c9 	.word	0x080077c9
 8007670:	08007615 	.word	0x08007615
 8007674:	080076c9 	.word	0x080076c9
 8007678:	08007615 	.word	0x08007615
 800767c:	08007615 	.word	0x08007615
 8007680:	08007791 	.word	0x08007791
 8007684:	680b      	ldr	r3, [r1, #0]
 8007686:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800768a:	1d1a      	adds	r2, r3, #4
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	600a      	str	r2, [r1, #0]
 8007690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007694:	2301      	movs	r3, #1
 8007696:	e0a4      	b.n	80077e2 <_printf_i+0x1f6>
 8007698:	6825      	ldr	r5, [r4, #0]
 800769a:	6808      	ldr	r0, [r1, #0]
 800769c:	062e      	lsls	r6, r5, #24
 800769e:	f100 0304 	add.w	r3, r0, #4
 80076a2:	d50a      	bpl.n	80076ba <_printf_i+0xce>
 80076a4:	6805      	ldr	r5, [r0, #0]
 80076a6:	600b      	str	r3, [r1, #0]
 80076a8:	2d00      	cmp	r5, #0
 80076aa:	da03      	bge.n	80076b4 <_printf_i+0xc8>
 80076ac:	232d      	movs	r3, #45	; 0x2d
 80076ae:	426d      	negs	r5, r5
 80076b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076b4:	230a      	movs	r3, #10
 80076b6:	485e      	ldr	r0, [pc, #376]	; (8007830 <_printf_i+0x244>)
 80076b8:	e019      	b.n	80076ee <_printf_i+0x102>
 80076ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80076be:	6805      	ldr	r5, [r0, #0]
 80076c0:	600b      	str	r3, [r1, #0]
 80076c2:	bf18      	it	ne
 80076c4:	b22d      	sxthne	r5, r5
 80076c6:	e7ef      	b.n	80076a8 <_printf_i+0xbc>
 80076c8:	680b      	ldr	r3, [r1, #0]
 80076ca:	6825      	ldr	r5, [r4, #0]
 80076cc:	1d18      	adds	r0, r3, #4
 80076ce:	6008      	str	r0, [r1, #0]
 80076d0:	0628      	lsls	r0, r5, #24
 80076d2:	d501      	bpl.n	80076d8 <_printf_i+0xec>
 80076d4:	681d      	ldr	r5, [r3, #0]
 80076d6:	e002      	b.n	80076de <_printf_i+0xf2>
 80076d8:	0669      	lsls	r1, r5, #25
 80076da:	d5fb      	bpl.n	80076d4 <_printf_i+0xe8>
 80076dc:	881d      	ldrh	r5, [r3, #0]
 80076de:	2f6f      	cmp	r7, #111	; 0x6f
 80076e0:	bf0c      	ite	eq
 80076e2:	2308      	moveq	r3, #8
 80076e4:	230a      	movne	r3, #10
 80076e6:	4852      	ldr	r0, [pc, #328]	; (8007830 <_printf_i+0x244>)
 80076e8:	2100      	movs	r1, #0
 80076ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076ee:	6866      	ldr	r6, [r4, #4]
 80076f0:	2e00      	cmp	r6, #0
 80076f2:	bfa8      	it	ge
 80076f4:	6821      	ldrge	r1, [r4, #0]
 80076f6:	60a6      	str	r6, [r4, #8]
 80076f8:	bfa4      	itt	ge
 80076fa:	f021 0104 	bicge.w	r1, r1, #4
 80076fe:	6021      	strge	r1, [r4, #0]
 8007700:	b90d      	cbnz	r5, 8007706 <_printf_i+0x11a>
 8007702:	2e00      	cmp	r6, #0
 8007704:	d04d      	beq.n	80077a2 <_printf_i+0x1b6>
 8007706:	4616      	mov	r6, r2
 8007708:	fbb5 f1f3 	udiv	r1, r5, r3
 800770c:	fb03 5711 	mls	r7, r3, r1, r5
 8007710:	5dc7      	ldrb	r7, [r0, r7]
 8007712:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007716:	462f      	mov	r7, r5
 8007718:	42bb      	cmp	r3, r7
 800771a:	460d      	mov	r5, r1
 800771c:	d9f4      	bls.n	8007708 <_printf_i+0x11c>
 800771e:	2b08      	cmp	r3, #8
 8007720:	d10b      	bne.n	800773a <_printf_i+0x14e>
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	07df      	lsls	r7, r3, #31
 8007726:	d508      	bpl.n	800773a <_printf_i+0x14e>
 8007728:	6923      	ldr	r3, [r4, #16]
 800772a:	6861      	ldr	r1, [r4, #4]
 800772c:	4299      	cmp	r1, r3
 800772e:	bfde      	ittt	le
 8007730:	2330      	movle	r3, #48	; 0x30
 8007732:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007736:	f106 36ff 	addle.w	r6, r6, #4294967295
 800773a:	1b92      	subs	r2, r2, r6
 800773c:	6122      	str	r2, [r4, #16]
 800773e:	464b      	mov	r3, r9
 8007740:	4621      	mov	r1, r4
 8007742:	4640      	mov	r0, r8
 8007744:	f8cd a000 	str.w	sl, [sp]
 8007748:	aa03      	add	r2, sp, #12
 800774a:	f7ff fedf 	bl	800750c <_printf_common>
 800774e:	3001      	adds	r0, #1
 8007750:	d14c      	bne.n	80077ec <_printf_i+0x200>
 8007752:	f04f 30ff 	mov.w	r0, #4294967295
 8007756:	b004      	add	sp, #16
 8007758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800775c:	4834      	ldr	r0, [pc, #208]	; (8007830 <_printf_i+0x244>)
 800775e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007762:	680e      	ldr	r6, [r1, #0]
 8007764:	6823      	ldr	r3, [r4, #0]
 8007766:	f856 5b04 	ldr.w	r5, [r6], #4
 800776a:	061f      	lsls	r7, r3, #24
 800776c:	600e      	str	r6, [r1, #0]
 800776e:	d514      	bpl.n	800779a <_printf_i+0x1ae>
 8007770:	07d9      	lsls	r1, r3, #31
 8007772:	bf44      	itt	mi
 8007774:	f043 0320 	orrmi.w	r3, r3, #32
 8007778:	6023      	strmi	r3, [r4, #0]
 800777a:	b91d      	cbnz	r5, 8007784 <_printf_i+0x198>
 800777c:	6823      	ldr	r3, [r4, #0]
 800777e:	f023 0320 	bic.w	r3, r3, #32
 8007782:	6023      	str	r3, [r4, #0]
 8007784:	2310      	movs	r3, #16
 8007786:	e7af      	b.n	80076e8 <_printf_i+0xfc>
 8007788:	6823      	ldr	r3, [r4, #0]
 800778a:	f043 0320 	orr.w	r3, r3, #32
 800778e:	6023      	str	r3, [r4, #0]
 8007790:	2378      	movs	r3, #120	; 0x78
 8007792:	4828      	ldr	r0, [pc, #160]	; (8007834 <_printf_i+0x248>)
 8007794:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007798:	e7e3      	b.n	8007762 <_printf_i+0x176>
 800779a:	065e      	lsls	r6, r3, #25
 800779c:	bf48      	it	mi
 800779e:	b2ad      	uxthmi	r5, r5
 80077a0:	e7e6      	b.n	8007770 <_printf_i+0x184>
 80077a2:	4616      	mov	r6, r2
 80077a4:	e7bb      	b.n	800771e <_printf_i+0x132>
 80077a6:	680b      	ldr	r3, [r1, #0]
 80077a8:	6826      	ldr	r6, [r4, #0]
 80077aa:	1d1d      	adds	r5, r3, #4
 80077ac:	6960      	ldr	r0, [r4, #20]
 80077ae:	600d      	str	r5, [r1, #0]
 80077b0:	0635      	lsls	r5, r6, #24
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	d501      	bpl.n	80077ba <_printf_i+0x1ce>
 80077b6:	6018      	str	r0, [r3, #0]
 80077b8:	e002      	b.n	80077c0 <_printf_i+0x1d4>
 80077ba:	0671      	lsls	r1, r6, #25
 80077bc:	d5fb      	bpl.n	80077b6 <_printf_i+0x1ca>
 80077be:	8018      	strh	r0, [r3, #0]
 80077c0:	2300      	movs	r3, #0
 80077c2:	4616      	mov	r6, r2
 80077c4:	6123      	str	r3, [r4, #16]
 80077c6:	e7ba      	b.n	800773e <_printf_i+0x152>
 80077c8:	680b      	ldr	r3, [r1, #0]
 80077ca:	1d1a      	adds	r2, r3, #4
 80077cc:	600a      	str	r2, [r1, #0]
 80077ce:	681e      	ldr	r6, [r3, #0]
 80077d0:	2100      	movs	r1, #0
 80077d2:	4630      	mov	r0, r6
 80077d4:	6862      	ldr	r2, [r4, #4]
 80077d6:	f000 f82f 	bl	8007838 <memchr>
 80077da:	b108      	cbz	r0, 80077e0 <_printf_i+0x1f4>
 80077dc:	1b80      	subs	r0, r0, r6
 80077de:	6060      	str	r0, [r4, #4]
 80077e0:	6863      	ldr	r3, [r4, #4]
 80077e2:	6123      	str	r3, [r4, #16]
 80077e4:	2300      	movs	r3, #0
 80077e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077ea:	e7a8      	b.n	800773e <_printf_i+0x152>
 80077ec:	4632      	mov	r2, r6
 80077ee:	4649      	mov	r1, r9
 80077f0:	4640      	mov	r0, r8
 80077f2:	6923      	ldr	r3, [r4, #16]
 80077f4:	47d0      	blx	sl
 80077f6:	3001      	adds	r0, #1
 80077f8:	d0ab      	beq.n	8007752 <_printf_i+0x166>
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	079b      	lsls	r3, r3, #30
 80077fe:	d413      	bmi.n	8007828 <_printf_i+0x23c>
 8007800:	68e0      	ldr	r0, [r4, #12]
 8007802:	9b03      	ldr	r3, [sp, #12]
 8007804:	4298      	cmp	r0, r3
 8007806:	bfb8      	it	lt
 8007808:	4618      	movlt	r0, r3
 800780a:	e7a4      	b.n	8007756 <_printf_i+0x16a>
 800780c:	2301      	movs	r3, #1
 800780e:	4632      	mov	r2, r6
 8007810:	4649      	mov	r1, r9
 8007812:	4640      	mov	r0, r8
 8007814:	47d0      	blx	sl
 8007816:	3001      	adds	r0, #1
 8007818:	d09b      	beq.n	8007752 <_printf_i+0x166>
 800781a:	3501      	adds	r5, #1
 800781c:	68e3      	ldr	r3, [r4, #12]
 800781e:	9903      	ldr	r1, [sp, #12]
 8007820:	1a5b      	subs	r3, r3, r1
 8007822:	42ab      	cmp	r3, r5
 8007824:	dcf2      	bgt.n	800780c <_printf_i+0x220>
 8007826:	e7eb      	b.n	8007800 <_printf_i+0x214>
 8007828:	2500      	movs	r5, #0
 800782a:	f104 0619 	add.w	r6, r4, #25
 800782e:	e7f5      	b.n	800781c <_printf_i+0x230>
 8007830:	08007e04 	.word	0x08007e04
 8007834:	08007e15 	.word	0x08007e15

08007838 <memchr>:
 8007838:	4603      	mov	r3, r0
 800783a:	b510      	push	{r4, lr}
 800783c:	b2c9      	uxtb	r1, r1
 800783e:	4402      	add	r2, r0
 8007840:	4293      	cmp	r3, r2
 8007842:	4618      	mov	r0, r3
 8007844:	d101      	bne.n	800784a <memchr+0x12>
 8007846:	2000      	movs	r0, #0
 8007848:	e003      	b.n	8007852 <memchr+0x1a>
 800784a:	7804      	ldrb	r4, [r0, #0]
 800784c:	3301      	adds	r3, #1
 800784e:	428c      	cmp	r4, r1
 8007850:	d1f6      	bne.n	8007840 <memchr+0x8>
 8007852:	bd10      	pop	{r4, pc}

08007854 <memmove>:
 8007854:	4288      	cmp	r0, r1
 8007856:	b510      	push	{r4, lr}
 8007858:	eb01 0402 	add.w	r4, r1, r2
 800785c:	d902      	bls.n	8007864 <memmove+0x10>
 800785e:	4284      	cmp	r4, r0
 8007860:	4623      	mov	r3, r4
 8007862:	d807      	bhi.n	8007874 <memmove+0x20>
 8007864:	1e43      	subs	r3, r0, #1
 8007866:	42a1      	cmp	r1, r4
 8007868:	d008      	beq.n	800787c <memmove+0x28>
 800786a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800786e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007872:	e7f8      	b.n	8007866 <memmove+0x12>
 8007874:	4601      	mov	r1, r0
 8007876:	4402      	add	r2, r0
 8007878:	428a      	cmp	r2, r1
 800787a:	d100      	bne.n	800787e <memmove+0x2a>
 800787c:	bd10      	pop	{r4, pc}
 800787e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007882:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007886:	e7f7      	b.n	8007878 <memmove+0x24>

08007888 <_free_r>:
 8007888:	b538      	push	{r3, r4, r5, lr}
 800788a:	4605      	mov	r5, r0
 800788c:	2900      	cmp	r1, #0
 800788e:	d043      	beq.n	8007918 <_free_r+0x90>
 8007890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007894:	1f0c      	subs	r4, r1, #4
 8007896:	2b00      	cmp	r3, #0
 8007898:	bfb8      	it	lt
 800789a:	18e4      	addlt	r4, r4, r3
 800789c:	f000 f8d0 	bl	8007a40 <__malloc_lock>
 80078a0:	4a1e      	ldr	r2, [pc, #120]	; (800791c <_free_r+0x94>)
 80078a2:	6813      	ldr	r3, [r2, #0]
 80078a4:	4610      	mov	r0, r2
 80078a6:	b933      	cbnz	r3, 80078b6 <_free_r+0x2e>
 80078a8:	6063      	str	r3, [r4, #4]
 80078aa:	6014      	str	r4, [r2, #0]
 80078ac:	4628      	mov	r0, r5
 80078ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078b2:	f000 b8cb 	b.w	8007a4c <__malloc_unlock>
 80078b6:	42a3      	cmp	r3, r4
 80078b8:	d90a      	bls.n	80078d0 <_free_r+0x48>
 80078ba:	6821      	ldr	r1, [r4, #0]
 80078bc:	1862      	adds	r2, r4, r1
 80078be:	4293      	cmp	r3, r2
 80078c0:	bf01      	itttt	eq
 80078c2:	681a      	ldreq	r2, [r3, #0]
 80078c4:	685b      	ldreq	r3, [r3, #4]
 80078c6:	1852      	addeq	r2, r2, r1
 80078c8:	6022      	streq	r2, [r4, #0]
 80078ca:	6063      	str	r3, [r4, #4]
 80078cc:	6004      	str	r4, [r0, #0]
 80078ce:	e7ed      	b.n	80078ac <_free_r+0x24>
 80078d0:	461a      	mov	r2, r3
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	b10b      	cbz	r3, 80078da <_free_r+0x52>
 80078d6:	42a3      	cmp	r3, r4
 80078d8:	d9fa      	bls.n	80078d0 <_free_r+0x48>
 80078da:	6811      	ldr	r1, [r2, #0]
 80078dc:	1850      	adds	r0, r2, r1
 80078de:	42a0      	cmp	r0, r4
 80078e0:	d10b      	bne.n	80078fa <_free_r+0x72>
 80078e2:	6820      	ldr	r0, [r4, #0]
 80078e4:	4401      	add	r1, r0
 80078e6:	1850      	adds	r0, r2, r1
 80078e8:	4283      	cmp	r3, r0
 80078ea:	6011      	str	r1, [r2, #0]
 80078ec:	d1de      	bne.n	80078ac <_free_r+0x24>
 80078ee:	6818      	ldr	r0, [r3, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	4401      	add	r1, r0
 80078f4:	6011      	str	r1, [r2, #0]
 80078f6:	6053      	str	r3, [r2, #4]
 80078f8:	e7d8      	b.n	80078ac <_free_r+0x24>
 80078fa:	d902      	bls.n	8007902 <_free_r+0x7a>
 80078fc:	230c      	movs	r3, #12
 80078fe:	602b      	str	r3, [r5, #0]
 8007900:	e7d4      	b.n	80078ac <_free_r+0x24>
 8007902:	6820      	ldr	r0, [r4, #0]
 8007904:	1821      	adds	r1, r4, r0
 8007906:	428b      	cmp	r3, r1
 8007908:	bf01      	itttt	eq
 800790a:	6819      	ldreq	r1, [r3, #0]
 800790c:	685b      	ldreq	r3, [r3, #4]
 800790e:	1809      	addeq	r1, r1, r0
 8007910:	6021      	streq	r1, [r4, #0]
 8007912:	6063      	str	r3, [r4, #4]
 8007914:	6054      	str	r4, [r2, #4]
 8007916:	e7c9      	b.n	80078ac <_free_r+0x24>
 8007918:	bd38      	pop	{r3, r4, r5, pc}
 800791a:	bf00      	nop
 800791c:	20001894 	.word	0x20001894

08007920 <_malloc_r>:
 8007920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007922:	1ccd      	adds	r5, r1, #3
 8007924:	f025 0503 	bic.w	r5, r5, #3
 8007928:	3508      	adds	r5, #8
 800792a:	2d0c      	cmp	r5, #12
 800792c:	bf38      	it	cc
 800792e:	250c      	movcc	r5, #12
 8007930:	2d00      	cmp	r5, #0
 8007932:	4606      	mov	r6, r0
 8007934:	db01      	blt.n	800793a <_malloc_r+0x1a>
 8007936:	42a9      	cmp	r1, r5
 8007938:	d903      	bls.n	8007942 <_malloc_r+0x22>
 800793a:	230c      	movs	r3, #12
 800793c:	6033      	str	r3, [r6, #0]
 800793e:	2000      	movs	r0, #0
 8007940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007942:	f000 f87d 	bl	8007a40 <__malloc_lock>
 8007946:	4921      	ldr	r1, [pc, #132]	; (80079cc <_malloc_r+0xac>)
 8007948:	680a      	ldr	r2, [r1, #0]
 800794a:	4614      	mov	r4, r2
 800794c:	b99c      	cbnz	r4, 8007976 <_malloc_r+0x56>
 800794e:	4f20      	ldr	r7, [pc, #128]	; (80079d0 <_malloc_r+0xb0>)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	b923      	cbnz	r3, 800795e <_malloc_r+0x3e>
 8007954:	4621      	mov	r1, r4
 8007956:	4630      	mov	r0, r6
 8007958:	f000 f862 	bl	8007a20 <_sbrk_r>
 800795c:	6038      	str	r0, [r7, #0]
 800795e:	4629      	mov	r1, r5
 8007960:	4630      	mov	r0, r6
 8007962:	f000 f85d 	bl	8007a20 <_sbrk_r>
 8007966:	1c43      	adds	r3, r0, #1
 8007968:	d123      	bne.n	80079b2 <_malloc_r+0x92>
 800796a:	230c      	movs	r3, #12
 800796c:	4630      	mov	r0, r6
 800796e:	6033      	str	r3, [r6, #0]
 8007970:	f000 f86c 	bl	8007a4c <__malloc_unlock>
 8007974:	e7e3      	b.n	800793e <_malloc_r+0x1e>
 8007976:	6823      	ldr	r3, [r4, #0]
 8007978:	1b5b      	subs	r3, r3, r5
 800797a:	d417      	bmi.n	80079ac <_malloc_r+0x8c>
 800797c:	2b0b      	cmp	r3, #11
 800797e:	d903      	bls.n	8007988 <_malloc_r+0x68>
 8007980:	6023      	str	r3, [r4, #0]
 8007982:	441c      	add	r4, r3
 8007984:	6025      	str	r5, [r4, #0]
 8007986:	e004      	b.n	8007992 <_malloc_r+0x72>
 8007988:	6863      	ldr	r3, [r4, #4]
 800798a:	42a2      	cmp	r2, r4
 800798c:	bf0c      	ite	eq
 800798e:	600b      	streq	r3, [r1, #0]
 8007990:	6053      	strne	r3, [r2, #4]
 8007992:	4630      	mov	r0, r6
 8007994:	f000 f85a 	bl	8007a4c <__malloc_unlock>
 8007998:	f104 000b 	add.w	r0, r4, #11
 800799c:	1d23      	adds	r3, r4, #4
 800799e:	f020 0007 	bic.w	r0, r0, #7
 80079a2:	1ac2      	subs	r2, r0, r3
 80079a4:	d0cc      	beq.n	8007940 <_malloc_r+0x20>
 80079a6:	1a1b      	subs	r3, r3, r0
 80079a8:	50a3      	str	r3, [r4, r2]
 80079aa:	e7c9      	b.n	8007940 <_malloc_r+0x20>
 80079ac:	4622      	mov	r2, r4
 80079ae:	6864      	ldr	r4, [r4, #4]
 80079b0:	e7cc      	b.n	800794c <_malloc_r+0x2c>
 80079b2:	1cc4      	adds	r4, r0, #3
 80079b4:	f024 0403 	bic.w	r4, r4, #3
 80079b8:	42a0      	cmp	r0, r4
 80079ba:	d0e3      	beq.n	8007984 <_malloc_r+0x64>
 80079bc:	1a21      	subs	r1, r4, r0
 80079be:	4630      	mov	r0, r6
 80079c0:	f000 f82e 	bl	8007a20 <_sbrk_r>
 80079c4:	3001      	adds	r0, #1
 80079c6:	d1dd      	bne.n	8007984 <_malloc_r+0x64>
 80079c8:	e7cf      	b.n	800796a <_malloc_r+0x4a>
 80079ca:	bf00      	nop
 80079cc:	20001894 	.word	0x20001894
 80079d0:	20001898 	.word	0x20001898

080079d4 <_realloc_r>:
 80079d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d6:	4607      	mov	r7, r0
 80079d8:	4614      	mov	r4, r2
 80079da:	460e      	mov	r6, r1
 80079dc:	b921      	cbnz	r1, 80079e8 <_realloc_r+0x14>
 80079de:	4611      	mov	r1, r2
 80079e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80079e4:	f7ff bf9c 	b.w	8007920 <_malloc_r>
 80079e8:	b922      	cbnz	r2, 80079f4 <_realloc_r+0x20>
 80079ea:	f7ff ff4d 	bl	8007888 <_free_r>
 80079ee:	4625      	mov	r5, r4
 80079f0:	4628      	mov	r0, r5
 80079f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079f4:	f000 f830 	bl	8007a58 <_malloc_usable_size_r>
 80079f8:	42a0      	cmp	r0, r4
 80079fa:	d20f      	bcs.n	8007a1c <_realloc_r+0x48>
 80079fc:	4621      	mov	r1, r4
 80079fe:	4638      	mov	r0, r7
 8007a00:	f7ff ff8e 	bl	8007920 <_malloc_r>
 8007a04:	4605      	mov	r5, r0
 8007a06:	2800      	cmp	r0, #0
 8007a08:	d0f2      	beq.n	80079f0 <_realloc_r+0x1c>
 8007a0a:	4631      	mov	r1, r6
 8007a0c:	4622      	mov	r2, r4
 8007a0e:	f7ff fb87 	bl	8007120 <memcpy>
 8007a12:	4631      	mov	r1, r6
 8007a14:	4638      	mov	r0, r7
 8007a16:	f7ff ff37 	bl	8007888 <_free_r>
 8007a1a:	e7e9      	b.n	80079f0 <_realloc_r+0x1c>
 8007a1c:	4635      	mov	r5, r6
 8007a1e:	e7e7      	b.n	80079f0 <_realloc_r+0x1c>

08007a20 <_sbrk_r>:
 8007a20:	b538      	push	{r3, r4, r5, lr}
 8007a22:	2300      	movs	r3, #0
 8007a24:	4d05      	ldr	r5, [pc, #20]	; (8007a3c <_sbrk_r+0x1c>)
 8007a26:	4604      	mov	r4, r0
 8007a28:	4608      	mov	r0, r1
 8007a2a:	602b      	str	r3, [r5, #0]
 8007a2c:	f7ff fac8 	bl	8006fc0 <_sbrk>
 8007a30:	1c43      	adds	r3, r0, #1
 8007a32:	d102      	bne.n	8007a3a <_sbrk_r+0x1a>
 8007a34:	682b      	ldr	r3, [r5, #0]
 8007a36:	b103      	cbz	r3, 8007a3a <_sbrk_r+0x1a>
 8007a38:	6023      	str	r3, [r4, #0]
 8007a3a:	bd38      	pop	{r3, r4, r5, pc}
 8007a3c:	20002c40 	.word	0x20002c40

08007a40 <__malloc_lock>:
 8007a40:	4801      	ldr	r0, [pc, #4]	; (8007a48 <__malloc_lock+0x8>)
 8007a42:	f000 b811 	b.w	8007a68 <__retarget_lock_acquire_recursive>
 8007a46:	bf00      	nop
 8007a48:	20002c48 	.word	0x20002c48

08007a4c <__malloc_unlock>:
 8007a4c:	4801      	ldr	r0, [pc, #4]	; (8007a54 <__malloc_unlock+0x8>)
 8007a4e:	f000 b80c 	b.w	8007a6a <__retarget_lock_release_recursive>
 8007a52:	bf00      	nop
 8007a54:	20002c48 	.word	0x20002c48

08007a58 <_malloc_usable_size_r>:
 8007a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a5c:	1f18      	subs	r0, r3, #4
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	bfbc      	itt	lt
 8007a62:	580b      	ldrlt	r3, [r1, r0]
 8007a64:	18c0      	addlt	r0, r0, r3
 8007a66:	4770      	bx	lr

08007a68 <__retarget_lock_acquire_recursive>:
 8007a68:	4770      	bx	lr

08007a6a <__retarget_lock_release_recursive>:
 8007a6a:	4770      	bx	lr

08007a6c <_init>:
 8007a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6e:	bf00      	nop
 8007a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a72:	bc08      	pop	{r3}
 8007a74:	469e      	mov	lr, r3
 8007a76:	4770      	bx	lr

08007a78 <_fini>:
 8007a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7a:	bf00      	nop
 8007a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7e:	bc08      	pop	{r3}
 8007a80:	469e      	mov	lr, r3
 8007a82:	4770      	bx	lr
